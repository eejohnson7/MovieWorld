{"ast":null,"code":"import { useCallback, useRef } from \"react\";\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\nexport function useTempValue(defaultValue, resetTime) {\n  if (resetTime === void 0) {\n    resetTime = 500;\n  }\n  var value = useRef(defaultValue);\n  var timeout = useRef();\n  var resetValue = useCallback(function () {\n    window.clearTimeout(timeout.current);\n    value.current = defaultValue;\n  }, [defaultValue]);\n  var setValue = useCallback(function (nextValue) {\n    value.current = nextValue;\n    window.clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(resetValue, resetTime);\n  }, [resetTime, resetValue]);\n  return [value, setValue, resetValue];\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAQ3C;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,YAAY,CAC1BC,YAAe,EACfC,SAAe;EAAf;IAAAA,eAAe;EAAA;EAEf,IAAMC,KAAK,GAAGJ,MAAM,CAACE,YAAY,CAAC;EAClC,IAAMG,OAAO,GAAGL,MAAM,EAAU;EAChC,IAAMM,UAAU,GAAGP,WAAW,CAAC;IAC7BQ,MAAM,CAACC,YAAY,CAACH,OAAO,CAACI,OAAO,CAAC;IACpCL,KAAK,CAACK,OAAO,GAAGP,YAAY;EAC9B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,IAAMQ,QAAQ,GAAGX,WAAW,CAC1B,UAACY,SAAY;IACXP,KAAK,CAACK,OAAO,GAAGE,SAAS;IACzBJ,MAAM,CAACC,YAAY,CAACH,OAAO,CAACI,OAAO,CAAC;IACpCJ,OAAO,CAACI,OAAO,GAAGF,MAAM,CAACK,UAAU,CAACN,UAAU,EAAEH,SAAS,CAAC;EAC5D,CAAC,EACD,CAACA,SAAS,EAAEG,UAAU,CAAC,CACxB;EAED,OAAO,CAACF,KAAK,EAAEM,QAAQ,EAAEJ,UAAU,CAAC;AACtC","names":["useCallback","useRef","useTempValue","defaultValue","resetTime","value","timeout","resetValue","window","clearTimeout","current","setValue","nextValue","setTimeout"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/useTempValue.ts"],"sourcesContent":["import type { MutableRefObject } from \"react\";\nimport { useCallback, useRef } from \"react\";\n\ntype CurrentValueRef<T> = MutableRefObject<T>;\ntype SetValue<T> = (nextValue: T) => void;\ntype ResetValue = () => void;\n\ntype ReturnValue<T> = [CurrentValueRef<T>, SetValue<T>, ResetValue];\n\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\nexport function useTempValue<T>(\n  defaultValue: T,\n  resetTime = 500\n): ReturnValue<T> {\n  const value = useRef(defaultValue);\n  const timeout = useRef<number>();\n  const resetValue = useCallback(() => {\n    window.clearTimeout(timeout.current);\n    value.current = defaultValue;\n  }, [defaultValue]);\n\n  const setValue = useCallback(\n    (nextValue: T) => {\n      value.current = nextValue;\n      window.clearTimeout(timeout.current);\n      timeout.current = window.setTimeout(resetValue, resetTime);\n    },\n    [resetTime, resetValue]\n  );\n\n  return [value, setValue, resetValue];\n}\n"]},"metadata":{},"sourceType":"module"}