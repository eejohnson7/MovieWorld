{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { isListboxOptionProps, Option, TextField } from \"@react-md/form\";\nimport { List } from \"@react-md/list\";\nimport { ScaleTransition } from \"@react-md/transition\";\nimport { BELOW_CENTER_ANCHOR, bem, omit } from \"@react-md/utils\";\nimport { HighlightedResult } from \"./HighlightedResult\";\nimport { useAutoComplete } from \"./useAutoComplete\";\nimport { getResultId as DEFAULT_GET_RESULT_ID, getResultLabel as DEFAULT_GET_RESULT_LABEL, getResultValue as DEFAULT_GET_RESULT_VALUE } from \"./utils\";\nvar block = bem(\"rmd-autocomplate\");\nvar listbox = bem(\"rmd-listbox\");\nvar DEFAULT_FILTER_OPTIONS = {\n  trim: true,\n  ignoreWhitespace: true\n};\nvar EMPTY_LIST = [];\n/**\n * An AutoComplete is an accessible combobox widget that allows for real-time\n * suggestions as the user types.\n */\nexport var AutoComplete = forwardRef(function AutoComplete(_a, forwardedRef) {\n  var _b = _a.autoComplete,\n    autoComplete = _b === void 0 ? \"list\" : _b,\n    data = _a.data,\n    _c = _a.filter,\n    filter = _c === void 0 ? \"case-insensitive\" : _c,\n    _d = _a.filterOptions,\n    filterOptions = _d === void 0 ? DEFAULT_FILTER_OPTIONS : _d,\n    _e = _a.filterOnNoValue,\n    filterOnNoValue = _e === void 0 ? false : _e,\n    className = _a.className,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    onClick = _a.onClick,\n    onKeyDown = _a.onKeyDown,\n    onChange = _a.onChange,\n    containerProps = _a.containerProps,\n    _f = _a.portal,\n    portal = _f === void 0 ? false : _f,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    listboxStyle = _a.listboxStyle,\n    listboxClassName = _a.listboxClassName,\n    onAutoComplete = _a.onAutoComplete,\n    _g = _a.clearOnAutoComplete,\n    clearOnAutoComplete = _g === void 0 ? false : _g,\n    _h = _a.labelKey,\n    labelKey = _h === void 0 ? \"label\" : _h,\n    _j = _a.valueKey,\n    valueKey = _j === void 0 ? \"value\" : _j,\n    _k = _a.getResultId,\n    getResultId = _k === void 0 ? DEFAULT_GET_RESULT_ID : _k,\n    _l = _a.getResultLabel,\n    getResultLabel = _l === void 0 ? DEFAULT_GET_RESULT_LABEL : _l,\n    _m = _a.getResultValue,\n    getResultValue = _m === void 0 ? DEFAULT_GET_RESULT_VALUE : _m,\n    _o = _a.highlight,\n    highlight = _o === void 0 ? false : _o,\n    _p = _a.highlightReapeating,\n    highlightReapeating = _p === void 0 ? false : _p,\n    highlightStyle = _a.highlightStyle,\n    highlightClassName = _a.highlightClassName,\n    _q = _a.anchor,\n    anchor = _q === void 0 ? BELOW_CENTER_ANCHOR : _q,\n    _r = _a.listboxWidth,\n    listboxWidth = _r === void 0 ? \"equal\" : _r,\n    _s = _a.xMargin,\n    xMargin = _s === void 0 ? 0 : _s,\n    _t = _a.yMargin,\n    yMargin = _t === void 0 ? 0 : _t,\n    _u = _a.vwMargin,\n    vwMargin = _u === void 0 ? 16 : _u,\n    _v = _a.vhMargin,\n    vhMargin = _v === void 0 ? 16 : _v,\n    _w = _a.transformOrigin,\n    transformOrigin = _w === void 0 ? true : _w,\n    _x = _a.preventOverlap,\n    preventOverlap = _x === void 0 ? true : _x,\n    _y = _a.disableVHBounds,\n    disableVHBounds = _y === void 0 ? false : _y,\n    _z = _a.disableSwapping,\n    disableSwapping = _z === void 0 ? true : _z,\n    disableShowOnFocus = _a.disableShowOnFocus,\n    _0 = _a.closeOnResize,\n    closeOnResize = _0 === void 0 ? false : _0,\n    _1 = _a.closeOnScroll,\n    closeOnScroll = _1 === void 0 ? false : _1,\n    _2 = _a.omitKeys,\n    omitKeys = _2 === void 0 ? EMPTY_LIST : _2,\n    propValue = _a.value,\n    defaultValue = _a.defaultValue,\n    beforeResultsChildren = _a.beforeResultsChildren,\n    afterResultsChildren = _a.afterResultsChildren,\n    props = __rest(_a, [\"autoComplete\", \"data\", \"filter\", \"filterOptions\", \"filterOnNoValue\", \"className\", \"onBlur\", \"onFocus\", \"onClick\", \"onKeyDown\", \"onChange\", \"containerProps\", \"portal\", \"portalInto\", \"portalIntoId\", \"listboxStyle\", \"listboxClassName\", \"onAutoComplete\", \"clearOnAutoComplete\", \"labelKey\", \"valueKey\", \"getResultId\", \"getResultLabel\", \"getResultValue\", \"highlight\", \"highlightReapeating\", \"highlightStyle\", \"highlightClassName\", \"anchor\", \"listboxWidth\", \"xMargin\", \"yMargin\", \"vwMargin\", \"vhMargin\", \"transformOrigin\", \"preventOverlap\", \"disableVHBounds\", \"disableSwapping\", \"disableShowOnFocus\", \"closeOnResize\", \"closeOnScroll\", \"omitKeys\", \"value\", \"defaultValue\", \"beforeResultsChildren\", \"afterResultsChildren\"]);\n  var id = props.id;\n  var comboboxId = \"\".concat(id, \"-combobox\");\n  var suggestionsId = \"\".concat(id, \"-listbox\");\n  var isListAutocomplete = autoComplete === \"list\" || autoComplete === \"both\";\n  var isInlineAutocomplete = autoComplete === \"inline\" || autoComplete === \"both\";\n  var _3 = useAutoComplete({\n      suggestionsId: suggestionsId,\n      defaultValue: defaultValue,\n      data: data,\n      filter: filter,\n      filterOptions: filterOptions,\n      filterOnNoValue: filterOnNoValue,\n      valueKey: valueKey,\n      getResultId: getResultId,\n      getResultValue: getResultValue,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onClick: onClick,\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      forwardedRef: forwardedRef,\n      onAutoComplete: onAutoComplete,\n      clearOnAutoComplete: clearOnAutoComplete,\n      isListAutocomplete: isListAutocomplete,\n      isInlineAutocomplete: isInlineAutocomplete,\n      anchor: anchor,\n      xMargin: xMargin,\n      yMargin: yMargin,\n      vwMargin: vwMargin,\n      vhMargin: vhMargin,\n      transformOrigin: transformOrigin,\n      listboxWidth: listboxWidth,\n      listboxStyle: listboxStyle,\n      preventOverlap: preventOverlap,\n      disableSwapping: disableSwapping,\n      disableVHBounds: disableVHBounds,\n      closeOnResize: closeOnResize,\n      closeOnScroll: closeOnScroll,\n      disableShowOnFocus: disableShowOnFocus\n    }),\n    ref = _3.ref,\n    match = _3.match,\n    value = _3.value,\n    visible = _3.visible,\n    activeId = _3.activeId,\n    itemRefs = _3.itemRefs,\n    filteredData = _3.filteredData,\n    listboxRef = _3.listboxRef,\n    fixedStyle = _3.fixedStyle,\n    transitionHooks = _3.transitionHooks,\n    handleBlur = _3.handleBlur,\n    handleFocus = _3.handleFocus,\n    handleClick = _3.handleClick,\n    handleChange = _3.handleChange,\n    handleKeyDown = _3.handleKeyDown,\n    handleAutoComplete = _3.handleAutoComplete;\n  return _jsxs(_Fragment, {\n    children: [_jsx(TextField, __assign({}, props, {\n      \"aria-autocomplete\": autoComplete,\n      \"aria-controls\": comboboxId,\n      \"aria-activedescendant\": activeId,\n      autoComplete: \"off\",\n      value: propValue !== null && propValue !== void 0 ? propValue : match,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onClick: handleClick,\n      onKeyDown: handleKeyDown,\n      onChange: handleChange,\n      ref: ref,\n      className: cn(block(), className),\n      containerProps: __assign(__assign({}, containerProps), {\n        \"aria-haspopup\": \"listbox\",\n        \"aria-owns\": suggestionsId,\n        \"aria-expanded\": visible,\n        id: comboboxId,\n        role: \"combobox\"\n      })\n    })), _jsx(ScaleTransition, __assign({\n      nodeRef: listboxRef,\n      portal: portal,\n      portalInto: portalInto,\n      portalIntoId: portalIntoId,\n      vertical: true,\n      transitionIn: visible\n    }, transitionHooks, {\n      className: cn(listbox({\n        temporary: true\n      }), listboxClassName)\n    }, {\n      children: _jsxs(List, __assign({\n        id: suggestionsId,\n        role: \"listbox\",\n        style: fixedStyle\n      }, {\n        children: [beforeResultsChildren, filteredData.map(function (datum, i) {\n          var resultId = getResultId(suggestionsId, i);\n          var optionProps;\n          if (isListboxOptionProps(datum)) {\n            optionProps = omit(datum, __spreadArray([labelKey, valueKey], __read(omitKeys), false));\n          }\n          return _jsx(Option, __assign({}, optionProps, {\n            id: resultId,\n            selected: false,\n            focused: resultId === activeId,\n            ref: itemRefs[i],\n            onClick: function () {\n              return handleAutoComplete(i);\n            }\n          }, {\n            children: _jsx(HighlightedResult, __assign({\n              id: \"\".concat(resultId, \"-match\"),\n              style: highlightStyle,\n              className: highlightClassName,\n              value: propValue !== null && propValue !== void 0 ? propValue : value,\n              enabled: highlight,\n              repeatable: highlightReapeating\n            }, {\n              children: getResultLabel(datum, labelKey, value)\n            }))\n          }), resultId);\n        }), afterResultsChildren]\n      }))\n    }))]\n  });\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","isListboxOptionProps","Option","TextField","List","ScaleTransition","BELOW_CENTER_ANCHOR","bem","omit","HighlightedResult","useAutoComplete","getResultId","DEFAULT_GET_RESULT_ID","getResultLabel","DEFAULT_GET_RESULT_LABEL","getResultValue","DEFAULT_GET_RESULT_VALUE","block","listbox","DEFAULT_FILTER_OPTIONS","trim","ignoreWhitespace","EMPTY_LIST","AutoComplete","_a","forwardedRef","autoComplete","data","_c","filter","_d","filterOptions","_e","filterOnNoValue","className","onBlur","onFocus","onClick","onKeyDown","onChange","containerProps","_f","portal","portalInto","portalIntoId","listboxStyle","listboxClassName","onAutoComplete","_g","clearOnAutoComplete","_h","labelKey","_j","valueKey","_k","_l","_m","_o","highlight","_p","highlightReapeating","highlightStyle","highlightClassName","_q","anchor","_r","listboxWidth","_s","xMargin","_t","yMargin","_u","vwMargin","_v","vhMargin","_w","transformOrigin","_x","preventOverlap","_y","disableVHBounds","_z","disableSwapping","disableShowOnFocus","_0","closeOnResize","_1","closeOnScroll","_2","omitKeys","propValue","defaultValue","beforeResultsChildren","afterResultsChildren","props","comboboxId","id","suggestionsId","isListAutocomplete","isInlineAutocomplete","ref","match","value","visible","activeId","itemRefs","filteredData","listboxRef","fixedStyle","transitionHooks","handleBlur","handleFocus","handleClick","handleChange","handleKeyDown","handleAutoComplete","_jsxs","children","_jsx","role","nodeRef","vertical","transitionIn","temporary","style","map","datum","i","resultId","optionProps","selected","focused","enabled","repeatable"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/autocomplete/src/AutoComplete.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ListboxOptionProps } from \"@react-md/form\";\nimport { isListboxOptionProps, Option, TextField } from \"@react-md/form\";\nimport { List } from \"@react-md/list\";\nimport { ScaleTransition } from \"@react-md/transition\";\nimport { BELOW_CENTER_ANCHOR, bem, omit } from \"@react-md/utils\";\n\nimport { HighlightedResult } from \"./HighlightedResult\";\nimport type { AutoCompleteProps } from \"./types\";\nimport { useAutoComplete } from \"./useAutoComplete\";\nimport {\n  getResultId as DEFAULT_GET_RESULT_ID,\n  getResultLabel as DEFAULT_GET_RESULT_LABEL,\n  getResultValue as DEFAULT_GET_RESULT_VALUE,\n} from \"./utils\";\n\nconst block = bem(\"rmd-autocomplate\");\nconst listbox = bem(\"rmd-listbox\");\n\nconst DEFAULT_FILTER_OPTIONS = {\n  trim: true,\n  ignoreWhitespace: true,\n};\n\nconst EMPTY_LIST: readonly string[] = [];\n\n/**\n * An AutoComplete is an accessible combobox widget that allows for real-time\n * suggestions as the user types.\n */\nexport const AutoComplete = forwardRef<HTMLInputElement, AutoCompleteProps>(\n  function AutoComplete(\n    {\n      autoComplete = \"list\",\n      data,\n      filter = \"case-insensitive\",\n      filterOptions = DEFAULT_FILTER_OPTIONS,\n      filterOnNoValue = false,\n      className,\n      onBlur,\n      onFocus,\n      onClick,\n      onKeyDown,\n      onChange,\n      containerProps,\n      portal = false,\n      portalInto,\n      portalIntoId,\n      listboxStyle,\n      listboxClassName,\n      onAutoComplete,\n      clearOnAutoComplete = false,\n      labelKey = \"label\",\n      valueKey = \"value\",\n      getResultId = DEFAULT_GET_RESULT_ID,\n      getResultLabel = DEFAULT_GET_RESULT_LABEL,\n      getResultValue = DEFAULT_GET_RESULT_VALUE,\n      highlight = false,\n      highlightReapeating = false,\n      highlightStyle,\n      highlightClassName,\n      anchor = BELOW_CENTER_ANCHOR,\n      listboxWidth = \"equal\",\n      xMargin = 0,\n      yMargin = 0,\n      vwMargin = 16,\n      vhMargin = 16,\n      transformOrigin = true,\n      preventOverlap = true,\n      disableVHBounds = false,\n      disableSwapping = true,\n      disableShowOnFocus,\n      closeOnResize = false,\n      closeOnScroll = false,\n      omitKeys = EMPTY_LIST,\n      value: propValue,\n      defaultValue,\n      beforeResultsChildren,\n      afterResultsChildren,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const { id } = props;\n    const comboboxId = `${id}-combobox`;\n    const suggestionsId = `${id}-listbox`;\n    const isListAutocomplete =\n      autoComplete === \"list\" || autoComplete === \"both\";\n    const isInlineAutocomplete =\n      autoComplete === \"inline\" || autoComplete === \"both\";\n\n    const {\n      ref,\n      match,\n      value,\n      visible,\n      activeId,\n      itemRefs,\n      filteredData,\n      listboxRef,\n      fixedStyle,\n      transitionHooks,\n      handleBlur,\n      handleFocus,\n      handleClick,\n      handleChange,\n      handleKeyDown,\n      handleAutoComplete,\n    } = useAutoComplete({\n      suggestionsId,\n      defaultValue,\n      data,\n      filter,\n      filterOptions,\n      filterOnNoValue,\n      valueKey,\n      getResultId,\n      getResultValue,\n      onBlur,\n      onFocus,\n      onClick,\n      onChange,\n      onKeyDown,\n      forwardedRef,\n      onAutoComplete,\n      clearOnAutoComplete,\n      isListAutocomplete,\n      isInlineAutocomplete,\n      anchor,\n      xMargin,\n      yMargin,\n      vwMargin,\n      vhMargin,\n      transformOrigin,\n      listboxWidth,\n      listboxStyle,\n      preventOverlap,\n      disableSwapping,\n      disableVHBounds,\n      closeOnResize,\n      closeOnScroll,\n      disableShowOnFocus,\n    });\n\n    return (\n      <>\n        <TextField\n          {...props}\n          aria-autocomplete={autoComplete}\n          aria-controls={comboboxId}\n          aria-activedescendant={activeId}\n          autoComplete=\"off\"\n          value={propValue ?? match}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          onChange={handleChange}\n          ref={ref}\n          className={cn(block(), className)}\n          containerProps={{\n            ...containerProps,\n            \"aria-haspopup\": \"listbox\",\n            \"aria-owns\": suggestionsId,\n            \"aria-expanded\": visible,\n            id: comboboxId,\n            role: \"combobox\",\n          }}\n        />\n        <ScaleTransition\n          nodeRef={listboxRef}\n          portal={portal}\n          portalInto={portalInto}\n          portalIntoId={portalIntoId}\n          vertical\n          transitionIn={visible}\n          {...transitionHooks}\n          className={cn(listbox({ temporary: true }), listboxClassName)}\n        >\n          <List id={suggestionsId} role=\"listbox\" style={fixedStyle}>\n            {beforeResultsChildren}\n            {filteredData.map((datum, i) => {\n              const resultId = getResultId(suggestionsId, i);\n              let optionProps: ListboxOptionProps | undefined;\n              if (isListboxOptionProps(datum)) {\n                optionProps = omit(datum, [labelKey, valueKey, ...omitKeys]);\n              }\n\n              return (\n                <Option\n                  key={resultId}\n                  {...optionProps}\n                  id={resultId}\n                  selected={false}\n                  focused={resultId === activeId}\n                  ref={itemRefs[i]}\n                  onClick={() => handleAutoComplete(i)}\n                >\n                  <HighlightedResult\n                    id={`${resultId}-match`}\n                    style={highlightStyle}\n                    className={highlightClassName}\n                    value={propValue ?? value}\n                    enabled={highlight}\n                    repeatable={highlightReapeating}\n                  >\n                    {getResultLabel(datum, labelKey, value)}\n                  </HighlightedResult>\n                </Option>\n              );\n            })}\n            {afterResultsChildren}\n          </List>\n        </ScaleTransition>\n      </>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}