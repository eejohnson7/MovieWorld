{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\nexport function findIgnoreCase(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n    getItemValue = _a.getItemValue,\n    valueKey = _a.valueKey,\n    trim = _a.trim,\n    ignoreWhitespace = _a.ignoreWhitespace;\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n  if (!query.length || !searchable.length) {\n    return null;\n  }\n  var found = searchable.find(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n    return value.indexOf(query) === 0;\n  });\n  return typeof found === \"number\" ? found : found || null;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,sBAAsB,EAAEC,eAAe,QAAQ,SAAS;AAEjE;;;;;;;;;;AAUA,OAAM,SAAUC,cAAc,CAC5BC,KAAa,EACbC,UAAwB,EACxBC,OAA8B;EAA9B;IAAAA,YAA8B;EAAA;EAExB,SAAqDN,QAAQ,CACjEM,OAAO,EACPL,sBAAsB,CACvB;IAHOM,YAAY;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,gBAAgB,sBAGrD;EAEDN,KAAK,GAAGF,eAAe,CAACE,KAAK,EAAE,IAAI,EAAEK,IAAI,EAAEC,gBAAgB,CAAC;EAC5D,IAAI,CAACN,KAAK,CAACO,MAAM,IAAI,CAACN,UAAU,CAACM,MAAM,EAAE;IACvC,OAAO,IAAI;;EAGb,IAAMC,KAAK,GAAGP,UAAU,CAACQ,IAAI,CAAC,UAACC,IAAI;IACjC,IAAMC,KAAK,GAAGb,eAAe,CAC3BK,YAAY,CAACO,IAAI,EAAEN,QAAQ,CAAC,EAC5B,IAAI,EACJC,IAAI,EACJC,gBAAgB,CACjB;IAED,OAAOK,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,KAAK,CAAC;EACnC,CAAC,CAAC;EAEF,OAAO,OAAOQ,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,IAAI,IAAI;AAC1D","names":["defaults","DEFAULT_SEARCH_OPTIONS","getSearchString","findIgnoreCase","query","searchable","options","getItemValue","valueKey","trim","ignoreWhitespace","length","found","find","item","value","indexOf"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/search/findIgnoreCase.ts"],"sourcesContent":["import { defaults } from \"../defaults\";\nimport type { SearchOptions } from \"./utils\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\nexport function findIgnoreCase<T = unknown>(\n  query: string,\n  searchable: readonly T[],\n  options: SearchOptions<T> = {}\n): T | null {\n  const { getItemValue, valueKey, trim, ignoreWhitespace } = defaults(\n    options,\n    DEFAULT_SEARCH_OPTIONS\n  );\n\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n  if (!query.length || !searchable.length) {\n    return null;\n  }\n\n  const found = searchable.find((item) => {\n    const value = getSearchString(\n      getItemValue(item, valueKey),\n      true,\n      trim,\n      ignoreWhitespace\n    );\n\n    return value.indexOf(query) === 0;\n  });\n\n  return typeof found === \"number\" ? found : found || null;\n}\n"]},"metadata":{},"sourceType":"module"}