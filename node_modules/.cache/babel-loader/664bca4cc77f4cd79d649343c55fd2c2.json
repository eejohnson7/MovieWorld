{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\nimport { isBubbled } from \"./ripples/utils\";\n/**\n * This is a different version of the useRippleStates that will allow you to\n * know when a component is being pressed by the user. This is really just a\n * fallback for when the ripples are disabled.\n *\n * This will return an object containing the current pressed state of the\n * element as well as all the merged eventHandlers required to trigger the\n * different states.\n *\n * NOTE: Unlike the ripple effect, this pressed states will not be triggered\n * from a programmatic click event.\n */\nexport function usePressedStates(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.handlers,\n    handlers = _c === void 0 ? {} : _c,\n    _d = _b.disableSpacebarClick,\n    disableSpacebarClick = _d === void 0 ? false : _d;\n  var _e = __read(useState(false), 2),\n    pressed = _e[0],\n    setPressed = _e[1];\n  var ref = useRefCache(__assign(__assign({}, handlers), {\n    pressed: pressed\n  }));\n  var handleKeyDown = useCallback(function (event) {\n    var _a = ref.current,\n      onKeyDown = _a.onKeyDown,\n      pressed = _a.pressed;\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n    var key = event.key;\n    if (!pressed && (key === \"Enter\" || !disableSpacebarClick && key === \" \")) {\n      setPressed(true);\n    }\n  },\n  // disabled since useRefCache for ref\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disableSpacebarClick]);\n  var handleKeyUp = useCallback(function (event) {\n    var _a = ref.current,\n      onKeyUp = _a.onKeyUp,\n      pressed = _a.pressed;\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleMouseDown = useCallback(function (event) {\n    var _a = ref.current,\n      onMouseDown = _a.onMouseDown,\n      pressed = _a.pressed;\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n    if (!pressed && event.button === 0 && !isBubbled(event)) {\n      setPressed(true);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleMouseUp = useCallback(function (event) {\n    var _a = ref.current,\n      onMouseUp = _a.onMouseUp,\n      pressed = _a.pressed;\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleMouseLeave = useCallback(function (event) {\n    var _a = ref.current,\n      onMouseLeave = _a.onMouseLeave,\n      pressed = _a.pressed;\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleTouchStart = useCallback(function (event) {\n    var _a = ref.current,\n      onTouchStart = _a.onTouchStart,\n      pressed = _a.pressed;\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n    if (!pressed && !isBubbled(event)) {\n      setPressed(true);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleTouchMove = useCallback(function (event) {\n    var _a = ref.current,\n      onTouchMove = _a.onTouchMove,\n      pressed = _a.pressed;\n    if (onTouchMove) {\n      onTouchMove(event);\n    }\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleTouchEnd = useCallback(function (event) {\n    var _a = ref.current,\n      onTouchEnd = _a.onTouchEnd,\n      pressed = _a.pressed;\n    if (onTouchEnd) {\n      onTouchEnd(event);\n    }\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    pressed: pressed,\n    handlers: {\n      onClick: handlers.onClick,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useState","useRefCache","isBubbled","usePressedStates","_a","_b","_c","handlers","_d","disableSpacebarClick","pressed","setPressed","ref","handleKeyDown","event","current","onKeyDown","key","handleKeyUp","onKeyUp","handleMouseDown","onMouseDown","button","handleMouseUp","onMouseUp","handleMouseLeave","onMouseLeave","handleTouchStart","onTouchStart","handleTouchMove","onTouchMove","handleTouchEnd","onTouchEnd","onClick"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/states/src/usePressedStates.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n\nimport type { MergableRippleHandlers } from \"./ripples/types\";\nimport { isBubbled } from \"./ripples/utils\";\n\ninterface PressedStatesOptions<E extends HTMLElement = HTMLElement> {\n  handlers?: MergableRippleHandlers<E>;\n  disableSpacebarClick?: boolean;\n}\n\ninterface ReturnValue<E extends HTMLElement> {\n  pressed: boolean;\n  handlers: MergableRippleHandlers<E>;\n}\n\n/**\n * This is a different version of the useRippleStates that will allow you to\n * know when a component is being pressed by the user. This is really just a\n * fallback for when the ripples are disabled.\n *\n * This will return an object containing the current pressed state of the\n * element as well as all the merged eventHandlers required to trigger the\n * different states.\n *\n * NOTE: Unlike the ripple effect, this pressed states will not be triggered\n * from a programmatic click event.\n */\nexport function usePressedStates<E extends HTMLElement = HTMLElement>({\n  handlers = {},\n  disableSpacebarClick = false,\n}: PressedStatesOptions<E> = {}): ReturnValue<E> {\n  const [pressed, setPressed] = useState(false);\n  const ref = useRefCache({ ...handlers, pressed });\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<E>) => {\n      const { onKeyDown, pressed } = ref.current;\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      const { key } = event;\n      if (\n        !pressed &&\n        (key === \"Enter\" || (!disableSpacebarClick && key === \" \"))\n      ) {\n        setPressed(true);\n      }\n    },\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disableSpacebarClick]\n  );\n\n  const handleKeyUp = useCallback((event: React.KeyboardEvent<E>) => {\n    const { onKeyUp, pressed } = ref.current;\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleMouseDown = useCallback((event: React.MouseEvent<E>) => {\n    const { onMouseDown, pressed } = ref.current;\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n\n    if (!pressed && event.button === 0 && !isBubbled(event)) {\n      setPressed(true);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleMouseUp = useCallback((event: React.MouseEvent<E>) => {\n    const { onMouseUp, pressed } = ref.current;\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleMouseLeave = useCallback((event: React.MouseEvent<E>) => {\n    const { onMouseLeave, pressed } = ref.current;\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleTouchStart = useCallback((event: React.TouchEvent<E>) => {\n    const { onTouchStart, pressed } = ref.current;\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    if (!pressed && !isBubbled(event)) {\n      setPressed(true);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleTouchMove = useCallback((event: React.TouchEvent<E>) => {\n    const { onTouchMove, pressed } = ref.current;\n    if (onTouchMove) {\n      onTouchMove(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleTouchEnd = useCallback((event: React.TouchEvent<E>) => {\n    const { onTouchEnd, pressed } = ref.current;\n    if (onTouchEnd) {\n      onTouchEnd(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    }\n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    pressed,\n    handlers: {\n      onClick: handlers.onClick,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}