{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * This hook can be used to control the state of a radio group or a select\n * element.\n *\n * @param defaultValue - The default value. If you want the user to specifically\n * choose a value, set this to the empty string.\n * @param onChange - An optional change event handler to also call when the\n * change event is triggered.\n * @returns a list containing the current value, a change event handler, and\n * then a manual value setter.\n */\nexport function useChoice(defaultValue, onChange) {\n  var _a = __read(useState(defaultValue), 2),\n    value = _a[0],\n    setValue = _a[1];\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n    setValue(event.currentTarget.value);\n  }, [onChange]);\n  return [value, handleChange, setValue];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAW7C;;;;;;;;;;;AAWA,OAAM,SAAUC,SAAS,CAIvBC,YAAe,EACfC,QAAgC;EAE1B,gBAAoBH,QAAQ,CAAIE,YAAY,CAAC;IAA5CE,KAAK;IAAEC,QAAQ,QAA6B;EACnD,IAAMC,YAAY,GAAGP,WAAW,CAC9B,UAACQ,KAAK;IACJ,IAAIJ,QAAQ,EAAE;MACZA,QAAQ,CAACI,KAAK,CAAC;;IAGjBF,QAAQ,CAACE,KAAK,CAACC,aAAa,CAACJ,KAAU,CAAC;EAC1C,CAAC,EACD,CAACD,QAAQ,CAAC,CACX;EAED,OAAO,CAACC,KAAK,EAAEE,YAAY,EAAED,QAAQ,CAAC;AACxC","names":["useCallback","useState","useChoice","defaultValue","onChange","value","setValue","handleChange","event","currentTarget"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/useChoice.ts"],"sourcesContent":["import type { Dispatch, SetStateAction } from \"react\";\nimport { useCallback, useState } from \"react\";\n\ntype InputElement = HTMLInputElement | HTMLSelectElement;\ntype ChangeEventHandler<E extends InputElement> = React.ChangeEventHandler<E>;\ntype DefaultValue =\n  | string\n  | number\n  | readonly string[]\n  | (() => string | number | readonly string[]);\ntype SetValue<T extends DefaultValue> = Dispatch<SetStateAction<T>>;\n\n/**\n * This hook can be used to control the state of a radio group or a select\n * element.\n *\n * @param defaultValue - The default value. If you want the user to specifically\n * choose a value, set this to the empty string.\n * @param onChange - An optional change event handler to also call when the\n * change event is triggered.\n * @returns a list containing the current value, a change event handler, and\n * then a manual value setter.\n */\nexport function useChoice<\n  T extends DefaultValue = DefaultValue,\n  E extends InputElement = InputElement\n>(\n  defaultValue: T,\n  onChange?: ChangeEventHandler<E>\n): readonly [T, ChangeEventHandler<E>, SetValue<T>] {\n  const [value, setValue] = useState<T>(defaultValue);\n  const handleChange = useCallback<ChangeEventHandler<E>>(\n    (event) => {\n      if (onChange) {\n        onChange(event);\n      }\n\n      setValue(event.currentTarget.value as T);\n    },\n    [onChange]\n  );\n\n  return [value, handleChange, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}