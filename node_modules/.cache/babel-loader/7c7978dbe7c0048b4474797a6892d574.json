{"ast":null,"code":"import { createContext, useContext } from \"react\";\nimport { DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\n/** @internal */\nvar noop = function () {\n  // do nothing\n};\n/** @internal */\nvar context = createContext({\n  visibleInTime: DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n  enableHoverMode: noop,\n  disableHoverMode: noop,\n  startDisableTimer: noop\n});\n/**\n * @internal\n * @remarks \\@since 2.8.0\n */\nexport var HoverModeContextProvider = context.Provider;\n/**\n * Gets the {@link HoverModeContext} which allows you implement hover mode\n * functionality for any component. This is mostly an internal hook since\n * everything you need will be available in the {@link useHoverMode} hook.\n *\n * @internal\n * @remarks \\@since 2.8.0\n * @returns The {@link HoverModeContext}\n */\nexport function useHoverModeContext() {\n  return useContext(context);\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAEjD,SAASC,kCAAkC,QAAQ,aAAa;AAEhE;AACA,IAAMC,IAAI,GAAG;EACX;AACF,CAAC;AA6CD;AACA,IAAMC,OAAO,GAAGJ,aAAa,CAAmB;EAC9CK,aAAa,EAAEH,kCAAkC;EACjDI,eAAe,EAAEH,IAAI;EACrBI,gBAAgB,EAAEJ,IAAI;EACtBK,iBAAiB,EAAEL;CACpB,CAAC;AAEF;;;;AAIA,OAAe,IAAUM,wBAAwB,GAAKL,OAAO,SAAZ;AAEjD;;;;;;;;;AASA,OAAM,SAAUM,mBAAmB;EACjC,OAAOT,UAAU,CAACG,OAAO,CAAC;AAC5B","names":["createContext","useContext","DEFAULT_HOVER_MODE_VISIBLE_IN_TIME","noop","context","visibleInTime","enableHoverMode","disableHoverMode","startDisableTimer","HoverModeContextProvider","useHoverModeContext"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/hover/useHoverModeContext.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\nimport { DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\n\n/** @internal */\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * This is mostly an internal interface since everything you need will be\n * available in the {@link useHoverMode} hook.\n *\n * @remarks \\@since 2.8.0\n */\nexport interface HoverModeActions {\n  /**\n   * A function that will enable the hover mode for all connected components.\n   * This should normally be called after hovering over an element for the\n   * {@link HoverModeContext.visibleInTime}.\n   */\n  enableHoverMode(): void;\n\n  /**\n   * A function that will disable the hover mode for all connected components.\n   * This should normally be called after leaving a hoverable element or the\n   * {@link UserInteractionMode} changes to `\"touch\"`.\n   */\n  disableHoverMode(): void;\n\n  /**\n   * A function that will start a timer for disabling the hover mode for all\n   * connected components. This should normally be called after leaving a\n   * hoverable element\n   */\n  startDisableTimer(): void;\n}\n\n/**\n * This is mostly an internal interface since everything you need will be\n * available in the {@link useHoverMode} hook.\n *\n * @remarks \\@since 2.8.0\n */\nexport interface HoverModeContext extends HoverModeActions {\n  /**\n   * The amount of time (in ms) before the element being hovered should\n   * switch the visibility from `false` to `true`.\n   */\n  visibleInTime: number;\n}\n\n/** @internal */\nconst context = createContext<HoverModeContext>({\n  visibleInTime: DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n  enableHoverMode: noop,\n  disableHoverMode: noop,\n  startDisableTimer: noop,\n});\n\n/**\n * @internal\n * @remarks \\@since 2.8.0\n */\nexport const { Provider: HoverModeContextProvider } = context;\n\n/**\n * Gets the {@link HoverModeContext} which allows you implement hover mode\n * functionality for any component. This is mostly an internal hook since\n * everything you need will be available in the {@link useHoverMode} hook.\n *\n * @internal\n * @remarks \\@since 2.8.0\n * @returns The {@link HoverModeContext}\n */\nexport function useHoverModeContext(): HoverModeContext {\n  return useContext(context);\n}\n"]},"metadata":{},"sourceType":"module"}