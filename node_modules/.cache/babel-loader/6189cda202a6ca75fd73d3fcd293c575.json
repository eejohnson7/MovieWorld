{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nimport { DEFAULT_OVERLAY_TIMEOUT, DEFAULT_OVERLAY_CLASSNAMES } from \"./constants\";\nvar block = bem(\"rmd-overlay\");\n/**\n * The `Overlay` component is a simple component used to render a full page\n * overlay in the page with an enter and exit animation. If there are overflow\n * issues or you need to portal the overlay to a different area within your app,\n * you should use the `OverlayPortal` component instead.\n */\nexport var Overlay = forwardRef(function Overlay(_a, nodeRef) {\n  var className = _a.className,\n    visible = _a.visible,\n    _b = _a.hidden,\n    hidden = _b === void 0 ? false : _b,\n    _c = _a.clickable,\n    clickable = _c === void 0 ? true : _c,\n    _d = _a.timeout,\n    timeout = _d === void 0 ? DEFAULT_OVERLAY_TIMEOUT : _d,\n    _e = _a.classNames,\n    classNames = _e === void 0 ? DEFAULT_OVERLAY_CLASSNAMES : _e,\n    children = _a.children,\n    _f = _a.temporary,\n    temporary = _f === void 0 ? true : _f,\n    onRequestClose = _a.onRequestClose,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    portal = _a.portal,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    _g = _a.tabIndex,\n    tabIndex = _g === void 0 ? -1 : _g,\n    onClick = _a.onClick,\n    props = __rest(_a, [\"className\", \"visible\", \"hidden\", \"clickable\", \"timeout\", \"classNames\", \"children\", \"temporary\", \"onRequestClose\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"portal\", \"portalInto\", \"portalIntoId\", \"tabIndex\", \"onClick\"]);\n  return _jsx(ConditionalPortal, __assign({\n    portal: portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: _jsx(CSSTransition, __assign({\n      appear: true,\n      nodeRef: nodeRef,\n      transitionIn: visible,\n      classNames: hidden ? \"\" : classNames,\n      timeout: hidden ? 0 : timeout,\n      temporary: temporary,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    }, {\n      children: _jsx(\"span\", __assign({}, props, {\n        className: cn(block({\n          visible: visible,\n          clickable: clickable\n        }), className),\n        onClick: function (event) {\n          onClick === null || onClick === void 0 ? void 0 : onClick(event);\n          if (event.isPropagationStopped()) {\n            return;\n          }\n          onRequestClose();\n        },\n        tabIndex: tabIndex\n      }, {\n        children: children\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,iBAAiB,QAAQ,kBAAkB;AAEpD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SACEC,uBAAuB,EACvBC,0BAA0B,QACrB,aAAa;AAmCpB,IAAMC,KAAK,GAAGH,GAAG,CAAC,aAAa,CAAC;AAEhC;;;;;;AAMA,OAAO,IAAMI,OAAO,GAAGR,UAAU,CAC/B,SAASQ,OAAO,CACdC,EAsBC,EACDC,OAAO;EAtBL,aAAS;IACTC,OAAO;IACPC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACdC,iBAAgB;IAAhBC,SAAS,mBAAG,IAAI;IAChBC,eAAiC;IAAjCC,OAAO,mBAAGZ,uBAAuB;IACjCa,kBAAuC;IAAvCC,UAAU,mBAAGb,0BAA0B;IACvCc,QAAQ;IACRC,iBAAgB;IAAhBC,SAAS,mBAAG,IAAI;IAChBC,cAAc;IACdC,OAAO;IACPC,UAAU;IACVC,SAAS;IACTC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,MAAM;IACNC,UAAU;IACVC,YAAY;IACZC,gBAAa;IAAbC,QAAQ,mBAAG,CAAC,CAAC;IACbC,OAAO;IACJC,KAAK,cArBV,2PAsBC,CADS;EAIV,OACEC,KAACnC,iBAAiB;IAChB4B,MAAM,EAAEA,MAAM;IACdC,UAAU,EAAEA,UAAU;IACtBC,YAAY,EAAEA;EAAY;IAAAZ,UAE1BiB,KAAClC,aAAa;MACZmC,MAAM;MACN5B,OAAO,EAAEA,OAAO;MAChB6B,YAAY,EAAE5B,OAAO;MACrBQ,UAAU,EAAEN,MAAM,GAAG,EAAE,GAAGM,UAAU;MACpCF,OAAO,EAAEJ,MAAM,GAAG,CAAC,GAAGI,OAAO;MAC7BK,SAAS,EAAEA,SAAS;MACpBE,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAEA,UAAU;MACtBC,SAAS,EAAEA,SAAS;MACpBC,MAAM,EAAEA,MAAM;MACdC,SAAS,EAAEA,SAAS;MACpBC,QAAQ,EAAEA;IAAQ;MAAAT,UAElBiB,0BACMD,KAAK;QACTI,SAAS,EAAEvC,EAAE,CACXM,KAAK,CAAC;UACJI,OAAO;UACPI,SAAS;SACV,CAAC,EACFyB,SAAS,CACV;QACDL,OAAO,EAAE,UAACM,KAAK;UACbN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGM,KAAK,CAAC;UAChB,IAAIA,KAAK,CAACC,oBAAoB,EAAE,EAAE;YAChC;;UAGFnB,cAAc,EAAE;QAClB,CAAC;QACDW,QAAQ,EAAEA;MAAQ;QAAAd,UAEjBA;MAAQ;IACJ;EACO,GACE;AAExB,CAAC,CACF","names":["forwardRef","cn","ConditionalPortal","CSSTransition","bem","DEFAULT_OVERLAY_TIMEOUT","DEFAULT_OVERLAY_CLASSNAMES","block","Overlay","_a","nodeRef","visible","_b","hidden","_c","clickable","_d","timeout","_e","classNames","children","_f","temporary","onRequestClose","onEnter","onEntering","onEntered","onExit","onExiting","onExited","portal","portalInto","portalIntoId","_g","tabIndex","onClick","props","_jsx","appear","transitionIn","className","event","isPropagationStopped"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/overlay/src/Overlay.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */\nimport type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type { CSSTransitionComponentProps } from \"@react-md/transition\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_OVERLAY_TIMEOUT,\n  DEFAULT_OVERLAY_CLASSNAMES,\n} from \"./constants\";\n\nexport interface OverlayProps\n  extends HTMLAttributes<HTMLSpanElement>,\n    CSSTransitionComponentProps,\n    RenderConditionalPortalProps {\n  /**\n   * Boolean if the overlay is currently visible. When this prop changes, the\n   * overlay will enter/exit with an opacity transition.\n   */\n  visible: boolean;\n\n  /**\n   * A function that should change the `visible` prop to `false`. This is used\n   * so that clicking the overlay can hide the overlay.\n   */\n  onRequestClose(): void;\n\n  /**\n   * Boolean if the overlay should still be \"hidden\" from the user while\n   * visible. This will just make it so the opacity stays at 0. This is really\n   * just helpful if you'd like to create a simple close on outside click\n   * feature since you can hook into the `onRequestClose` prop since the overlay\n   * will be clicked.\n   */\n  hidden?: boolean;\n\n  /**\n   * Boolean if the overlay should gain the pointer cursor while it's visible.\n   * You normally want this enabled by default except when used as a modal's\n   * overlay.\n   */\n  clickable?: boolean;\n}\n\nconst block = bem(\"rmd-overlay\");\n\n/**\n * The `Overlay` component is a simple component used to render a full page\n * overlay in the page with an enter and exit animation. If there are overflow\n * issues or you need to portal the overlay to a different area within your app,\n * you should use the `OverlayPortal` component instead.\n */\nexport const Overlay = forwardRef<HTMLDivElement, OverlayProps>(\n  function Overlay(\n    {\n      className,\n      visible,\n      hidden = false,\n      clickable = true,\n      timeout = DEFAULT_OVERLAY_TIMEOUT,\n      classNames = DEFAULT_OVERLAY_CLASSNAMES,\n      children,\n      temporary = true,\n      onRequestClose,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      portal,\n      portalInto,\n      portalIntoId,\n      tabIndex = -1,\n      onClick,\n      ...props\n    },\n    nodeRef\n  ) {\n    return (\n      <ConditionalPortal\n        portal={portal}\n        portalInto={portalInto}\n        portalIntoId={portalIntoId}\n      >\n        <CSSTransition\n          appear\n          nodeRef={nodeRef}\n          transitionIn={visible}\n          classNames={hidden ? \"\" : classNames}\n          timeout={hidden ? 0 : timeout}\n          temporary={temporary}\n          onEnter={onEnter}\n          onEntering={onEntering}\n          onEntered={onEntered}\n          onExit={onExit}\n          onExiting={onExiting}\n          onExited={onExited}\n        >\n          <span\n            {...props}\n            className={cn(\n              block({\n                visible,\n                clickable,\n              }),\n              className\n            )}\n            onClick={(event) => {\n              onClick?.(event);\n              if (event.isPropagationStopped()) {\n                return;\n              }\n\n              onRequestClose();\n            }}\n            tabIndex={tabIndex}\n          >\n            {children}\n          </span>\n        </CSSTransition>\n      </ConditionalPortal>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}