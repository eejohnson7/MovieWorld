{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\nimport { useDir, useIsomorphicLayoutEffect, useKeyboardFocusContext, useResizeObserver } from \"@react-md/utils\";\nimport { useTabs } from \"./TabsManager\";\nvar TAB_WIDTH_VAR = \"--rmd-tab-width\";\nvar TAB_OFFSET_VAR = \"--rmd-tab-offset\";\nexport function useTabIndicatorStyles(options) {\n  var ref = options.ref,\n    activeIndex = options.activeIndex;\n  var isRTL = useDir().dir === \"rtl\";\n  var tabs = useTabs().tabs;\n  var watching = useKeyboardFocusContext().watching;\n  var _a = __read(useState(function () {\n      var _a;\n      var tabWidth = \"\".concat(100 / tabs.length, \"%\");\n      return _a = {}, _a[TAB_WIDTH_VAR] = tabWidth, _a[TAB_OFFSET_VAR] = \"calc(\".concat(activeIndex, \" * \").concat(tabWidth, \")\"), _a;\n    }), 2),\n    indicatorStyles = _a[0],\n    setIndicatorStyles = _a[1];\n  var updateIndicatorStyles = useCallback(function () {\n    var _a;\n    var _b;\n    // this is kind of hacky -- the styles should update when switching between\n    // RTL, but the RTL state isn't required for any styles. Just reference it\n    // so that the hooks eslint rule doesn't show a warning...\n    isRTL;\n    var current = (_b = watching.current[activeIndex]) === null || _b === void 0 ? void 0 : _b.element;\n    if (!current) {\n      return;\n    }\n    var cssVars = (_a = {}, _a[TAB_WIDTH_VAR] = \"\".concat(current.offsetWidth, \"px\"), _a[TAB_OFFSET_VAR] = \"\".concat(current.offsetLeft, \"px\"), _a);\n    setIndicatorStyles(function (prevStyles) {\n      if (prevStyles[TAB_WIDTH_VAR] === cssVars[TAB_WIDTH_VAR] && prevStyles[TAB_OFFSET_VAR] === cssVars[TAB_OFFSET_VAR]) {\n        return prevStyles;\n      }\n      return cssVars;\n    });\n  }, [activeIndex, watching, isRTL]);\n  var _b = __read(useResizeObserver(updateIndicatorStyles, {\n      ref: ref\n    }), 2),\n    nodeRef = _b[0],\n    refCallback = _b[1];\n  useIsomorphicLayoutEffect(function () {\n    var _a;\n    var activeTab = (_a = watching.current[activeIndex]) === null || _a === void 0 ? void 0 : _a.element;\n    var container = nodeRef.current;\n    if (!activeTab || !container) {\n      return;\n    }\n    // NOTE: This should probably be moved into the `scrollIntoView` util\n    // whenever I do another major version update. This is the same code, just\n    // using horizontal properties\n    var offsetLeft = activeTab.offsetLeft;\n    var scrollLeft = container.scrollLeft;\n    var tabRight = offsetLeft + activeTab.offsetWidth;\n    var containerRight = container.offsetWidth + scrollLeft;\n    if (tabRight > containerRight) {\n      container.scrollLeft = tabRight - container.offsetWidth;\n    } else if (offsetLeft < scrollLeft) {\n      container.scrollLeft = offsetLeft;\n    }\n  }, [activeIndex, isRTL, nodeRef, watching]);\n  return {\n    refCallback: refCallback,\n    indicatorStyles: indicatorStyles\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SACEC,MAAM,EACNC,yBAAyB,EACzBC,uBAAuB,EACvBC,iBAAiB,QACZ,iBAAiB;AAExB,SAASC,OAAO,QAAQ,eAAe;AAEvC,IAAMC,aAAa,GAAG,iBAAiB;AACvC,IAAMC,cAAc,GAAG,kBAAkB;AAgBzC,OAAM,SAAUC,qBAAqB,CACnCC,OAAsC;EAE9B,OAAG,GAAkBA,OAAO,IAAzB;IAAEC,WAAW,GAAKD,OAAO,YAAZ;EAExB,IAAME,KAAK,GAAGV,MAAM,EAAE,CAACW,GAAG,KAAK,KAAK;EAC5B,QAAI,GAAKP,OAAO,EAAE,KAAd;EACJ,YAAQ,GAAKF,uBAAuB,EAAE,SAA9B;EACV,gBAAwCH,QAAQ,CACpD;;MACE,IAAMa,QAAQ,GAAG,UAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,MAAG;MACxC,gBACEC,GAACV,aAAa,IAAGO,QAAQ,EACzBG,GAACT,cAAc,IAAG,eAAQG,WAAW,gBAAMG,QAAQ,MAAG;IAE1D,CAAC,CACF;IARMI,eAAe;IAAEC,kBAAkB,QAQzC;EACD,IAAMC,qBAAqB,GAAGpB,WAAW,CAAC;;;IACxC;IACA;IACA;IACAY,KAAK;IAEL,IAAMS,OAAO,GAAG,cAAQ,CAACA,OAAO,CAACV,WAAW,CAAC,0CAAEW,OAAO;IACtD,IAAI,CAACD,OAAO,EAAE;MACZ;;IAGF,IAAME,OAAO,aACXN,GAACV,aAAa,IAAG,UAAGc,OAAO,CAACG,WAAW,OAAI,EAC3CP,GAACT,cAAc,IAAG,UAAGa,OAAO,CAACI,UAAU,OAAI,KAC5C;IACDN,kBAAkB,CAAC,UAACO,UAAU;MAC5B,IACEA,UAAU,CAACnB,aAAa,CAAC,KAAKgB,OAAO,CAAChB,aAAa,CAAC,IACpDmB,UAAU,CAAClB,cAAc,CAAC,KAAKe,OAAO,CAACf,cAAc,CAAC,EACtD;QACA,OAAOkB,UAAU;;MAGnB,OAAOH,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACZ,WAAW,EAAEgB,QAAQ,EAAEf,KAAK,CAAC,CAAC;EAC5B,gBAAyBP,iBAAiB,CAACe,qBAAqB,EAAE;MACtEQ,GAAG;KACJ,CAAC;IAFKC,OAAO;IAAEC,WAAW,QAEzB;EAEF3B,yBAAyB,CAAC;;IACxB,IAAM4B,SAAS,GAAG,cAAQ,CAACV,OAAO,CAACV,WAAW,CAAC,0CAAEW,OAAO;IACxD,IAAMU,SAAS,GAAGH,OAAO,CAACR,OAAO;IACjC,IAAI,CAACU,SAAS,IAAI,CAACC,SAAS,EAAE;MAC5B;;IAGF;IACA;IACA;IACQ,cAAU,GAAKD,SAAS,WAAd;IACV,cAAU,GAAKC,SAAS,WAAd;IAClB,IAAMC,QAAQ,GAAGR,UAAU,GAAGM,SAAS,CAACP,WAAW;IACnD,IAAMU,cAAc,GAAGF,SAAS,CAACR,WAAW,GAAGW,UAAU;IACzD,IAAIF,QAAQ,GAAGC,cAAc,EAAE;MAC7BF,SAAS,CAACG,UAAU,GAAGF,QAAQ,GAAGD,SAAS,CAACR,WAAW;KACxD,MAAM,IAAIC,UAAU,GAAGU,UAAU,EAAE;MAClCH,SAAS,CAACG,UAAU,GAAGV,UAAU;;EAErC,CAAC,EAAE,CAACd,WAAW,EAAEC,KAAK,EAAEiB,OAAO,EAAEF,QAAQ,CAAC,CAAC;EAE3C,OAAO;IACLG,WAAW;IACXZ,eAAe;GAChB;AACH","names":["useCallback","useState","useDir","useIsomorphicLayoutEffect","useKeyboardFocusContext","useResizeObserver","useTabs","TAB_WIDTH_VAR","TAB_OFFSET_VAR","useTabIndicatorStyles","options","activeIndex","isRTL","dir","tabWidth","tabs","length","_a","indicatorStyles","setIndicatorStyles","updateIndicatorStyles","current","element","cssVars","offsetWidth","offsetLeft","prevStyles","watching","ref","nodeRef","refCallback","activeTab","container","tabRight","containerRight","scrollLeft"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tabs/src/useTabIndicatorStyles.ts"],"sourcesContent":["import type { Ref, RefCallback } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport {\n  useDir,\n  useIsomorphicLayoutEffect,\n  useKeyboardFocusContext,\n  useResizeObserver,\n} from \"@react-md/utils\";\n\nimport { useTabs } from \"./TabsManager\";\n\nconst TAB_WIDTH_VAR = \"--rmd-tab-width\";\nconst TAB_OFFSET_VAR = \"--rmd-tab-offset\";\n\ntype TabWidthVar = typeof TAB_WIDTH_VAR;\ntype TabOffsetVar = typeof TAB_OFFSET_VAR;\ntype IndicatorStyles = Record<TabWidthVar | TabOffsetVar, string>;\n\nexport interface TabIndicatorStylesHookOptions {\n  ref?: Ref<HTMLDivElement>;\n  activeIndex: number;\n}\n\nexport interface TabIndicatorStylesHookReturnValue {\n  refCallback: RefCallback<HTMLDivElement>;\n  indicatorStyles: IndicatorStyles;\n}\n\nexport function useTabIndicatorStyles(\n  options: TabIndicatorStylesHookOptions\n): TabIndicatorStylesHookReturnValue {\n  const { ref, activeIndex } = options;\n\n  const isRTL = useDir().dir === \"rtl\";\n  const { tabs } = useTabs();\n  const { watching } = useKeyboardFocusContext();\n  const [indicatorStyles, setIndicatorStyles] = useState<IndicatorStyles>(\n    () => {\n      const tabWidth = `${100 / tabs.length}%`;\n      return {\n        [TAB_WIDTH_VAR]: tabWidth,\n        [TAB_OFFSET_VAR]: `calc(${activeIndex} * ${tabWidth})`,\n      };\n    }\n  );\n  const updateIndicatorStyles = useCallback(() => {\n    // this is kind of hacky -- the styles should update when switching between\n    // RTL, but the RTL state isn't required for any styles. Just reference it\n    // so that the hooks eslint rule doesn't show a warning...\n    isRTL;\n\n    const current = watching.current[activeIndex]?.element;\n    if (!current) {\n      return;\n    }\n\n    const cssVars: IndicatorStyles = {\n      [TAB_WIDTH_VAR]: `${current.offsetWidth}px`,\n      [TAB_OFFSET_VAR]: `${current.offsetLeft}px`,\n    };\n    setIndicatorStyles((prevStyles) => {\n      if (\n        prevStyles[TAB_WIDTH_VAR] === cssVars[TAB_WIDTH_VAR] &&\n        prevStyles[TAB_OFFSET_VAR] === cssVars[TAB_OFFSET_VAR]\n      ) {\n        return prevStyles;\n      }\n\n      return cssVars;\n    });\n  }, [activeIndex, watching, isRTL]);\n  const [nodeRef, refCallback] = useResizeObserver(updateIndicatorStyles, {\n    ref,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    const activeTab = watching.current[activeIndex]?.element;\n    const container = nodeRef.current;\n    if (!activeTab || !container) {\n      return;\n    }\n\n    // NOTE: This should probably be moved into the `scrollIntoView` util\n    // whenever I do another major version update. This is the same code, just\n    // using horizontal properties\n    const { offsetLeft } = activeTab;\n    const { scrollLeft } = container;\n    const tabRight = offsetLeft + activeTab.offsetWidth;\n    const containerRight = container.offsetWidth + scrollLeft;\n    if (tabRight > containerRight) {\n      container.scrollLeft = tabRight - container.offsetWidth;\n    } else if (offsetLeft < scrollLeft) {\n      container.scrollLeft = offsetLeft;\n    }\n  }, [activeIndex, isRTL, nodeRef, watching]);\n\n  return {\n    refCallback,\n    indicatorStyles,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}