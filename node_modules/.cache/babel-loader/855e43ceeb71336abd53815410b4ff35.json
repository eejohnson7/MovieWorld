{"ast":null,"code":"import cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-button\");\n/**\n * Creates a button theme based on the button theming props. This is really just\n * used so that other elements like clickable `<div>`s or `<input type=\"file\">`\n * can look like buttons.\n *\n * @param props - An object containing the themeable button props to generate a\n * button theme className.\n * @returns a string of class names to create an element with a button theme.\n */\nexport function buttonThemeClassNames(_a) {\n  var _b;\n  var _c = _a.theme,\n    propTheme = _c === void 0 ? \"clear\" : _c,\n    _d = _a.themeType,\n    themeType = _d === void 0 ? \"flat\" : _d,\n    _e = _a.buttonType,\n    buttonType = _e === void 0 ? \"text\" : _e,\n    _f = _a.disabled,\n    propDisabled = _f === void 0 ? false : _f,\n    className = _a.className;\n  var theme = propTheme === \"disabled\" ? \"clear\" : propTheme;\n  var disabled = propDisabled || propTheme === \"disabled\";\n  var text = buttonType === \"text\";\n  var icon = buttonType === \"icon\";\n  var outline = themeType === \"outline\";\n  var contained = themeType === \"contained\";\n  var clear = theme === \"clear\";\n  return cn(block((_b = {\n    text: text,\n    icon: icon,\n    disabled: disabled,\n    contained: !disabled && contained,\n    outline: outline\n  }, _b[theme] = !disabled && !clear && contained, _b[\"text-\".concat(theme)] = !disabled && !clear && !contained, _b[\"outline-\".concat(theme)] = !disabled && !clear && outline, _b)), className);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAqErC,IAAMC,KAAK,GAAGD,GAAG,CAAC,YAAY,CAAC;AAE/B;;;;;;;;;AASA,OAAM,SAAUE,qBAAqB,CAACC,EAMnB;;MALjBC,aAA0B;IAAnBC,SAAS,mBAAG,OAAO;IAC1BC,iBAAkB;IAAlBC,SAAS,mBAAG,MAAM;IAClBC,kBAAmB;IAAnBC,UAAU,mBAAG,MAAM;IACnBC,gBAA8B;IAApBC,YAAY,mBAAG,KAAK;IAC9BC,SAAS;EAET,IAAMC,KAAK,GAAGR,SAAS,KAAK,UAAU,GAAG,OAAO,GAAGA,SAAS;EAC5D,IAAMS,QAAQ,GAAGH,YAAY,IAAIN,SAAS,KAAK,UAAU;EACzD,IAAMU,IAAI,GAAGN,UAAU,KAAK,MAAM;EAClC,IAAMO,IAAI,GAAGP,UAAU,KAAK,MAAM;EAClC,IAAMQ,OAAO,GAAGV,SAAS,KAAK,SAAS;EACvC,IAAMW,SAAS,GAAGX,SAAS,KAAK,WAAW;EAC3C,IAAMY,KAAK,GAAGN,KAAK,KAAK,OAAO;EAE/B,OAAOd,EAAE,CACPE,KAAK;IACHc,IAAI;IACJC,IAAI;IACJF,QAAQ;IACRI,SAAS,EAAE,CAACJ,QAAQ,IAAII,SAAS;IACjCD,OAAO;KACPG,GAACP,KAAK,IAAG,CAACC,QAAQ,IAAI,CAACK,KAAK,IAAID,SAAS,EACzCE,GAAC,eAAQP,KAAK,CAAE,IAAG,CAACC,QAAQ,IAAI,CAACK,KAAK,IAAI,CAACD,SAAS,EACpDE,GAAC,kBAAWP,KAAK,CAAE,IAAG,CAACC,QAAQ,IAAI,CAACK,KAAK,IAAIF,OAAO,MACpD,EACFL,SAAS,CACV;AACH","names":["cn","bem","block","buttonThemeClassNames","_a","_c","propTheme","_d","themeType","_e","buttonType","_f","propDisabled","className","theme","disabled","text","icon","outline","contained","clear","_b"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/button/src/buttonThemeClassNames.ts"],"sourcesContent":["import cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\n/**\n * One of the valid button types that can be used\n */\nexport type ButtonType = \"text\" | \"icon\";\n\n/**\n * One of the valid material design default button themes that can be used. This\n * will update the general look and feel by updating the colors within the\n * button while the `ButtonThemeType` will update the borders or box shadow.\n */\nexport type ButtonTheme =\n  | \"clear\"\n  | \"primary\"\n  | \"secondary\"\n  | \"warning\"\n  | \"error\"\n  | \"disabled\";\n\n/**\n * One of the valid material design \"themed\" button types that can be used. This\n * will update the general look and feel by adding borders or box shadow to the\n * button while the `ButtonTheme` will update the colors.\n */\nexport type ButtonThemeType = \"flat\" | \"outline\" | \"contained\";\n\n/**\n * This is an interface of all the button's customizable theme props. This is\n * mainly used if you want to add a button theme to another component and have\n * it configurable via props.\n */\nexport interface ButtonThemeProps {\n  /**\n   * An optional className to also apply to the button for additional theming\n   * and styling. This will be merged with the `Button.theme` class name styles.\n   */\n  className?: string;\n\n  /**\n   * Enabling this prop will apply the disabled styles to a `Button`. When this\n   * is also applied to the button component, the button will be updated so that\n   * it can no longer be interacted with.\n   */\n  disabled?: boolean;\n\n  /**\n   * This is the specific material design button type to use. This can either be\n   * set to \"text\" or \"icon\". When this is set to \"text\", the styles applied\n   * will make buttons with just text or text with icons render nicely. When\n   * this is set to \"icon\", the styles applied will make icon only buttons\n   * render nicely.\n   */\n  buttonType?: ButtonType;\n\n  /**\n   * The material design theme to apply to the button. The theme prop will\n   * update the look and feel of the button by applying different background\n   * and/or foreground colors.\n   */\n  theme?: ButtonTheme;\n\n  /**\n   * The material design theme type to apply. The themeTYpe prop will update the\n   * look and feel of the button by applying different border or box shadow.\n   */\n  themeType?: ButtonThemeType;\n}\n\nconst block = bem(\"rmd-button\");\n\n/**\n * Creates a button theme based on the button theming props. This is really just\n * used so that other elements like clickable `<div>`s or `<input type=\"file\">`\n * can look like buttons.\n *\n * @param props - An object containing the themeable button props to generate a\n * button theme className.\n * @returns a string of class names to create an element with a button theme.\n */\nexport function buttonThemeClassNames({\n  theme: propTheme = \"clear\",\n  themeType = \"flat\",\n  buttonType = \"text\",\n  disabled: propDisabled = false,\n  className,\n}: ButtonThemeProps): string {\n  const theme = propTheme === \"disabled\" ? \"clear\" : propTheme;\n  const disabled = propDisabled || propTheme === \"disabled\";\n  const text = buttonType === \"text\";\n  const icon = buttonType === \"icon\";\n  const outline = themeType === \"outline\";\n  const contained = themeType === \"contained\";\n  const clear = theme === \"clear\";\n\n  return cn(\n    block({\n      text,\n      icon,\n      disabled,\n      contained: !disabled && contained,\n      outline,\n      [theme]: !disabled && !clear && contained,\n      [`text-${theme}`]: !disabled && !clear && !contained,\n      [`outline-${theme}`]: !disabled && !clear && outline,\n    }),\n    className\n  );\n}\n"]},"metadata":{},"sourceType":"module"}