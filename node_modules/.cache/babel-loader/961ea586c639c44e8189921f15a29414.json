{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport { DEFAULT_HOVER_MODE_DEACTIVATION_TIME, DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\nimport { HoverModeContextProvider } from \"./useHoverModeContext\";\n/**\n * This component should normally be mounted near the root of your app to enable\n * hover mode for child components. However, it can also be used at other levels\n * if hover mode functionality should not carry over between two different parts\n * of the screen.\n *\n * @example\n * Separating Hover Mode\n * ```tsx\n * export default function Example(): ReactElement {\n *   return (\n *     <>\n *       <HoverModeProvider>\n *         <HeaderActions />\n *       </HoverModeProvider>\n *       <HoverModeProvider>\n *         <MainContent />\n *       </HoverModeProvider>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n */\nexport function HoverModeProvider(_a) {\n  var children = _a.children,\n    _b = _a.disabled,\n    disabled = _b === void 0 ? false : _b,\n    _c = _a.defaultVisibleInTime,\n    defaultVisibleInTime = _c === void 0 ? DEFAULT_HOVER_MODE_VISIBLE_IN_TIME : _c,\n    _d = _a.deactivateTime,\n    deactivateTime = _d === void 0 ? DEFAULT_HOVER_MODE_DEACTIVATION_TIME : _d;\n  var _e = __read(useState(defaultVisibleInTime), 2),\n    visibleInTime = _e[0],\n    setVisibleInTime = _e[1];\n  var timeoutRef = useRef();\n  var enableHoverMode = useCallback(function () {\n    if (disabled) {\n      return;\n    }\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(0);\n  }, [disabled]);\n  var disableHoverMode = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(defaultVisibleInTime);\n  }, [defaultVisibleInTime]);\n  var startDisableTimer = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(function () {\n      setVisibleInTime(defaultVisibleInTime);\n    }, deactivateTime);\n  }, [defaultVisibleInTime, deactivateTime]);\n  useEffect(function () {\n    if (disabled) {\n      window.clearTimeout(timeoutRef.current);\n      setVisibleInTime(defaultVisibleInTime);\n    }\n  }, [disabled, defaultVisibleInTime]);\n  useOnUnmount(function () {\n    window.clearTimeout(timeoutRef.current);\n  });\n  var context = useMemo(function () {\n    return {\n      visibleInTime: visibleInTime,\n      enableHoverMode: enableHoverMode,\n      disableHoverMode: disableHoverMode,\n      startDisableTimer: startDisableTimer\n    };\n  }, [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]);\n  return _jsx(HoverModeContextProvider, __assign({\n    value: context\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEzE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SACEC,oCAAoC,EACpCC,kCAAkC,QAC7B,aAAa;AAEpB,SAASC,wBAAwB,QAAQ,uBAAuB;AAiChE;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUC,iBAAiB,CAACC,EAKT;MAJvBC,QAAQ;IACRC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,4BAAyD;IAAzDC,oBAAoB,mBAAGR,kCAAkC;IACzDS,sBAAqD;IAArDC,cAAc,mBAAGX,oCAAoC;EAE/C,gBAAoCF,QAAQ,CAACW,oBAAoB,CAAC;IAAjEG,aAAa;IAAEC,gBAAgB,QAAkC;EACxE,IAAMC,UAAU,GAAGjB,MAAM,EAAU;EACnC,IAAMkB,eAAe,GAAGrB,WAAW,CAAC;IAClC,IAAIa,QAAQ,EAAE;MACZ;;IAGFS,MAAM,CAACC,YAAY,CAACH,UAAU,CAACI,OAAO,CAAC;IACvCL,gBAAgB,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EACd,IAAMY,gBAAgB,GAAGzB,WAAW,CAAC;IACnCsB,MAAM,CAACC,YAAY,CAACH,UAAU,CAACI,OAAO,CAAC;IACvCL,gBAAgB,CAACJ,oBAAoB,CAAC;EACxC,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;EAE1B,IAAMW,iBAAiB,GAAG1B,WAAW,CAAC;IACpCsB,MAAM,CAACC,YAAY,CAACH,UAAU,CAACI,OAAO,CAAC;IACvCJ,UAAU,CAACI,OAAO,GAAGF,MAAM,CAACK,UAAU,CAAC;MACrCR,gBAAgB,CAACJ,oBAAoB,CAAC;IACxC,CAAC,EAAEE,cAAc,CAAC;EACpB,CAAC,EAAE,CAACF,oBAAoB,EAAEE,cAAc,CAAC,CAAC;EAE1ChB,SAAS,CAAC;IACR,IAAIY,QAAQ,EAAE;MACZS,MAAM,CAACC,YAAY,CAACH,UAAU,CAACI,OAAO,CAAC;MACvCL,gBAAgB,CAACJ,oBAAoB,CAAC;;EAE1C,CAAC,EAAE,CAACF,QAAQ,EAAEE,oBAAoB,CAAC,CAAC;EAEpCV,YAAY,CAAC;IACXiB,MAAM,CAACC,YAAY,CAACH,UAAU,CAACI,OAAO,CAAC;EACzC,CAAC,CAAC;EAEF,IAAMI,OAAO,GAAG1B,OAAO,CACrB;IAAM,OAAC;MACLgB,aAAa;MACbG,eAAe;MACfI,gBAAgB;MAChBC,iBAAiB;KAClB;EALK,CAKJ,EACF,CAACD,gBAAgB,EAAEJ,eAAe,EAAEK,iBAAiB,EAAER,aAAa,CAAC,CACtE;EAED,OACEW,KAACrB,wBAAwB;IAACsB,KAAK,EAAEF;EAAO;IAAAjB,UACrCA;EAAQ,GACgB;AAE/B","names":["useCallback","useEffect","useMemo","useRef","useState","useOnUnmount","DEFAULT_HOVER_MODE_DEACTIVATION_TIME","DEFAULT_HOVER_MODE_VISIBLE_IN_TIME","HoverModeContextProvider","HoverModeProvider","_a","children","_b","disabled","_c","defaultVisibleInTime","_d","deactivateTime","visibleInTime","setVisibleInTime","timeoutRef","enableHoverMode","window","clearTimeout","current","disableHoverMode","startDisableTimer","setTimeout","context","_jsx","value"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/hover/HoverModeProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport {\n  DEFAULT_HOVER_MODE_DEACTIVATION_TIME,\n  DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n} from \"./constants\";\nimport type { HoverModeContext } from \"./useHoverModeContext\";\nimport { HoverModeContextProvider } from \"./useHoverModeContext\";\n\n/** @remarks \\@since 2.8.0 */\nexport interface HoverModeConfiguration {\n  /**\n   * Boolean if the hover mode functionality should be disabled.\n   *\n   * @defaultValue `false`\n   */\n  disabled?: boolean;\n\n  /**\n   * The amount of time (in ms) the user must hover an element before the hover\n   * mode is enabled and the visibility is set to `true`.\n   *\n   * @defaultValue {@link DEFAULT_HOVER_MODE_VISIBLE_IN_TIME}\n   */\n  defaultVisibleInTime?: number;\n\n  /**\n   * The amount of time (in ms) the user must not hover any element connected to\n   * the hover mode.\n   *\n   * @defaultValue {@link DEFAULT_HOVER_MODE_DEACTIVATION_TIME}\n   */\n  deactivateTime?: number;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface HoverModeProviderProps extends HoverModeConfiguration {\n  children: ReactNode;\n}\n\n/**\n * This component should normally be mounted near the root of your app to enable\n * hover mode for child components. However, it can also be used at other levels\n * if hover mode functionality should not carry over between two different parts\n * of the screen.\n *\n * @example\n * Separating Hover Mode\n * ```tsx\n * export default function Example(): ReactElement {\n *   return (\n *     <>\n *       <HoverModeProvider>\n *         <HeaderActions />\n *       </HoverModeProvider>\n *       <HoverModeProvider>\n *         <MainContent />\n *       </HoverModeProvider>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n */\nexport function HoverModeProvider({\n  children,\n  disabled = false,\n  defaultVisibleInTime = DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n  deactivateTime = DEFAULT_HOVER_MODE_DEACTIVATION_TIME,\n}: HoverModeProviderProps): ReactElement {\n  const [visibleInTime, setVisibleInTime] = useState(defaultVisibleInTime);\n  const timeoutRef = useRef<number>();\n  const enableHoverMode = useCallback(() => {\n    if (disabled) {\n      return;\n    }\n\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(0);\n  }, [disabled]);\n  const disableHoverMode = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(defaultVisibleInTime);\n  }, [defaultVisibleInTime]);\n\n  const startDisableTimer = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      setVisibleInTime(defaultVisibleInTime);\n    }, deactivateTime);\n  }, [defaultVisibleInTime, deactivateTime]);\n\n  useEffect(() => {\n    if (disabled) {\n      window.clearTimeout(timeoutRef.current);\n      setVisibleInTime(defaultVisibleInTime);\n    }\n  }, [disabled, defaultVisibleInTime]);\n\n  useOnUnmount(() => {\n    window.clearTimeout(timeoutRef.current);\n  });\n\n  const context = useMemo<HoverModeContext>(\n    () => ({\n      visibleInTime,\n      enableHoverMode,\n      disableHoverMode,\n      startDisableTimer,\n    }),\n    [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]\n  );\n\n  return (\n    <HoverModeContextProvider value={context}>\n      {children}\n    </HoverModeContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}