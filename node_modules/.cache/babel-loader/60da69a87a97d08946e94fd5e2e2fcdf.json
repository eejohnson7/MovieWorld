{"ast":null,"code":"function modify(base, modifier) {\n  if (!modifier) {\n    return base;\n  }\n  var hasOwn = Object.prototype.hasOwnProperty;\n  return Object.keys(modifier).reduce(function (s, mod) {\n    if (hasOwn.call(modifier, mod) && modifier[mod]) {\n      s = \"\".concat(s, \" \").concat(base, \"--\").concat(mod);\n    }\n    return s;\n  }, base);\n}\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\nexport function bem(base) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!base) {\n      throw new Error(\"bem requires a base block class but none were provided.\");\n    }\n  }\n  /**\n   * Creates the full class name from the base block name. This can be called\n   * without any arguments which will just return the base block name (kind of\n   * worthless), or you can provide a child element name and modifiers.\n   *\n   * @param elementOrModifier - This is either the child element name or an\n   * object of modifiers to apply. This **must** be a string if the second\n   * argument is provided.\n   * @param modifier - Any optional modifiers to apply to the block and optional\n   * element.\n   * @returns the full class name\n   */\n  return function block(elementOrModifier, modifier) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof elementOrModifier !== \"string\" && modifier) {\n        throw new TypeError(\"bem does not support having two modifier arguments.\");\n      }\n    }\n    if (!elementOrModifier) {\n      return base;\n    }\n    if (typeof elementOrModifier !== \"string\") {\n      return modify(base, elementOrModifier);\n    }\n    return modify(\"\".concat(base, \"__\").concat(elementOrModifier), modifier);\n  };\n}","map":{"version":3,"mappings":"AAIA,SAASA,MAAM,CAACC,IAAY,EAAEC,QAAmB;EAC/C,IAAI,CAACA,QAAQ,EAAE;IACb,OAAOD,IAAI;;EAGb,IAAME,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,cAAc;EAC9C,OAAOF,MAAM,CAACG,IAAI,CAACL,QAAQ,CAAC,CAACM,MAAM,CAAC,UAACC,CAAC,EAAEC,GAAG;IACzC,IAAIP,MAAM,CAACQ,IAAI,CAACT,QAAQ,EAAEQ,GAAG,CAAC,IAAIR,QAAQ,CAACQ,GAAG,CAAC,EAAE;MAC/CD,CAAC,GAAG,UAAGA,CAAC,cAAIR,IAAI,eAAKS,GAAG,CAAE;;IAG5B,OAAOD,CAAC;EACV,CAAC,EAAER,IAAI,CAAC;AACV;AAOA;;;;;;;AAOA,OAAM,SAAUW,GAAG,CAACX,IAAW;EAC7B,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACd,IAAI,EAAE;MACT,MAAM,IAAIe,KAAK,CACb,yDAAyD,CAC1D;;;EAIL;;;;;;;;;;;;EAYA,OAAO,SAASC,KAAK,CACnBC,iBAAsC,EACtChB,QAAmB;IAEnB,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI,OAAOG,iBAAiB,KAAK,QAAQ,IAAIhB,QAAQ,EAAE;QACrD,MAAM,IAAIiB,SAAS,CACjB,qDAAqD,CACtD;;;IAIL,IAAI,CAACD,iBAAiB,EAAE;MACtB,OAAOjB,IAAI;;IAGb,IAAI,OAAOiB,iBAAiB,KAAK,QAAQ,EAAE;MACzC,OAAOlB,MAAM,CAACC,IAAI,EAAEiB,iBAAiB,CAAC;;IAGxC,OAAOlB,MAAM,CAAC,UAAGC,IAAI,eAAKiB,iBAAiB,CAAE,EAAEhB,QAAQ,CAAC;EAC1D,CAAC;AACH","names":["modify","base","modifier","hasOwn","Object","prototype","hasOwnProperty","keys","reduce","s","mod","call","bem","process","env","NODE_ENV","Error","block","elementOrModifier","TypeError"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/bem.ts"],"sourcesContent":["type Block = string;\ntype Element = string;\ntype Modifier = Record<string, unknown>;\n\nfunction modify(base: string, modifier?: Modifier): string {\n  if (!modifier) {\n    return base;\n  }\n\n  const hasOwn = Object.prototype.hasOwnProperty;\n  return Object.keys(modifier).reduce((s, mod) => {\n    if (hasOwn.call(modifier, mod) && modifier[mod]) {\n      s = `${s} ${base}--${mod}`;\n    }\n\n    return s;\n  }, base);\n}\n\ntype BEMResult = (\n  elementOrModifier?: Element | Modifier,\n  modifier?: Modifier\n) => string;\n\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\nexport function bem(base: Block): BEMResult {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!base) {\n      throw new Error(\n        \"bem requires a base block class but none were provided.\"\n      );\n    }\n  }\n\n  /**\n   * Creates the full class name from the base block name. This can be called\n   * without any arguments which will just return the base block name (kind of\n   * worthless), or you can provide a child element name and modifiers.\n   *\n   * @param elementOrModifier - This is either the child element name or an\n   * object of modifiers to apply. This **must** be a string if the second\n   * argument is provided.\n   * @param modifier - Any optional modifiers to apply to the block and optional\n   * element.\n   * @returns the full class name\n   */\n  return function block(\n    elementOrModifier?: Element | Modifier,\n    modifier?: Modifier\n  ): string {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof elementOrModifier !== \"string\" && modifier) {\n        throw new TypeError(\n          \"bem does not support having two modifier arguments.\"\n        );\n      }\n    }\n\n    if (!elementOrModifier) {\n      return base;\n    }\n\n    if (typeof elementOrModifier !== \"string\") {\n      return modify(base, elementOrModifier);\n    }\n\n    return modify(`${base}__${elementOrModifier}`, modifier);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}