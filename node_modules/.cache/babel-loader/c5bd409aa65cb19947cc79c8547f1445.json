{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\nexport function useInterval(callback, delay, defaultRunning) {\n  if (defaultRunning === void 0) {\n    defaultRunning = false;\n  }\n  var ref = useRefCache(callback);\n  var _a = __read(useToggle(defaultRunning), 3),\n    running = _a[0],\n    start = _a[1],\n    stop = _a[2];\n  useEffect(function () {\n    if (!running) {\n      return;\n    }\n    var interval = window.setInterval(function () {\n      ref.current(stop);\n    }, delay);\n    return function () {\n      window.clearInterval(interval);\n    };\n    // disabled since useRefCache for the callback\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, running, stop]);\n  return [running, start, stop];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,aAAa;AAOvC;;;;;;;;;;;AAWA,OAAM,SAAUC,WAAW,CACzBC,QAAoC,EACpCC,KAAa,EACbC,cAAsB;EAAtB;IAAAA,sBAAsB;EAAA;EAEtB,IAAMC,GAAG,GAAGN,WAAW,CAACG,QAAQ,CAAC;EAE3B,gBAAyBF,SAAS,CAACI,cAAc,CAAC;IAAjDE,OAAO;IAAEC,KAAK;IAAEC,IAAI,QAA6B;EAExDV,SAAS,CAAC;IACR,IAAI,CAACQ,OAAO,EAAE;MACZ;;IAGF,IAAMG,QAAQ,GAAGC,MAAM,CAACC,WAAW,CAAC;MAClCN,GAAG,CAACO,OAAO,CAACJ,IAAI,CAAC;IACnB,CAAC,EAAEL,KAAK,CAAC;IACT,OAAO;MACLO,MAAM,CAACG,aAAa,CAACJ,QAAQ,CAAC;IAChC,CAAC;IACD;IACA;EACF,CAAC,EAAE,CAACN,KAAK,EAAEG,OAAO,EAAEE,IAAI,CAAC,CAAC;EAE1B,OAAO,CAACF,OAAO,EAAEC,KAAK,EAAEC,IAAI,CAAC;AAC/B","names":["useEffect","useRefCache","useToggle","useInterval","callback","delay","defaultRunning","ref","running","start","stop","interval","window","setInterval","current","clearInterval"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/useInterval.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n\ntype Running = boolean;\ntype StartInterval = () => void;\ntype StopInterval = () => void;\ntype ReturnValue = [Running, StartInterval, StopInterval];\n\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\nexport function useInterval(\n  callback: (stop: () => void) => void,\n  delay: number,\n  defaultRunning = false\n): ReturnValue {\n  const ref = useRefCache(callback);\n\n  const [running, start, stop] = useToggle(defaultRunning);\n\n  useEffect(() => {\n    if (!running) {\n      return;\n    }\n\n    const interval = window.setInterval(() => {\n      ref.current(stop);\n    }, delay);\n    return () => {\n      window.clearInterval(interval);\n    };\n    // disabled since useRefCache for the callback\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, running, stop]);\n\n  return [running, start, stop];\n}\n"]},"metadata":{},"sourceType":"module"}