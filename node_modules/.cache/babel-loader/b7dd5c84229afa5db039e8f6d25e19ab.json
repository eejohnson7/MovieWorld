{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Children, cloneElement } from \"react\";\nimport { DEFAULT_TOOLTIP_DENSE_SPACING, DEFAULT_TOOLTIP_MARGIN, DEFAULT_TOOLTIP_POSITION, DEFAULT_TOOLTIP_SPACING, DEFAULT_TOOLTIP_THRESHOLD } from \"./constants\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useTooltip } from \"./useTooltip\";\nvar MERGABLE_PROPS = [\"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onTouchStart\", \"onFocus\", \"onKeyDown\", \"onContextMenu\"];\n/**\n * The `Tooltipped` component can be used to dynamically add a tooltip to child\n * element by cloning the required event handlers and accessibility props into\n * the child with `React.cloneChild`.\n *\n * Note: This component is _kind of_ deprecated in favor of using the\n * `useTooltip` hook and `Tooltip` component instead.\n *\n * @see {@link Tooltip} for an example\n */\nexport function Tooltipped(_a) {\n  var id = _a.id,\n    style = _a.style,\n    children = _a.children,\n    tooltipChildren = _a.tooltip,\n    _b = _a.dense,\n    dense = _b === void 0 ? false : _b,\n    _c = _a.vhMargin,\n    vhMargin = _c === void 0 ? DEFAULT_TOOLTIP_MARGIN : _c,\n    _d = _a.vwMargin,\n    vwMargin = _d === void 0 ? DEFAULT_TOOLTIP_MARGIN : _d,\n    _e = _a.spacing,\n    spacing = _e === void 0 ? DEFAULT_TOOLTIP_SPACING : _e,\n    _f = _a.denseSpacing,\n    denseSpacing = _f === void 0 ? DEFAULT_TOOLTIP_DENSE_SPACING : _f,\n    propPosition = _a.position,\n    _g = _a.threshold,\n    threshold = _g === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _g,\n    onClick = _a.onClick,\n    onMouseEnter = _a.onMouseEnter,\n    onMouseLeave = _a.onMouseLeave,\n    onTouchStart = _a.onTouchStart,\n    onContextMenu = _a.onContextMenu,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    onKeyDown = _a.onKeyDown,\n    describedBy = _a[\"aria-describedby\"],\n    _h = _a.defaultPosition,\n    defaultPosition = _h === void 0 ? DEFAULT_TOOLTIP_POSITION : _h,\n    _j = _a.temporary,\n    temporary = _j === void 0 ? true : _j,\n    disableSwapping = _a.disableSwapping,\n    disableHoverMode = _a.disableHoverMode,\n    _k = _a.disableAutoSpacing,\n    disableAutoSpacing = _k === void 0 ? process.env.NODE_ENV === \"test\" : _k,\n    props = __rest(_a, [\"id\", \"style\", \"children\", \"tooltip\", \"dense\", \"vhMargin\", \"vwMargin\", \"spacing\", \"denseSpacing\", \"position\", \"threshold\", \"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onTouchStart\", \"onContextMenu\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"aria-describedby\", \"defaultPosition\", \"temporary\", \"disableSwapping\", \"disableHoverMode\", \"disableAutoSpacing\"]);\n  var _l = useTooltip({\n      baseId: id,\n      style: style,\n      dense: dense,\n      spacing: spacing,\n      denseSpacing: denseSpacing,\n      vwMargin: vwMargin,\n      vhMargin: vhMargin,\n      position: propPosition,\n      defaultPosition: defaultPosition,\n      disableSwapping: disableSwapping,\n      disableHoverMode: disableHoverMode,\n      disableAutoSpacing: disableAutoSpacing,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onKeyDown: onKeyDown,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onTouchStart: onTouchStart,\n      onContextMenu: onContextMenu,\n      threshold: threshold\n    }),\n    elementProps = _l.elementProps,\n    tooltipProps = _l.tooltipProps;\n  if (!tooltipChildren) {\n    if (typeof children === \"function\") {\n      return children({\n        id: id,\n        tooltip: null,\n        \"aria-describedby\": describedBy\n      });\n    }\n    var child_1 = Children.only(children);\n    return cloneElement(child_1, {\n      id: id,\n      \"aria-describedby\": describedBy\n    });\n  }\n  var tooltip = _jsx(Tooltip, __assign({}, tooltipProps, props, {\n    temporary: temporary\n  }, {\n    children: tooltipChildren\n  }));\n  if (typeof children === \"function\") {\n    return children(__assign(__assign({}, elementProps), {\n      tooltip: tooltip\n    }));\n  }\n  var child = Children.only(children);\n  // TODO: remove this mess since you should provide handlers to the\n  // `Tooltipped` component instead of the child element.\n  /* istanbul ignore next */\n  var merged = MERGABLE_PROPS.reduce(function (result, propName) {\n    var propHandler = child.props[propName];\n    var configHandler = elementProps[propName];\n    if (!propHandler) {\n      result[propName] = configHandler;\n    } else if (!configHandler) {\n      result[propName] = propHandler;\n    } else {\n      // not sure of a way to actually strongly type this nicely.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      result[propName] = function (event) {\n        propHandler(event);\n        configHandler(event);\n      };\n    }\n    return result;\n  }, __assign({}, elementProps));\n  return _jsxs(_Fragment, {\n    children: [cloneElement(child, merged), tooltip]\n  });\n}","map":{"version":3,"mappings":"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","names":["Children","cloneElement","DEFAULT_TOOLTIP_DENSE_SPACING","DEFAULT_TOOLTIP_MARGIN","DEFAULT_TOOLTIP_POSITION","DEFAULT_TOOLTIP_SPACING","DEFAULT_TOOLTIP_THRESHOLD","Tooltip","useTooltip","MERGABLE_PROPS","Tooltipped","_a","style","children","tooltipChildren","_b","dense","_c","vhMargin","_d","vwMargin","_e","spacing","_f","denseSpacing","propPosition","_g","threshold","onClick","onMouseEnter","onMouseLeave","onTouchStart","onContextMenu","onBlur","onFocus","onKeyDown","describedBy","_h","defaultPosition","_j","temporary","disableSwapping","disableHoverMode","_k","disableAutoSpacing","process","env","NODE_ENV","props","baseId","id","position","elementProps","tooltipProps","tooltip","child_1","only","_jsx","child","merged","reduce","result","propName","propHandler","configHandler","event","_jsxs"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tooltip/src/Tooltipped.tsx"],"sourcesContent":["import type { CSSProperties, ReactElement, ReactNode } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\n\nimport {\n  DEFAULT_TOOLTIP_DENSE_SPACING,\n  DEFAULT_TOOLTIP_MARGIN,\n  DEFAULT_TOOLTIP_POSITION,\n  DEFAULT_TOOLTIP_SPACING,\n  DEFAULT_TOOLTIP_THRESHOLD,\n} from \"./constants\";\nimport type { TooltipProps } from \"./Tooltip\";\nimport { Tooltip } from \"./Tooltip\";\nimport type {\n  TooltippedElementEventHandlers,\n  BaseTooltipHookOptions,\n} from \"./useTooltip\";\nimport { useTooltip } from \"./useTooltip\";\n\ninterface TooltippedProvidedProps\n  extends TooltippedElementEventHandlers<HTMLElement> {\n  id: string;\n  \"aria-describedby\"?: string;\n  tooltip: ReactNode;\n}\n\nexport type ChildrenRenderer = (props: TooltippedProvidedProps) => ReactElement;\n\ntype R = Record<string, unknown>;\ntype ChildProps = Partial<Omit<TooltippedProvidedProps, \"tooltip\">>;\ntype ChildElement = ReactElement<ChildProps>;\n\nconst MERGABLE_PROPS: (keyof TooltippedElementEventHandlers<HTMLElement>)[] = [\n  \"onClick\",\n  \"onMouseEnter\",\n  \"onMouseLeave\",\n  \"onTouchStart\",\n  \"onFocus\",\n  \"onKeyDown\",\n  \"onContextMenu\",\n];\n\nexport interface TooltippedProps\n  extends RenderConditionalPortalProps,\n    BaseTooltipHookOptions<HTMLElement>,\n    Pick<TooltipProps, \"dense\" | \"lineWrap\" | \"temporary\"> {\n  /**\n   * The id for the element that has a tooltip. This is always required since it\n   * will be passed down to the `containerProps` in the children renderer\n   * function. It is also used to generate a `tooltipId` when there is a\n   * tooltip.\n   */\n  id: string;\n\n  /**\n   * The tooltip to display. When this is false-ish, the children renderer will\n   * always return `null` for the `tooltip` prop.\n   */\n  tooltip?: ReactNode;\n\n  /**\n   * An optional additional `aria-describedby` id or ids to merge with the\n   * tooltip id. This is really used for things like notifications or when\n   * multiple elements describe your tooltipped element.\n   */\n  \"aria-describedby\"?: string;\n\n  /**\n   * An optional style for the tooltip.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className for the tooltip\n   */\n  className?: string;\n\n  /**\n   * The children for this component should either be a function or a single\n   * element. When the children is a single React element, this component will\n   * clone in an `id`, `aria-describedby`, and all the event handlers required\n   * to show and hide a tooltip relative to that element. This means that you\n   * will need to ensure that the child component accepts and passes down the\n   * `on*` event handlers to a DOM node as well as the `id` and\n   * `aria-describedby` for accessibility. Every component within react-md\n   * should do this by default.\n   *\n   * If the children is a function, the `id`, `aria-describedby`, and event\n   * handlers will be provided as well as a new `tooltip` prop so that you have\n   * more control over rendering the tooltip.\n   *\n   * If the tooltip prop was not provided to this component, the\n   * `aria-describedby` and the event handlers will be omitted.\n   */\n  children: ChildElement | ChildrenRenderer;\n}\n\n/**\n * The `Tooltipped` component can be used to dynamically add a tooltip to child\n * element by cloning the required event handlers and accessibility props into\n * the child with `React.cloneChild`.\n *\n * Note: This component is _kind of_ deprecated in favor of using the\n * `useTooltip` hook and `Tooltip` component instead.\n *\n * @see {@link Tooltip} for an example\n */\nexport function Tooltipped({\n  id,\n  style,\n  children,\n  tooltip: tooltipChildren,\n  dense = false,\n  vhMargin = DEFAULT_TOOLTIP_MARGIN,\n  vwMargin = DEFAULT_TOOLTIP_MARGIN,\n  spacing = DEFAULT_TOOLTIP_SPACING,\n  denseSpacing = DEFAULT_TOOLTIP_DENSE_SPACING,\n  position: propPosition,\n  threshold = DEFAULT_TOOLTIP_THRESHOLD,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchStart,\n  onContextMenu,\n  onBlur,\n  onFocus,\n  onKeyDown,\n  \"aria-describedby\": describedBy,\n  defaultPosition = DEFAULT_TOOLTIP_POSITION,\n  temporary = true,\n  disableSwapping,\n  disableHoverMode,\n  disableAutoSpacing = process.env.NODE_ENV === \"test\",\n  ...props\n}: TooltippedProps): ReactElement {\n  const { elementProps, tooltipProps } = useTooltip({\n    baseId: id,\n    style,\n    dense,\n    spacing,\n    denseSpacing,\n    vwMargin,\n    vhMargin,\n    position: propPosition,\n    defaultPosition,\n    disableSwapping,\n    disableHoverMode,\n    disableAutoSpacing,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart,\n    onContextMenu,\n    threshold,\n  });\n\n  if (!tooltipChildren) {\n    if (typeof children === \"function\") {\n      return children({ id, tooltip: null, \"aria-describedby\": describedBy });\n    }\n\n    const child = Children.only(children);\n    return cloneElement(child, { id, \"aria-describedby\": describedBy });\n  }\n\n  const tooltip = (\n    <Tooltip {...tooltipProps} {...props} temporary={temporary}>\n      {tooltipChildren}\n    </Tooltip>\n  );\n\n  if (typeof children === \"function\") {\n    return children({ ...elementProps, tooltip });\n  }\n\n  const child = Children.only(children);\n  // TODO: remove this mess since you should provide handlers to the\n  // `Tooltipped` component instead of the child element.\n  /* istanbul ignore next */\n  const merged = MERGABLE_PROPS.reduce(\n    (result, propName) => {\n      const propHandler = child.props[propName];\n      const configHandler = elementProps[propName];\n      if (!propHandler) {\n        (result as R)[propName] = configHandler;\n      } else if (!configHandler) {\n        (result as R)[propName] = propHandler;\n      } else {\n        // not sure of a way to actually strongly type this nicely.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        result[propName] = (event: any) => {\n          propHandler(event);\n          configHandler(event);\n        };\n      }\n\n      return result;\n    },\n    { ...elementProps }\n  );\n\n  return (\n    <>\n      {cloneElement(child, merged)}\n      {tooltip}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}