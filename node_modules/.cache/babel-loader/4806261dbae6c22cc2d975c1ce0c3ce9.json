{"ast":null,"code":"import { findSizingContainer } from \"./positioning/findSizingContainer\";\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\nexport function scrollIntoView(container, element) {\n  element = findSizingContainer(element);\n  if (!container || !element) {\n    return;\n  }\n  var offsetTop = element.offsetTop;\n  if (element.offsetParent !== container) {\n    offsetTop -= container.offsetTop;\n  }\n  var elementBottom = offsetTop + element.offsetHeight;\n  var containerBottom = container.offsetHeight + container.scrollTop;\n  if (elementBottom > containerBottom) {\n    container.scrollTop = elementBottom - container.offsetHeight;\n  } else if (offsetTop < container.scrollTop) {\n    container.scrollTop = offsetTop;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mCAAmC;AAEvE;;;;;;;;;AASA,OAAM,SAAUC,cAAc,CAC5BC,SAA6B,EAC7BC,OAA2B;EAE3BA,OAAO,GAAGH,mBAAmB,CAACG,OAAO,CAAC;EACtC,IAAI,CAACD,SAAS,IAAI,CAACC,OAAO,EAAE;IAC1B;;EAGI,aAAS,GAAKA,OAAO,UAAZ;EACf,IAAIA,OAAO,CAACC,YAAY,KAAKF,SAAS,EAAE;IACtCG,SAAS,IAAIH,SAAS,CAACG,SAAS;;EAGlC,IAAMC,aAAa,GAAGD,SAAS,GAAGF,OAAO,CAACI,YAAY;EACtD,IAAMC,eAAe,GAAGN,SAAS,CAACK,YAAY,GAAGL,SAAS,CAACO,SAAS;EACpE,IAAIH,aAAa,GAAGE,eAAe,EAAE;IACnCN,SAAS,CAACO,SAAS,GAAGH,aAAa,GAAGJ,SAAS,CAACK,YAAY;GAC7D,MAAM,IAAIF,SAAS,GAAGH,SAAS,CAACO,SAAS,EAAE;IAC1CP,SAAS,CAACO,SAAS,GAAGJ,SAAS;;AAEnC","names":["findSizingContainer","scrollIntoView","container","element","offsetParent","offsetTop","elementBottom","offsetHeight","containerBottom","scrollTop"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/scrollIntoView.ts"],"sourcesContent":["import { findSizingContainer } from \"./positioning/findSizingContainer\";\n\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\nexport function scrollIntoView(\n  container: HTMLElement | null,\n  element: HTMLElement | null\n): void {\n  element = findSizingContainer(element);\n  if (!container || !element) {\n    return;\n  }\n\n  let { offsetTop } = element;\n  if (element.offsetParent !== container) {\n    offsetTop -= container.offsetTop;\n  }\n\n  const elementBottom = offsetTop + element.offsetHeight;\n  const containerBottom = container.offsetHeight + container.scrollTop;\n  if (elementBottom > containerBottom) {\n    container.scrollTop = elementBottom - container.offsetHeight;\n  } else if (offsetTop < container.scrollTop) {\n    container.scrollTop = offsetTop;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}