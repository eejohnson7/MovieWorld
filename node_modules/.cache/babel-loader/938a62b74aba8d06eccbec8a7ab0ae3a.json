{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-tree-item\");\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\nexport function TreeItemExpanderIcon(_a) {\n  var className = _a.className,\n    children = _a.children,\n    _b = _a.rotated,\n    rotated = _b === void 0 ? false : _b,\n    props = __rest(_a, [\"className\", \"children\", \"rotated\"]);\n  var icon = useIcon(\"expander\", children);\n  return _jsx(IconRotator, __assign({}, props, {\n    rotated: rotated,\n    className: cn(block(\"rotator-icon\"), className)\n  }, {\n    children: icon\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,OAAOA,EAAE,MAAM,YAAY;AAE3B,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AACrD,SAASC,GAAG,QAAQ,iBAAiB;AAMrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,eAAe,CAAC;AAElC;;;;AAIA,OAAM,SAAUE,oBAAoB,CAACC,EAKT;EAJ1B,aAAS;IACTC,QAAQ;IACRC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACZC,KAAK,cAJ2B,oCAKpC,CADS;EAER,IAAMC,IAAI,GAAGT,OAAO,CAAC,UAAU,EAAEK,QAAQ,CAAC;EAE1C,OACEK,KAACX,WAAW,eACNS,KAAK;IACTD,OAAO,EAAEA,OAAO;IAChBI,SAAS,EAAEb,EAAE,CAACI,KAAK,CAAC,cAAc,CAAC,EAAES,SAAS;EAAC;IAAAN,UAE9CI;EAAI,GACO;AAElB","names":["cn","IconRotator","useIcon","bem","block","TreeItemExpanderIcon","_a","children","_b","rotated","props","icon","_jsx","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tree/src/TreeItemExpanderIcon.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport type { IconRotatorBaseProps } from \"@react-md/icon\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface TreeItemExpanderIconProps extends IconRotatorBaseProps {\n  children?: ReactNode;\n}\n\nconst block = bem(\"rmd-tree-item\");\n\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\nexport function TreeItemExpanderIcon({\n  className,\n  children,\n  rotated = false,\n  ...props\n}: TreeItemExpanderIconProps): ReactElement {\n  const icon = useIcon(\"expander\", children);\n\n  return (\n    <IconRotator\n      {...props}\n      rotated={rotated}\n      className={cn(block(\"rotator-icon\"), className)}\n    >\n      {icon}\n    </IconRotator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}