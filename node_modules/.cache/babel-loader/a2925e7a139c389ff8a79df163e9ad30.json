{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n/**\n * This is a component implementation of the {@link useCSSTransition} hook that\n * implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\":\n * import { CSSTransition } from \"@react-md/transition\";\n *\n * // pretend global styles:\n * //\n * // .opacity--enter {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--enter-active {\n * //   opacity: 1;\n * // }\n * //\n * // .opacity--exit {\n * //   opacity: 1;\n * // }\n * //\n * // .opacity--exit-active {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <CSSTransition\n *         timeout={300}\n *         className=\"opacity\"\n *         temporary\n *         transitionIn={transitionIn}\n *       >\n *         <div>\n *           This is some content that will animate!\n *         </div>\n *       </CSSTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function CSSTransition(_a) {\n  var children = _a.children,\n    className = _a.className,\n    options = __rest(_a, [\"children\", \"className\"]);\n  var child = Children.only(children);\n  var _b = useCSSTransition(__assign(__assign({}, options), {\n      className: cn(child.props.className, className)\n    })),\n    elementProps = _b.elementProps,\n    rendered = _b.rendered;\n  if (!rendered) {\n    return null;\n  }\n  return cloneElement(children, elementProps);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,OAAO;AAC9C,OAAOC,EAAE,MAAM,YAAY;AAM3B,SAASC,gBAAgB,QAAQ,oBAAoB;AAWrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAM,SAAUC,aAAa,CAAwBC,EAI7B;EAHtB,YAAQ;IACRC,SAAS;IACNC,OAAO,cAHyC,yBAIpD,CADW;EAEV,IAAMC,KAAK,GAAGR,QAAQ,CAACS,IAAI,CAACC,QAAQ,CAAC;EAC/B,SAA6BP,gBAAgB,uBAC9CI,OAAO;MACVD,SAAS,EAAEJ,EAAE,CAACM,KAAK,CAACG,KAAK,CAACL,SAAS,EAAEA,SAAS;IAAC,GAC/C;IAHMM,YAAY;IAAEC,QAAQ,cAG5B;EAEF,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb,OAAOZ,YAAY,CAACS,QAAQ,EAAEE,YAAY,CAAC;AAC7C","names":["Children","cloneElement","cn","useCSSTransition","CSSTransition","_a","className","options","child","only","children","props","elementProps","rendered"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/CSSTransition.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\n\nimport type {\n  CSSTransitionComponentImplementation,\n  CSSTransitionHookOptions,\n} from \"./types\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionProps<E extends HTMLElement>\n  extends CSSTransitionHookOptions<E>,\n    CSSTransitionComponentImplementation<E> {}\n\n/**\n * This is a component implementation of the {@link useCSSTransition} hook that\n * implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\":\n * import { CSSTransition } from \"@react-md/transition\";\n *\n * // pretend global styles:\n * //\n * // .opacity--enter {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--enter-active {\n * //   opacity: 1;\n * // }\n * //\n * // .opacity--exit {\n * //   opacity: 1;\n * // }\n * //\n * // .opacity--exit-active {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <CSSTransition\n *         timeout={300}\n *         className=\"opacity\"\n *         temporary\n *         transitionIn={transitionIn}\n *       >\n *         <div>\n *           This is some content that will animate!\n *         </div>\n *       </CSSTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function CSSTransition<E extends HTMLElement>({\n  children,\n  className,\n  ...options\n}: CSSTransitionProps<E>): ReactElement | null {\n  const child = Children.only(children);\n  const { elementProps, rendered } = useCSSTransition({\n    ...options,\n    className: cn(child.props.className, className),\n  });\n\n  if (!rendered) {\n    return null;\n  }\n\n  return cloneElement(children, elementProps);\n}\n"]},"metadata":{},"sourceType":"module"}