{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\nexport function useRippleHandlers(_a) {\n  var create = _a.create,\n    release = _a.release,\n    cancel = _a.cancel,\n    _b = _a.handlers,\n    handlers = _b === void 0 ? {} : _b,\n    _c = _a.disabled,\n    propDisabled = _c === void 0 ? false : _c,\n    _d = _a.disableRipple,\n    disableRipple = _d === void 0 ? false : _d,\n    _e = _a.disableProgrammaticRipple,\n    disableProgrammaticRipple = _e === void 0 ? false : _e;\n  var disabled = propDisabled || disableRipple;\n  var ref = useRefCache(__assign(__assign({}, handlers), {\n    disableProgrammaticRipple: disableProgrammaticRipple\n  }));\n  // some OS/browser don't actually focus buttons/elements that are focusable after a click\n  // event which causes a double ripple effect. This ref is used to disable the programmatic\n  // ripple in these cases.\n  var disableProgrammatic = useRef(false);\n  var onKeyDown = useCallback(function (event) {\n    var callback = ref.current.onKeyDown;\n    if (callback) {\n      callback(event);\n    }\n    create(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onKeyUp = useCallback(function (event) {\n    var callback = ref.current.onKeyUp;\n    if (callback) {\n      callback(event);\n    }\n    release(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseDown = useCallback(function (event) {\n    var callback = ref.current.onMouseDown;\n    if (callback) {\n      callback(event);\n    }\n    create(event);\n    disableProgrammatic.current = true;\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onMouseUp = useCallback(function (event) {\n    var callback = ref.current.onMouseUp;\n    if (callback) {\n      callback(event);\n    }\n    release(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseLeave = useCallback(function (event) {\n    var callback = ref.current.onMouseLeave;\n    if (callback) {\n      callback(event);\n    }\n    cancel(true);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchStart = useCallback(function (event) {\n    var callback = ref.current.onTouchStart;\n    if (callback) {\n      callback(event);\n    }\n    create(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onTouchMove = useCallback(function (event) {\n    var callback = ref.current.onTouchMove;\n    if (callback) {\n      callback(event);\n    }\n    cancel(false);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchEnd = useCallback(function (event) {\n    var callback = ref.current.onTouchEnd;\n    if (callback) {\n      callback(event);\n    }\n    release(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onClick = useCallback(function (event) {\n    var _a = ref.current,\n      callback = _a.onClick,\n      disableProgrammaticRipple = _a.disableProgrammaticRipple;\n    if (callback) {\n      callback(event);\n    }\n    // when a click event is triggered and the current active element is not\n    // the event target, we know it was a true programmatic event and should\n    // trigger a ripple for it.\n    if (disableProgrammaticRipple || document.activeElement === event.currentTarget || disableProgrammatic.current) {\n      disableProgrammatic.current = false;\n      return;\n    }\n    create(event);\n  },\n  // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  return {\n    onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n    onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n    onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n    onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n    onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n    onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n    onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n    onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n    onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useRef","useRefCache","useRippleHandlers","_a","create","release","cancel","_b","handlers","_c","propDisabled","_d","disableRipple","_e","disableProgrammaticRipple","disabled","ref","disableProgrammatic","onKeyDown","event","callback","current","onKeyUp","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","onClick","document","activeElement","currentTarget"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/states/src/ripples/useRippleHandlers.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n\nimport type { MergableRippleHandlers, RippleEvent } from \"./types\";\n\ninterface Options<E extends HTMLElement> {\n  create: (event: RippleEvent<E>) => void;\n  release: (event: RippleEvent<E>) => void;\n  cancel: (ease: boolean) => void;\n  handlers?: MergableRippleHandlers<E>;\n  disabled?: boolean;\n  disableRipple?: boolean;\n  disableProgrammaticRipple?: boolean;\n}\n\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\nexport function useRippleHandlers<E extends HTMLElement>({\n  create,\n  release,\n  cancel,\n  handlers = {},\n  disabled: propDisabled = false,\n  disableRipple = false,\n  disableProgrammaticRipple = false,\n}: Options<E>): MergableRippleHandlers<E> {\n  const disabled = propDisabled || disableRipple;\n  const ref = useRefCache({ ...handlers, disableProgrammaticRipple });\n\n  // some OS/browser don't actually focus buttons/elements that are focusable after a click\n  // event which causes a double ripple effect. This ref is used to disable the programmatic\n  // ripple in these cases.\n  const disableProgrammatic = useRef(false);\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent<E>) => {\n      const { onKeyDown: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent<E>) => {\n      const { onKeyUp: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n\n  const onMouseDown = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseDown: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n      disableProgrammatic.current = true;\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onMouseUp = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseUp: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n  const onMouseLeave = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseLeave: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      cancel(true);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]\n  );\n\n  const onTouchStart = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchStart: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onTouchMove = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchMove: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      cancel(false);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]\n  );\n  const onTouchEnd = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchEnd: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onClick: callback, disableProgrammaticRipple } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      // when a click event is triggered and the current active element is not\n      // the event target, we know it was a true programmatic event and should\n      // trigger a ripple for it.\n      if (\n        disableProgrammaticRipple ||\n        document.activeElement === event.currentTarget ||\n        disableProgrammatic.current\n      ) {\n        disableProgrammatic.current = false;\n        return;\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n\n  return {\n    onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n    onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n    onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n    onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n    onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n    onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n    onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n    onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n    onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}