{"ast":null,"code":"import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT } from \"./constants\";\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @returns The current layout type\n */\nexport function getLayoutType(_a) {\n  var appSize = _a.appSize,\n    _b = _a.phoneLayout,\n    phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b,\n    _c = _a.tabletLayout,\n    tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c,\n    _d = _a.landscapeTabletLayout,\n    landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d,\n    _e = _a.desktopLayout,\n    desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e,\n    _f = _a.largeDesktopLayout,\n    largeDesktopLayout = _f === void 0 ? desktopLayout : _f;\n  var isPhone = appSize.isPhone,\n    isTablet = appSize.isTablet,\n    isLargeDesktop = appSize.isLargeDesktop,\n    isLandscape = appSize.isLandscape;\n  if (isPhone) {\n    return phoneLayout;\n  }\n  if (isTablet) {\n    return isLandscape ? landscapeTabletLayout : tabletLayout;\n  }\n  if (isLargeDesktop) {\n    return largeDesktopLayout;\n  }\n  return desktopLayout;\n}\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout has a temporary navigation.\n */\nexport function isTemporaryLayout(layout) {\n  return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is toggleable.\n */\nexport function isToggleableLayout(layout) {\n  return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or\n * `\"full-height\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is persistent.\n */\nexport function isPersistentLayout(layout) {\n  return layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\";\n}\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the full height variant.\n */\nexport function isFullHeightLayout(layout) {\n  return layout === \"full-height\";\n}\n/**\n * Checks if the current `layout` is either `\"temporary-mini\"` or\n * `\"toggleable-mini\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the mini variant.\n * @remarks \\@since 2.7.0\n */\nexport function isMiniLayout(layout) {\n  return layout === \"temporary-mini\" || layout === \"toggleable-mini\";\n}","map":{"version":3,"mappings":"AAEA,SACEA,sBAAsB,EACtBC,+BAA+B,EAC/BC,oBAAoB,EACpBC,qBAAqB,QAChB,aAAa;AAWpB;;;;;AAKA,OAAM,SAAUC,aAAa,CAACC,EAOX;MANjBC,OAAO;IACPC,mBAAkC;IAAlCC,WAAW,mBAAGN,oBAAoB;IAClCO,oBAAoC;IAApCC,YAAY,mBAAGP,qBAAqB;IACpCQ,6BAAuD;IAAvDC,qBAAqB,mBAAGX,+BAA+B;IACvDY,qBAAsC;IAAtCC,aAAa,mBAAGd,sBAAsB;IACtCe,0BAAkC;IAAlCC,kBAAkB,mBAAGF,aAAa;EAE1B,WAAO,GAA4CR,OAAO,QAAnD;IAAEW,QAAQ,GAAkCX,OAAO,SAAzC;IAAEY,cAAc,GAAkBZ,OAAO,eAAzB;IAAEa,WAAW,GAAKb,OAAO,YAAZ;EACtD,IAAIc,OAAO,EAAE;IACX,OAAOZ,WAAW;;EAGpB,IAAIS,QAAQ,EAAE;IACZ,OAAOE,WAAW,GAAGP,qBAAqB,GAAGF,YAAY;;EAG3D,IAAIQ,cAAc,EAAE;IAClB,OAAOF,kBAAkB;;EAG3B,OAAOF,aAAa;AACtB;AAEA;;;;;;AAMA,OAAM,SAAUO,iBAAiB,CAACC,MAA2B;EAC3D,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,gBAAgB;AAC9D;AAEA;;;;;;AAMA,OAAM,SAAUC,kBAAkB,CAACD,MAA2B;EAC5D,OAAOA,MAAM,KAAK,YAAY,IAAIA,MAAM,KAAK,iBAAiB;AAChE;AAEA;;;;;;;AAOA,OAAM,SAAUE,kBAAkB,CAACF,MAA2B;EAC5D,OACEA,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,UAAU,IAAIA,MAAM,KAAK,aAAa;AAE7E;AAEA;;;;;;AAMA,OAAM,SAAUG,kBAAkB,CAACH,MAA2B;EAC5D,OAAOA,MAAM,KAAK,aAAa;AACjC;AAEA;;;;;;;;AAQA,OAAM,SAAUI,YAAY,CAACJ,MAA2B;EACtD,OAAOA,MAAM,KAAK,gBAAgB,IAAIA,MAAM,KAAK,iBAAiB;AACpE","names":["DEFAULT_DESKTOP_LAYOUT","DEFAULT_LANDSCAPE_TABLET_LAYOUT","DEFAULT_PHONE_LAYOUT","DEFAULT_TABLET_LAYOUT","getLayoutType","_a","appSize","_b","phoneLayout","_c","tabletLayout","_d","landscapeTabletLayout","_e","desktopLayout","_f","largeDesktopLayout","isTablet","isLargeDesktop","isLandscape","isPhone","isTemporaryLayout","layout","isToggleableLayout","isPersistentLayout","isFullHeightLayout","isMiniLayout"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/layout/src/utils.ts"],"sourcesContent":["import type { AppSize } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_DESKTOP_LAYOUT,\n  DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  DEFAULT_PHONE_LAYOUT,\n  DEFAULT_TABLET_LAYOUT,\n} from \"./constants\";\nimport type { LayoutConfiguration, SupportedWideLayout } from \"./types\";\n\nexport interface GetLayoutOptions extends LayoutConfiguration {\n  /**\n   * The current app size which is used to determine which layout type to\n   * return.\n   */\n  appSize: AppSize;\n}\n\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @returns The current layout type\n */\nexport function getLayoutType({\n  appSize,\n  phoneLayout = DEFAULT_PHONE_LAYOUT,\n  tabletLayout = DEFAULT_TABLET_LAYOUT,\n  landscapeTabletLayout = DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  desktopLayout = DEFAULT_DESKTOP_LAYOUT,\n  largeDesktopLayout = desktopLayout,\n}: GetLayoutOptions): SupportedWideLayout {\n  const { isPhone, isTablet, isLargeDesktop, isLandscape } = appSize;\n  if (isPhone) {\n    return phoneLayout;\n  }\n\n  if (isTablet) {\n    return isLandscape ? landscapeTabletLayout : tabletLayout;\n  }\n\n  if (isLargeDesktop) {\n    return largeDesktopLayout;\n  }\n\n  return desktopLayout;\n}\n\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout has a temporary navigation.\n */\nexport function isTemporaryLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is toggleable.\n */\nexport function isToggleableLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or\n * `\"full-height\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is persistent.\n */\nexport function isPersistentLayout(layout: SupportedWideLayout): boolean {\n  return (\n    layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\"\n  );\n}\n\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the full height variant.\n */\nexport function isFullHeightLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"full-height\";\n}\n\n/**\n * Checks if the current `layout` is either `\"temporary-mini\"` or\n * `\"toggleable-mini\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the mini variant.\n * @remarks \\@since 2.7.0\n */\nexport function isMiniLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"temporary-mini\" || layout === \"toggleable-mini\";\n}\n"]},"metadata":{},"sourceType":"module"}