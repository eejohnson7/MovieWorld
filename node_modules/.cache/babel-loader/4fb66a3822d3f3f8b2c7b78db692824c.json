{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { Tree } from \"@react-md/tree\";\nimport { bem } from \"@react-md/utils\";\nimport { defaultMiniNavigationItemRenderer } from \"./defaultMiniNavigationItemRenderer\";\nimport { defaultNavigationItemRenderer } from \"./defaultNavigationItemRenderer\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout } from \"./utils\";\nvar styles = bem(\"rmd-layout-nav\");\n/**\n * Renders the navigation tree for the Layout component that adds some\n * reasonable defaults to work with navigation items.\n */\nexport var LayoutTree = forwardRef(function LayoutTree(_a, ref) {\n  var propId = _a.id,\n    ariaLabelledBy = _a[\"aria-labelledby\"],\n    _b = _a[\"aria-label\"],\n    ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Navigation\" : _b,\n    className = _a.className,\n    _c = _a.mini,\n    mini = _c === void 0 ? false : _c,\n    _d = _a.sticky,\n    sticky = _d === void 0 ? false : _d,\n    navStyle = _a.navStyle,\n    navClassName = _a.navClassName,\n    navItems = _a.navItems,\n    _e = _a.labelKey,\n    labelKey = _e === void 0 ? \"children\" : _e,\n    _f = _a.valueKey,\n    valueKey = _f === void 0 ? \"children\" : _f,\n    _g = _a.itemRenderer,\n    itemRenderer = _g === void 0 ? defaultNavigationItemRenderer : _g,\n    _h = _a.miniItemRenderer,\n    miniItemRenderer = _h === void 0 ? defaultMiniNavigationItemRenderer : _h,\n    selectedIds = _a.selectedIds,\n    _j = _a.disableTemporaryAutoclose,\n    disableTemporaryAutoclose = _j === void 0 ? false : _j,\n    props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"className\", \"mini\", \"sticky\", \"navStyle\", \"navClassName\", \"navItems\", \"labelKey\", \"valueKey\", \"itemRenderer\", \"miniItemRenderer\", \"selectedIds\", \"disableTemporaryAutoclose\"]);\n  var _k = useLayoutConfig(),\n    baseId = _k.baseId,\n    layout = _k.layout,\n    hideNav = _k.hideNav,\n    visible = _k.visible;\n  var _l = __read(selectedIds, 1),\n    selectedId = _l[0];\n  var lastSelectedId = useRef(selectedId);\n  var isTemporary = isTemporaryLayout(layout);\n  var id = propId !== null && propId !== void 0 ? propId : \"\".concat(baseId, \"-navigation-tree\");\n  useEffect(function () {\n    if (disableTemporaryAutoclose || !isTemporary || !visible || lastSelectedId.current === selectedId) {\n      // need to update the lastSelectedId since the selectedId might've changed\n      // by a route change OUTSIDE of the navigation drawer. if it isn't\n      // updated, it'll automatically close the next time it is opened.\n      lastSelectedId.current = selectedId;\n      return;\n    }\n    lastSelectedId.current = selectedId;\n    hideNav();\n  }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);\n  return _jsx(\"nav\", __assign({\n    id: \"\".concat(id, \"-nav\"),\n    style: navStyle,\n    className: cn(styles({\n      sticky: sticky,\n      grow: !sticky\n    }), navClassName)\n  }, {\n    children: _jsx(Tree, __assign({}, props, {\n      id: id,\n      ref: ref,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      data: navItems,\n      labelKey: labelKey,\n      valueKey: valueKey,\n      selectedIds: selectedIds,\n      itemRenderer: mini ? miniItemRenderer : itemRenderer,\n      className: cn(\"rmd-layout-tree\", className)\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACrD,OAAOC,EAAE,MAAM,YAAY;AAO3B,SAASC,IAAI,QAAQ,gBAAgB;AACrC,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SAASC,iCAAiC,QAAQ,qCAAqC;AACvF,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,eAAe,QAAQ,kBAAkB;AAElD,SAASC,iBAAiB,QAAQ,SAAS;AAE3C,IAAMC,MAAM,GAAGL,GAAG,CAAC,gBAAgB,CAAC;AA8EpC;;;;AAIA,OAAO,IAAMM,UAAU,GAAGX,UAAU,CAClC,SAASW,UAAU,CACjBC,EAiBC,EACDC,GAAG;EAjBD,IAAIC,MAAM;IACSC,cAAc;IACjCC,qBAAmE;IAArDC,SAAS,mBAAGF,cAAc,GAAGG,SAAS,GAAG,YAAY;IACnEC,SAAS;IACTC,YAAY;IAAZC,IAAI,mBAAG,KAAK;IACZC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACdC,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,gBAAqB;IAArBC,QAAQ,mBAAG,UAAU;IACrBC,gBAAqB;IAArBC,QAAQ,mBAAG,UAAU;IACrBC,oBAA4C;IAA5CC,YAAY,mBAAGzB,6BAA6B;IAC5C0B,wBAAoD;IAApDC,gBAAgB,mBAAG5B,iCAAiC;IACpD6B,WAAW;IACXC,iCAAiC;IAAjCC,yBAAyB,mBAAG,KAAK;IAC9BC,KAAK,cAhBV,sNAiBC,CADS;EAIJ,SAAuC9B,eAAe,EAAE;IAAtD+B,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC,OAAO,aAAsB;EACxD,gBAAeP,WAAW;IAAzBQ,UAAU,QAAe;EAChC,IAAMC,cAAc,GAAG1C,MAAM,CAACyC,UAAU,CAAC;EACzC,IAAME,WAAW,GAAGpC,iBAAiB,CAAC+B,MAAM,CAAC;EAE7C,IAAMM,EAAE,GAAGhC,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,UAAGyB,MAAM,qBAAkB;EAEhDtC,SAAS,CAAC;IACR,IACEoC,yBAAyB,IACzB,CAACQ,WAAW,IACZ,CAACH,OAAO,IACRE,cAAc,CAACG,OAAO,KAAKJ,UAAU,EACrC;MACA;MACA;MACA;MACAC,cAAc,CAACG,OAAO,GAAGJ,UAAU;MACnC;;IAGFC,cAAc,CAACG,OAAO,GAAGJ,UAAU;IACnCF,OAAO,EAAE;EACX,CAAC,EAAE,CAACJ,yBAAyB,EAAEQ,WAAW,EAAEH,OAAO,EAAED,OAAO,EAAEE,UAAU,CAAC,CAAC;EAE1E,OACEK;IACEF,EAAE,EAAE,UAAGA,EAAE,SAAM;IACfG,KAAK,EAAEzB,QAAQ;IACfL,SAAS,EAAEhB,EAAE,CAACO,MAAM,CAAC;MAAEa,MAAM;MAAE2B,IAAI,EAAE,CAAC3B;IAAM,CAAE,CAAC,EAAEE,YAAY;EAAC;IAAA0B,UAE9DH,KAAC5C,IAAI,eACCkC,KAAK;MACTQ,EAAE,EAAEA,EAAE;MACNjC,GAAG,EAAEA,GAAG;MAAA,cACII,SAAS;MAAA,mBACJF,cAAc;MAC/BqC,IAAI,EAAE1B,QAAQ;MACdE,QAAQ,EAAEA,QAAQ;MAClBE,QAAQ,EAAEA,QAAQ;MAClBK,WAAW,EAAEA,WAAW;MACxBH,YAAY,EAAEX,IAAI,GAAGa,gBAAgB,GAAGF,YAAY;MACpDb,SAAS,EAAEhB,EAAE,CAAC,iBAAiB,EAAEgB,SAAS;IAAC;EAC3C,GACE;AAEV,CAAC,CACF","names":["forwardRef","useEffect","useRef","cn","Tree","bem","defaultMiniNavigationItemRenderer","defaultNavigationItemRenderer","useLayoutConfig","isTemporaryLayout","styles","LayoutTree","_a","ref","propId","ariaLabelledBy","_b","ariaLabel","undefined","className","_c","mini","_d","sticky","navStyle","navClassName","navItems","_e","labelKey","_f","valueKey","_g","itemRenderer","_h","miniItemRenderer","selectedIds","_j","disableTemporaryAutoclose","props","baseId","layout","hideNav","visible","selectedId","lastSelectedId","isTemporary","id","current","_jsx","style","grow","children","data"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/layout/src/LayoutTree.tsx"],"sourcesContent":["import type { CSSProperties } from \"react\";\nimport { forwardRef, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport type {\n  BaseTreeItem,\n  TreeData,\n  TreeItemRenderer,\n  TreeProps,\n} from \"@react-md/tree\";\nimport { Tree } from \"@react-md/tree\";\nimport { bem } from \"@react-md/utils\";\n\nimport { defaultMiniNavigationItemRenderer } from \"./defaultMiniNavigationItemRenderer\";\nimport { defaultNavigationItemRenderer } from \"./defaultNavigationItemRenderer\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport type { LayoutNavigationItem } from \"./types\";\nimport { isTemporaryLayout } from \"./utils\";\n\nconst styles = bem(\"rmd-layout-nav\");\n\nexport type BaseLayoutTreeProps<T extends BaseTreeItem = LayoutNavigationItem> =\n  Omit<TreeProps<T>, \"id\" | \"data\" | \"aria-label\" | \"aria-labelledby\">;\n\nexport interface LayoutTreeProps<T extends BaseTreeItem = LayoutNavigationItem>\n  extends BaseLayoutTreeProps<T> {\n  /**\n   * The id to use for the tree. When this is omitted, it will be set to\n   * `${baseId}-navigation-tree` where the `baseId` is the `id` provided to the\n   * parent `Layout` component.\n   */\n  id?: string;\n\n  /**\n   * An optional `aria-label` to provide to the tree. This will be defaulted to\n   * `\"Navigation\"`.\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * An optional space-delimited list of ids that help describe this tree. This\n   * can be used instead of an `aria-label` or alongside for additional screen\n   * reader description.\n   */\n  \"aria-labelledby\"?: string;\n\n  /**\n   * Boolean if the `LayoutTree` is being rendered as the mini variant. This\n   * will update the `itemRenderer` to default to the\n   * `defaultMiniNavigationItemRenderer` instead of the\n   * `defaultNavigationItemRenderer`.\n   *\n   * @remarks \\@since 2.7.0\n   */\n  mini?: boolean;\n\n  /**\n   * Boolean if the mini navigation should be treated as a \"sticky\" element.\n   * This should really only be `true` if disabling the fixed `AppBar` behavior\n   * in the `Layout`.\n   *\n   * @remarks \\@since 2.8.3\n   */\n  sticky?: boolean;\n\n  /**\n   * The {@link TreeItemRenderer} to use if the `mini` prop is enabled.\n   *\n   * @remarks \\@since 2.8.3\n   */\n  miniItemRenderer?: TreeItemRenderer<T>;\n\n  /**\n   * Optional style to provide to the `<nav>` element surrounding the tree\n   */\n  navStyle?: CSSProperties;\n\n  /**\n   * Optional className to provide to the `<nav>` element surrounding the tree\n   */\n  navClassName?: string;\n\n  /**\n   * The navigation items to render.\n   */\n  navItems: TreeData<T>;\n\n  /**\n   * Boolean if the temporary navigation type should no longer automatically\n   * close when the `selectedIds` updates to contain a new route when using the\n   * `useLayoutNavigation` hook.  This makes it so when a user on mobile clicks\n   * a route within your app in the main navigation pane, it will automatically\n   * close if it was a link.\n   */\n  disableTemporaryAutoclose?: boolean;\n}\n\n/**\n * Renders the navigation tree for the Layout component that adds some\n * reasonable defaults to work with navigation items.\n */\nexport const LayoutTree = forwardRef<HTMLUListElement, LayoutTreeProps>(\n  function LayoutTree(\n    {\n      id: propId,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel = ariaLabelledBy ? undefined : \"Navigation\",\n      className,\n      mini = false,\n      sticky = false,\n      navStyle,\n      navClassName,\n      navItems,\n      labelKey = \"children\",\n      valueKey = \"children\",\n      itemRenderer = defaultNavigationItemRenderer,\n      miniItemRenderer = defaultMiniNavigationItemRenderer,\n      selectedIds,\n      disableTemporaryAutoclose = false,\n      ...props\n    },\n    ref\n  ) {\n    const { baseId, layout, hideNav, visible } = useLayoutConfig();\n    const [selectedId] = selectedIds;\n    const lastSelectedId = useRef(selectedId);\n    const isTemporary = isTemporaryLayout(layout);\n\n    const id = propId ?? `${baseId}-navigation-tree`;\n\n    useEffect(() => {\n      if (\n        disableTemporaryAutoclose ||\n        !isTemporary ||\n        !visible ||\n        lastSelectedId.current === selectedId\n      ) {\n        // need to update the lastSelectedId since the selectedId might've changed\n        // by a route change OUTSIDE of the navigation drawer. if it isn't\n        // updated, it'll automatically close the next time it is opened.\n        lastSelectedId.current = selectedId;\n        return;\n      }\n\n      lastSelectedId.current = selectedId;\n      hideNav();\n    }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);\n\n    return (\n      <nav\n        id={`${id}-nav`}\n        style={navStyle}\n        className={cn(styles({ sticky, grow: !sticky }), navClassName)}\n      >\n        <Tree\n          {...props}\n          id={id}\n          ref={ref}\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          data={navItems}\n          labelKey={labelKey}\n          valueKey={valueKey}\n          selectedIds={selectedIds}\n          itemRenderer={mini ? miniItemRenderer : itemRenderer}\n          className={cn(\"rmd-layout-tree\", className)}\n        />\n      </nav>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}