{"ast":null,"code":"import { useEffect } from \"react\";\nimport { containsElement } from \"./containsElement\";\n/**\n * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null\n * @internal\n */\nexport function getElement(element) {\n  if (!element) {\n    return null;\n  }\n  if (typeof element.current !== \"undefined\") {\n    return element.current;\n  }\n  return element;\n}\n/**\n * Triggers a callback function when another element in the page is clicked that\n * is outside of the provided element. This is generally used for closing\n * temporary elements when something else within the page has been clicked.\n *\n * The callback will be provided the current `element` as well as the click\n * target if additional logic should be applied before closing.\n *\n * @typeParam E - The type of element\n */\nexport function useCloseOnOutsideClick(_a) {\n  var enabled = _a.enabled,\n    element = _a.element,\n    onOutsideClick = _a.onOutsideClick;\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    function handleClick(event) {\n      var target = event.target;\n      var el = getElement(element);\n      if (!containsElement(el, target)) {\n        onOutsideClick(el, target, containsElement);\n      }\n    }\n    window.addEventListener(\"click\", handleClick);\n    return function () {\n      window.removeEventListener(\"click\", handleClick);\n    };\n  }, [enabled, element, onOutsideClick]);\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;AAIA,OAAM,SAAUC,UAAU,CACxBC,OAA8C;EAE9C,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,IAAI;;EAGb,IAAI,OAAQA,OAAsC,CAACC,OAAO,KAAK,WAAW,EAAE;IAC1E,OAAQD,OAAsC,CAACC,OAAO;;EAGxD,OAAOD,OAAmB;AAC5B;AAyCA;;;;;;;;;;AAUA,OAAM,SAAUE,sBAAsB,CAAwBC,EAI9B;MAH9BC,OAAO;IACPJ,OAAO;IACPK,cAAc;EAEdR,SAAS,CAAC;IACR,IAAI,CAACO,OAAO,EAAE;MACZ;;IAGF,SAASE,WAAW,CAACC,KAAiB;MACpC,IAAMC,MAAM,GAAGD,KAAK,CAACC,MAA4B;MACjD,IAAMC,EAAE,GAAGV,UAAU,CAAIC,OAAO,CAAC;MAEjC,IAAI,CAACF,eAAe,CAACW,EAAE,EAAED,MAAM,CAAC,EAAE;QAChCH,cAAc,CAACI,EAAE,EAAED,MAAM,EAAEV,eAAe,CAAC;;IAE/C;IAEAY,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEL,WAAW,CAAC;IAC7C,OAAO;MACLI,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEN,WAAW,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,CAACF,OAAO,EAAEJ,OAAO,EAAEK,cAAc,CAAC,CAAC;AACxC","names":["useEffect","containsElement","getElement","element","current","useCloseOnOutsideClick","_a","enabled","onOutsideClick","handleClick","event","target","el","window","addEventListener","removeEventListener"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/useCloseOnOutsideClick.ts"],"sourcesContent":["import type { MutableRefObject } from \"react\";\nimport { useEffect } from \"react\";\n\nimport { containsElement } from \"./containsElement\";\n\n/**\n * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null\n * @internal\n */\nexport function getElement<E extends HTMLElement>(\n  element: MutableRefObject<E | null> | E | null\n): E | null {\n  if (!element) {\n    return null;\n  }\n\n  if (typeof (element as MutableRefObject<E | null>).current !== \"undefined\") {\n    return (element as MutableRefObject<E | null>).current;\n  }\n\n  return element as E | null;\n}\n\ntype Contains = typeof containsElement;\n\n/**\n * The on outside click handler that can be used to check for additional logic\n * before triggering some action. This will be provided:\n *\n * - the current element or null\n * - the current click target or null\n * - a nice \"safe\" contains function that handles nulls\n */\nexport type OnOutsideClick<E extends HTMLElement> = (\n  element: E | null,\n  target: HTMLElement | null,\n  contains: Contains\n) => void;\n\n/**\n * @typeParam E - The HTMLElement type of the container element that should not\n * trigger the close behavior if an element inside is clicked.\n */\nexport interface CloseOnOutsideClickOptions<E extends HTMLElement> {\n  /**\n   * Boolean if the behavior is enabled.\n   */\n  enabled: boolean;\n\n  /**\n   * The element that should not trigger the onOutsideClick callback when it or\n   * a child has been clicked.\n   */\n  element: E | null | MutableRefObject<E | null>;\n\n  /**\n   * A callback function when an element outside has been clicked. This is\n   * normally something that closes temporary elements.\n   */\n  onOutsideClick: OnOutsideClick<E>;\n}\n\n/**\n * Triggers a callback function when another element in the page is clicked that\n * is outside of the provided element. This is generally used for closing\n * temporary elements when something else within the page has been clicked.\n *\n * The callback will be provided the current `element` as well as the click\n * target if additional logic should be applied before closing.\n *\n * @typeParam E - The type of element\n */\nexport function useCloseOnOutsideClick<E extends HTMLElement>({\n  enabled,\n  element,\n  onOutsideClick,\n}: CloseOnOutsideClickOptions<E>): void {\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    function handleClick(event: MouseEvent): void {\n      const target = event.target as HTMLElement | null;\n      const el = getElement<E>(element);\n\n      if (!containsElement(el, target)) {\n        onOutsideClick(el, target, containsElement);\n      }\n    }\n\n    window.addEventListener(\"click\", handleClick);\n    return () => {\n      window.removeEventListener(\"click\", handleClick);\n    };\n  }, [enabled, element, onOutsideClick]);\n}\n"]},"metadata":{},"sourceType":"module"}