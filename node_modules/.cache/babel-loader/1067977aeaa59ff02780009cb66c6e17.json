{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\nexport function fuzzyFilter(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n    getItemValue = _a.getItemValue,\n    valueKey = _a.valueKey,\n    trim = _a.trim,\n    ignoreWhitespace = _a.ignoreWhitespace;\n  query = getSearchString(query, false, trim, ignoreWhitespace);\n  if (!searchable.length || !query) {\n    return searchable;\n  }\n  var queryRegExp = getFuzzyRegExp(query);\n  return searchable.filter(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);\n    return value.length && value.match(queryRegExp);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,sBAAsB,EAAEC,eAAe,QAAQ,SAAS;AAEjE;;;;;;;;;;;;AAYA,OAAM,SAAUC,WAAW,CACzBC,KAAa,EACbC,UAAwB,EACxBC,OAA8B;EAA9B;IAAAA,YAA8B;EAAA;EAExB,SAAqDP,QAAQ,CACjEO,OAAO,EACPL,sBAAsB,CACvB;IAHOM,YAAY;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,gBAAgB,sBAGrD;EAEDN,KAAK,GAAGF,eAAe,CAACE,KAAK,EAAE,KAAK,EAAEK,IAAI,EAAEC,gBAAgB,CAAC;EAC7D,IAAI,CAACL,UAAU,CAACM,MAAM,IAAI,CAACP,KAAK,EAAE;IAChC,OAAOC,UAAU;;EAGnB,IAAMO,WAAW,GAAGZ,cAAc,CAACI,KAAK,CAAC;EACzC,OAAOC,UAAU,CAACQ,MAAM,CAAC,UAACC,IAAI;IAC5B,IAAMC,KAAK,GAAGb,eAAe,CAC3BK,YAAY,CAACO,IAAI,EAAEN,QAAQ,CAAC,EAC5B,KAAK,EACLC,IAAI,EACJC,gBAAgB,CACjB;IAED,OAAOK,KAAK,CAACJ,MAAM,IAAII,KAAK,CAACC,KAAK,CAACJ,WAAW,CAAC;EACjD,CAAC,CAAC;AACJ","names":["defaults","getFuzzyRegExp","DEFAULT_SEARCH_OPTIONS","getSearchString","fuzzyFilter","query","searchable","options","getItemValue","valueKey","trim","ignoreWhitespace","length","queryRegExp","filter","item","value","match"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/search/fuzzyFilter.ts"],"sourcesContent":["import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport type { SearchOptions } from \"./utils\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\nexport function fuzzyFilter<T = unknown>(\n  query: string,\n  searchable: readonly T[],\n  options: SearchOptions<T> = {}\n): readonly T[] {\n  const { getItemValue, valueKey, trim, ignoreWhitespace } = defaults(\n    options,\n    DEFAULT_SEARCH_OPTIONS\n  );\n\n  query = getSearchString(query, false, trim, ignoreWhitespace);\n  if (!searchable.length || !query) {\n    return searchable;\n  }\n\n  const queryRegExp = getFuzzyRegExp(query);\n  return searchable.filter((item) => {\n    const value = getSearchString(\n      getItemValue(item, valueKey),\n      false,\n      trim,\n      ignoreWhitespace\n    );\n\n    return value.length && value.match(queryRegExp);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}