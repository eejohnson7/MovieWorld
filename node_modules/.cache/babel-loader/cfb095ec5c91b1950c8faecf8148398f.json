{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarNav } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { DEFAULT_SHEET_TIMEOUT } from \"@react-md/sheet\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES } from \"./constants\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout, isToggleableLayout } from \"./utils\";\n/**\n * This is the default implementation for the navigation toggle button within\n * the `Layout` component and should normally be the first child for the\n * `LayoutAppBar`. In addition, this component will automatically update itself\n * to provide an accessible `aria-label` for screen readers and change to a\n * toggle button for toggleable layouts.\n */\nexport var LayoutNavToggle = forwardRef(function LayoutNavToggle(_a, nodeRef) {\n  var propAriaLabel = _a[\"aria-label\"],\n    propAriaPressed = _a[\"aria-pressed\"],\n    propChildren = _a.children,\n    className = _a.className,\n    _b = _a.buttonType,\n    buttonType = _b === void 0 ? \"icon\" : _b,\n    onClick = _a.onClick,\n    propOffset = _a.offset,\n    rendered = _a.rendered,\n    propTabIndex = _a.tabIndex,\n    _c = _a.timeout,\n    timeout = _c === void 0 ? DEFAULT_SHEET_TIMEOUT : _c,\n    _d = _a.classNames,\n    classNames = _d === void 0 ? DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d,\n    props = __rest(_a, [\"aria-label\", \"aria-pressed\", \"children\", \"className\", \"buttonType\", \"onClick\", \"offset\", \"rendered\", \"tabIndex\", \"timeout\", \"classNames\"]);\n  var icon = useIcon(\"menu\");\n  var _e = useLayoutConfig(),\n    baseId = _e.baseId,\n    layout = _e.layout,\n    showNav = _e.showNav,\n    hideNav = _e.hideNav,\n    visible = _e.visible;\n  var isToggleable = isToggleableLayout(layout);\n  var isTemporary = isTemporaryLayout(layout);\n  var isRendered = rendered;\n  if (typeof isRendered === \"undefined\") {\n    isRendered = isTemporary || isToggleable;\n  }\n  var offset = propOffset;\n  if (typeof offset === \"undefined\") {\n    offset = isToggleable && visible;\n  }\n  var elementProps = useCSSTransition({\n    nodeRef: nodeRef,\n    transitionIn: offset,\n    temporary: false,\n    timeout: timeout,\n    classNames: classNames,\n    className: cn(\"rmd-layout-nav-toggle\", className)\n  }).elementProps;\n  if (!isRendered) {\n    return null;\n  }\n  var children = propChildren;\n  if (buttonType === \"icon\" && typeof children === \"undefined\") {\n    children = icon;\n  }\n  var tabIndex = propTabIndex;\n  if (typeof tabIndex === \"undefined\" && visible && isToggleable) {\n    // set to -1 so it isn't tab focusable but is still programmatically\n    // focusable for temporary navigation drawers to re-focus once closed\n    tabIndex = -1;\n  }\n  var ariaPressed = propAriaPressed;\n  if (typeof ariaPressed === \"undefined\" && isToggleable) {\n    ariaPressed = visible;\n  }\n  var ariaLabel = propAriaLabel;\n  if (typeof ariaLabel === \"undefined\" && typeof props[\"aria-labelledby\"] === \"undefined\") {\n    ariaLabel = isToggleable ? \"Navigation\" : \"Show Navigation\";\n  }\n  return _jsx(AppBarNav, __assign({\n    id: \"\".concat(baseId, \"-nav-toggle\")\n  }, props, elementProps, {\n    \"aria-label\": ariaLabel,\n    \"aria-pressed\": ariaPressed,\n    onClick: function (event) {\n      if (onClick) {\n        onClick(event);\n      }\n      if (!visible) {\n        showNav();\n      } else {\n        hideNav();\n      }\n    },\n    buttonType: buttonType,\n    tabIndex: tabIndex\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","AppBarNav","useIcon","DEFAULT_SHEET_TIMEOUT","useCSSTransition","DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES","useLayoutConfig","isTemporaryLayout","isToggleableLayout","LayoutNavToggle","_a","nodeRef","propAriaLabel","propAriaPressed","propChildren","className","_b","buttonType","onClick","propOffset","rendered","propTabIndex","_c","timeout","_d","classNames","props","icon","baseId","layout","showNav","hideNav","visible","isToggleable","isTemporary","isRendered","offset","transitionIn","temporary","children","tabIndex","ariaPressed","ariaLabel","_jsx","id","elementProps","event"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/layout/src/LayoutNavToggle.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { AppBarNavProps } from \"@react-md/app-bar\";\nimport { AppBarNav } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { DEFAULT_SHEET_TIMEOUT } from \"@react-md/sheet\";\nimport type {\n  CSSTransitionClassNames,\n  TransitionTimeout,\n} from \"@react-md/transition\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport { DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES } from \"./constants\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout, isToggleableLayout } from \"./utils\";\n\nexport interface LayoutNavToggleProps extends AppBarNavProps {\n  /**\n   * An optional `aria-label` to provide to the nav toggle button that can be\n   * used instead of the `aria-labelledby` prop to describe the button for\n   * screen readers. When this and the `aria-labelledby` props are undefined, it\n   * will default to:\n   *\n   * - `\"Show Navigation\"` for temporary layouts so that it will be read as\n   *   `\"Show Navigation Button\"` by screen readers\n   * - `\"Navigation\"` for toggleable layouts so that it will be read as\n   *   `\"Navigation Toggle Button\"` by screen readers\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * Boolean if the button should offset the rest of the components in the\n   * `AppBar` by the current size of the navigation panel. When this is\n   * `undefined`, it will be `true` when a toggleable layout is visible.\n   */\n  offset?: boolean;\n\n  /**\n   * Boolean if this component should be rendered. When this is `undefined`, it\n   * will not be rendered for temporary layouts as well as when the toggleable\n   * navigation panel is not visible.\n   */\n  rendered?: boolean;\n\n  /**\n   * The transition timeout to use for the toggleable `LayoutNavigation` either\n   * comes into view or expands from mini to full-width. The transition can be\n   * disabled by setting this value to `0`.\n   */\n  timeout?: TransitionTimeout;\n\n  /**\n   * The transition classnames to use for the toggleable `LayoutNavigation`\n   * either comes into view or expands from mini to full-width.\n   */\n  classNames?: CSSTransitionClassNames;\n}\n\nexport interface LayoutWithNavToggle {\n  /**\n   * An optional custom nav toggle to use within the `Layout` or `LayoutAppBar`\n   * instead of the default implementation.\n   */\n  navToggle?: ReactNode;\n\n  /**\n   * Any optional props to provide to the default `LayoutNavToggle`\n   * implementation.\n   */\n  navToggleProps?: PropsWithRef<LayoutNavToggleProps, HTMLButtonElement>;\n}\n\n/**\n * This is the default implementation for the navigation toggle button within\n * the `Layout` component and should normally be the first child for the\n * `LayoutAppBar`. In addition, this component will automatically update itself\n * to provide an accessible `aria-label` for screen readers and change to a\n * toggle button for toggleable layouts.\n */\nexport const LayoutNavToggle = forwardRef<\n  HTMLButtonElement,\n  LayoutNavToggleProps\n>(function LayoutNavToggle(\n  {\n    \"aria-label\": propAriaLabel,\n    \"aria-pressed\": propAriaPressed,\n    children: propChildren,\n    className,\n    buttonType = \"icon\",\n    onClick,\n    offset: propOffset,\n    rendered,\n    tabIndex: propTabIndex,\n    timeout = DEFAULT_SHEET_TIMEOUT,\n    classNames = DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES,\n    ...props\n  },\n  nodeRef\n) {\n  const icon = useIcon(\"menu\");\n  const { baseId, layout, showNav, hideNav, visible } = useLayoutConfig();\n  const isToggleable = isToggleableLayout(layout);\n  const isTemporary = isTemporaryLayout(layout);\n\n  let isRendered = rendered;\n  if (typeof isRendered === \"undefined\") {\n    isRendered = isTemporary || isToggleable;\n  }\n\n  let offset = propOffset;\n  if (typeof offset === \"undefined\") {\n    offset = isToggleable && visible;\n  }\n\n  const { elementProps } = useCSSTransition<HTMLButtonElement>({\n    nodeRef,\n    transitionIn: offset,\n    temporary: false,\n    timeout,\n    classNames,\n    className: cn(\"rmd-layout-nav-toggle\", className),\n  });\n\n  if (!isRendered) {\n    return null;\n  }\n\n  let children = propChildren;\n  if (buttonType === \"icon\" && typeof children === \"undefined\") {\n    children = icon;\n  }\n\n  let tabIndex = propTabIndex;\n  if (typeof tabIndex === \"undefined\" && visible && isToggleable) {\n    // set to -1 so it isn't tab focusable but is still programmatically\n    // focusable for temporary navigation drawers to re-focus once closed\n    tabIndex = -1;\n  }\n\n  let ariaPressed = propAriaPressed;\n  if (typeof ariaPressed === \"undefined\" && isToggleable) {\n    ariaPressed = visible;\n  }\n\n  let ariaLabel = propAriaLabel;\n  if (\n    typeof ariaLabel === \"undefined\" &&\n    typeof props[\"aria-labelledby\"] === \"undefined\"\n  ) {\n    ariaLabel = isToggleable ? \"Navigation\" : \"Show Navigation\";\n  }\n\n  return (\n    <AppBarNav\n      id={`${baseId}-nav-toggle`}\n      {...props}\n      {...elementProps}\n      aria-label={ariaLabel}\n      aria-pressed={ariaPressed}\n      onClick={(event) => {\n        if (onClick) {\n          onClick(event);\n        }\n\n        if (!visible) {\n          showNav();\n        } else {\n          hideNav();\n        }\n      }}\n      buttonType={buttonType}\n      tabIndex={tabIndex}\n    >\n      {children}\n    </AppBarNav>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}