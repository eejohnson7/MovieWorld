{"ast":null,"code":"/**\n * A utility function to get the current container for the portal.  For SSR, the\n * container will always be `null` since portals don't work server side.\n *\n * @param into - The element to portal into\n * @param intoId - An id for an element to portal into\n * @returns the portal container element or null\n */\nexport function getContainer(into, intoId) {\n  if (typeof document === \"undefined\") {\n    return null;\n  }\n  var container = null;\n  if (typeof into === \"undefined\" && typeof intoId === \"undefined\") {\n    container = document.body;\n  } else if (typeof intoId === \"string\") {\n    container = document.getElementById(intoId);\n  } else if (typeof into === \"string\") {\n    container = document.querySelector(into);\n  } else if (typeof into === \"function\") {\n    container = into();\n  } else if (into) {\n    container = into;\n  }\n  return container;\n}","map":{"version":3,"mappings":"AAWA;;;;;;;;AAQA,OAAM,SAAUA,YAAY,CAC1BC,IAA6B,EAC7BC,MAA2B;EAE3B,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IACnC,OAAO,IAAI;;EAGb,IAAIC,SAAS,GAAuB,IAAI;EACxC,IAAI,OAAOH,IAAI,KAAK,WAAW,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAChEE,SAAS,GAAGD,QAAQ,CAACE,IAAI;GAC1B,MAAM,IAAI,OAAOH,MAAM,KAAK,QAAQ,EAAE;IACrCE,SAAS,GAAGD,QAAQ,CAACG,cAAc,CAACJ,MAAM,CAAC;GAC5C,MAAM,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IACnCG,SAAS,GAAGD,QAAQ,CAACI,aAAa,CAACN,IAAI,CAAC;GACzC,MAAM,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;IACrCG,SAAS,GAAGH,IAAI,EAAE;GACnB,MAAM,IAAIA,IAAI,EAAE;IACfG,SAAS,GAAGH,IAAI;;EAGlB,OAAOG,SAAS;AAClB","names":["getContainer","into","intoId","document","container","body","getElementById","querySelector"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/portal/src/getContainer.ts"],"sourcesContent":["/**\n * This is the type for how a portal can be rendered into another element.  This\n * can either be a function that returns the HTMLElement, an HTMLElement, or a\n * `document.querySelector` string.\n */\nexport type PortalInto =\n  | (() => HTMLElement | null)\n  | HTMLElement\n  | string\n  | null;\n\n/**\n * A utility function to get the current container for the portal.  For SSR, the\n * container will always be `null` since portals don't work server side.\n *\n * @param into - The element to portal into\n * @param intoId - An id for an element to portal into\n * @returns the portal container element or null\n */\nexport function getContainer(\n  into?: PortalInto | undefined,\n  intoId?: string | undefined\n): HTMLElement | null {\n  if (typeof document === \"undefined\") {\n    return null;\n  }\n\n  let container: HTMLElement | null = null;\n  if (typeof into === \"undefined\" && typeof intoId === \"undefined\") {\n    container = document.body;\n  } else if (typeof intoId === \"string\") {\n    container = document.getElementById(intoId);\n  } else if (typeof into === \"string\") {\n    container = document.querySelector(into);\n  } else if (typeof into === \"function\") {\n    container = into();\n  } else if (into) {\n    container = into;\n  }\n\n  return container;\n}\n"]},"metadata":{},"sourceType":"module"}