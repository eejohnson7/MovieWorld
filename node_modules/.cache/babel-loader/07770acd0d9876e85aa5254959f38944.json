{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\n * A simple hook that only triggers the callback when a component is unmounted.\n * This will make sure that the callback function does not have a stale closure\n * by the time the component unmounts as well.\n *\n * @example\n * Simple Example\n * ```ts\n * useOnUnmount(() => {\n *   console.log('Component is unmounted.');\n * });\n *\n * const [data, setData] = useState(initialData);\n * useOnUnmount(() => {\n *   API.saveCurrentData(data);\n * });\n *\n * // update data\n * ```\n *\n * @remarks \\@since 2.7.1\n * @param callback - the function to call when the component unmounts.\n */\nexport function useOnUnmount(callback) {\n  var ref = useRef(callback);\n  useEffect(function () {\n    ref.current = callback;\n  });\n  return useEffect(function () {\n    return function () {\n      return ref.current();\n    };\n  }, []);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUC,YAAY,CAACC,QAAoB;EAC/C,IAAMC,GAAG,GAAGH,MAAM,CAACE,QAAQ,CAAC;EAC5BH,SAAS,CAAC;IACRI,GAAG,CAACC,OAAO,GAAGF,QAAQ;EACxB,CAAC,CAAC;EAEF,OAAOH,SAAS,CAAC;IAAM;MAAM,UAAG,CAACK,OAAO,EAAE;IAAb,CAAa;EAAnB,CAAmB,EAAE,EAAE,CAAC;AACjD","names":["useEffect","useRef","useOnUnmount","callback","ref","current"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/useOnUnmount.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/**\n * A simple hook that only triggers the callback when a component is unmounted.\n * This will make sure that the callback function does not have a stale closure\n * by the time the component unmounts as well.\n *\n * @example\n * Simple Example\n * ```ts\n * useOnUnmount(() => {\n *   console.log('Component is unmounted.');\n * });\n *\n * const [data, setData] = useState(initialData);\n * useOnUnmount(() => {\n *   API.saveCurrentData(data);\n * });\n *\n * // update data\n * ```\n *\n * @remarks \\@since 2.7.1\n * @param callback - the function to call when the component unmounts.\n */\nexport function useOnUnmount(callback: () => void): void {\n  const ref = useRef(callback);\n  useEffect(() => {\n    ref.current = callback;\n  });\n\n  return useEffect(() => () => ref.current(), []);\n}\n"]},"metadata":{},"sourceType":"module"}