{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./utils\";\n/**\n *\n * @remarks \\@since 5.0.0 Moved the `AddEventListenerOptions` to no longer be\n * part of an `options` object.\n */\nexport function useScrollListener(_a) {\n  var once = _a.once,\n    _b = _a.passive,\n    passive = _b === void 0 ? true : _b,\n    signal = _a.signal,\n    capture = _a.capture,\n    _c = _a.enabled,\n    enabled = _c === void 0 ? true : _c,\n    onScroll = _a.onScroll;\n  var scrollHandlerRef = useRefCache(onScroll);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    var eventHandler = delegateEvent(\"scroll\", window, true, {\n      once: once,\n      passive: passive,\n      signal: signal,\n      capture: capture\n    });\n    var scrollHandler = scrollHandlerRef.current;\n    eventHandler.add(scrollHandler);\n    return function () {\n      eventHandler.remove(scrollHandler);\n    };\n  }, [capture, enabled, once, passive, scrollHandlerRef, signal]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,aAAa,QAAQ,SAAS;AAgBvC;;;;;AAKA,OAAM,SAAUC,iBAAiB,CAACC,EAON;MAN1BC,IAAI;IACJC,eAAc;IAAdC,OAAO,mBAAG,IAAI;IACdC,MAAM;IACNC,OAAO;IACPC,eAAc;IAAdC,OAAO,mBAAG,IAAI;IACdC,QAAQ;EAER,IAAMC,gBAAgB,GAAGZ,WAAW,CAACW,QAAQ,CAAC;EAC9CZ,SAAS,CAAC;IACR,IAAI,CAACW,OAAO,EAAE;MACZ;;IAGF,IAAMG,YAAY,GAAGZ,aAAa,CAAC,QAAQ,EAAEa,MAAM,EAAE,IAAI,EAAE;MACzDV,IAAI;MACJE,OAAO;MACPC,MAAM;MACNC,OAAO;KACR,CAAC;IACF,IAAMO,aAAa,GAAGH,gBAAgB,CAACI,OAAO;IAC9CH,YAAY,CAACI,GAAG,CAACF,aAAa,CAAC;IAE/B,OAAO;MACLF,YAAY,CAACK,MAAM,CAACH,aAAa,CAAC;IACpC,CAAC;EACH,CAAC,EAAE,CAACP,OAAO,EAAEE,OAAO,EAAEN,IAAI,EAAEE,OAAO,EAAEM,gBAAgB,EAAEL,MAAM,CAAC,CAAC;AACjE","names":["useEffect","useRefCache","delegateEvent","useScrollListener","_a","once","_b","passive","signal","capture","_c","enabled","onScroll","scrollHandlerRef","eventHandler","window","scrollHandler","current","add","remove"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/events/useScrollListener.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./utils\";\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface ScrollListenerHookOptions extends AddEventListenerOptions {\n  /**\n   * The event handler that will be fired when the page scrolls or if any child\n   * element scrolls when the {@link capture} option is `true`.\n   */\n  onScroll: EventListener;\n\n  /** @defaultValue `true` */\n  enabled?: boolean;\n}\n\n/**\n *\n * @remarks \\@since 5.0.0 Moved the `AddEventListenerOptions` to no longer be\n * part of an `options` object.\n */\nexport function useScrollListener({\n  once,\n  passive = true,\n  signal,\n  capture,\n  enabled = true,\n  onScroll,\n}: ScrollListenerHookOptions): void {\n  const scrollHandlerRef = useRefCache(onScroll);\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const eventHandler = delegateEvent(\"scroll\", window, true, {\n      once,\n      passive,\n      signal,\n      capture,\n    });\n    const scrollHandler = scrollHandlerRef.current;\n    eventHandler.add(scrollHandler);\n\n    return () => {\n      eventHandler.remove(scrollHandler);\n    };\n  }, [capture, enabled, once, passive, scrollHandlerRef, signal]);\n}\n"]},"metadata":{},"sourceType":"module"}