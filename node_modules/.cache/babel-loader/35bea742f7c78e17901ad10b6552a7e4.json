{"ast":null,"code":"/**\n * An extremely simple function that is used to generate an id for an item\n * within a list of other items.  This is generally used with list of items that\n * should have custom focus with the `aria-activedescendant` flow instead of\n * native focus.\n *\n * @param id - The base id for the container element of all the items.\n * @param i - The index of the item within the list. This number will be\n * incremented by 1 as an id to start from 1 instead of 0.\n */\nexport function getItemId(id, i) {\n  if (!id) {\n    throw new Error(\"The id must be a string with a length greater than 0\");\n  }\n  if (i < 0) {\n    throw new RangeError(\"The provided index must be greater than 0\");\n  }\n  return \"\".concat(id, \"-item-\").concat(i + 1);\n}\n/**\n * A small util function to transform a list of key codes into a list of\n * `KeyConfig` objects. This is useful for how I determine what behavior to\n * implement after a keydown event.\n *\n * @param keys - A list of key mappings to convert to a key object. These should\n * be things like: \"Tab\", \"Alt+Home\", \"A\", \"Shift+Alt+ArrowUp\"\n * @param type - The keyboard focus type this key should be mapped to\n * @internal\n */\nexport function transformKeys(keys, type) {\n  return keys.map(function (key) {\n    return {\n      shiftKey: key.includes(\"Shift+\"),\n      metaKey: key.includes(\"Meta+\"),\n      ctrlKey: key.includes(\"Control+\"),\n      altKey: key.includes(\"Alt+\"),\n      key: key.replace(/(Shift|Meta|Alt|Control)\\+/g, \"\"),\n      type: type\n    };\n  });\n}\n/**\n * A small util get the `KeyConfig` based on the provided keys and keyboard\n * event. This ensures that the key, altKey, metaKey, and shiftKey values all\n * match.\n *\n * If a key is not found, `null` will be returned instead.\n *\n * @param event - The event to get a key mapping type for\n * @param keys - A list of key mappings to attempt to find a valid key event\n * type from.\n * @internal\n */\nexport function getKeyboardConfig(event, keys) {\n  var key = event.key,\n    altKey = event.altKey,\n    ctrlKey = event.ctrlKey,\n    metaKey = event.metaKey,\n    shiftKey = event.shiftKey;\n  return keys.find(function (k) {\n    return k.key === key && k.altKey === altKey && k.ctrlKey === ctrlKey && k.metaKey === metaKey && k.shiftKey === shiftKey;\n  }) || null;\n}\n/**\n * Creates a stringified representation of the configuration so that the config\n * can be checked in the `onChange` callback for keyboard movement. This is used\n * as the `query` attribute on the change data.\n *\n * @param config - The key config to stringify\n * @internal\n */\nexport function getStringifiedKeyConfig(config) {\n  var key = config.key,\n    altKey = config.altKey,\n    ctrlKey = config.ctrlKey,\n    metaKey = config.metaKey,\n    shiftKey = config.shiftKey,\n    type = config.type;\n  var suffix = [metaKey && \"Meta\", ctrlKey && \"Control\", shiftKey && \"Shift\", altKey && \"Alt\", key].filter(Boolean).join(\"+\");\n  return \"\".concat(type, \"-\").concat(suffix);\n}","map":{"version":3,"mappings":"AAEA;;;;;;;;;;AAUA,OAAM,SAAUA,SAAS,CAACC,EAAU,EAAEC,CAAS;EAC7C,IAAI,CAACD,EAAE,EAAE;IACP,MAAM,IAAIE,KAAK,CAAC,sDAAsD,CAAC;;EAGzE,IAAID,CAAC,GAAG,CAAC,EAAE;IACT,MAAM,IAAIE,UAAU,CAAC,2CAA2C,CAAC;;EAGnE,OAAO,UAAGH,EAAE,mBAASC,CAAC,GAAG,CAAC,CAAE;AAC9B;AAEA;;;;;;;;;;AAUA,OAAM,SAAUG,aAAa,CAC3BC,IAA4B,EAC5BC,IAAe;EAEf,OAAOD,IAAI,CAACE,GAAG,CAAY,UAACC,GAAG;IAAK,OAAC;MACnCC,QAAQ,EAAED,GAAG,CAACE,QAAQ,CAAC,QAAQ,CAAC;MAChCC,OAAO,EAAEH,GAAG,CAACE,QAAQ,CAAC,OAAO,CAAC;MAC9BE,OAAO,EAAEJ,GAAG,CAACE,QAAQ,CAAC,UAAU,CAAC;MACjCG,MAAM,EAAEL,GAAG,CAACE,QAAQ,CAAC,MAAM,CAAC;MAC5BF,GAAG,EAAEA,GAAG,CAACM,OAAO,CAAC,6BAA6B,EAAE,EAAE,CAAC;MACnDR,IAAI;KACL;EAPmC,CAOlC,CAAC;AACL;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUS,iBAAiB,CAC/BC,KAA0C,EAC1CX,IAA0B;EAElB,OAAG,GAAyCW,KAAK,IAA9C;IAAEH,MAAM,GAAiCG,KAAK,OAAtC;IAAEJ,OAAO,GAAwBI,KAAK,QAA7B;IAAEL,OAAO,GAAeK,KAAK,QAApB;IAAEP,QAAQ,GAAKO,KAAK,SAAV;EAC/C,OACEX,IAAI,CAACY,IAAI,CACP,UAACC,CAAC;IACA,QAAC,CAACV,GAAG,KAAKA,GAAG,IACbU,CAAC,CAACL,MAAM,KAAKA,MAAM,IACnBK,CAAC,CAACN,OAAO,KAAKA,OAAO,IACrBM,CAAC,CAACP,OAAO,KAAKA,OAAO,IACrBO,CAAC,CAACT,QAAQ,KAAKA,QAAQ;EAJvB,CAIuB,CAC1B,IAAI,IAAI;AAEb;AAEA;;;;;;;;AAQA,OAAM,SAAUU,uBAAuB,CAACC,MAAiB;EAC/C,OAAG,GAA+CA,MAAM,IAArD;IAAEP,MAAM,GAAuCO,MAAM,OAA7C;IAAER,OAAO,GAA8BQ,MAAM,QAApC;IAAET,OAAO,GAAqBS,MAAM,QAA3B;IAAEX,QAAQ,GAAWW,MAAM,SAAjB;IAAEd,IAAI,GAAKc,MAAM,KAAX;EACrD,IAAMC,MAAM,GAAG,CACbV,OAAO,IAAI,MAAM,EACjBC,OAAO,IAAI,SAAS,EACpBH,QAAQ,IAAI,OAAO,EACnBI,MAAM,IAAI,KAAK,EACfL,GAAG,CACJ,CACEc,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,GAAG,CAAC;EAEZ,OAAO,UAAGlB,IAAI,cAAIe,MAAM,CAAE;AAC5B","names":["getItemId","id","i","Error","RangeError","transformKeys","keys","type","map","key","shiftKey","includes","metaKey","ctrlKey","altKey","replace","getKeyboardConfig","event","find","k","getStringifiedKeyConfig","config","suffix","filter","Boolean","join"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/wia-aria/movement/utils.ts"],"sourcesContent":["import type { FocusType, KeyConfig, MovementKey } from \"./types\";\n\n/**\n * An extremely simple function that is used to generate an id for an item\n * within a list of other items.  This is generally used with list of items that\n * should have custom focus with the `aria-activedescendant` flow instead of\n * native focus.\n *\n * @param id - The base id for the container element of all the items.\n * @param i - The index of the item within the list. This number will be\n * incremented by 1 as an id to start from 1 instead of 0.\n */\nexport function getItemId(id: string, i: number): string {\n  if (!id) {\n    throw new Error(\"The id must be a string with a length greater than 0\");\n  }\n\n  if (i < 0) {\n    throw new RangeError(\"The provided index must be greater than 0\");\n  }\n\n  return `${id}-item-${i + 1}`;\n}\n\n/**\n * A small util function to transform a list of key codes into a list of\n * `KeyConfig` objects. This is useful for how I determine what behavior to\n * implement after a keydown event.\n *\n * @param keys - A list of key mappings to convert to a key object. These should\n * be things like: \"Tab\", \"Alt+Home\", \"A\", \"Shift+Alt+ArrowUp\"\n * @param type - The keyboard focus type this key should be mapped to\n * @internal\n */\nexport function transformKeys(\n  keys: readonly MovementKey[],\n  type: FocusType\n): readonly KeyConfig[] {\n  return keys.map<KeyConfig>((key) => ({\n    shiftKey: key.includes(\"Shift+\"),\n    metaKey: key.includes(\"Meta+\"),\n    ctrlKey: key.includes(\"Control+\"),\n    altKey: key.includes(\"Alt+\"),\n    key: key.replace(/(Shift|Meta|Alt|Control)\\+/g, \"\"),\n    type,\n  }));\n}\n\n/**\n * A small util get the `KeyConfig` based on the provided keys and keyboard\n * event. This ensures that the key, altKey, metaKey, and shiftKey values all\n * match.\n *\n * If a key is not found, `null` will be returned instead.\n *\n * @param event - The event to get a key mapping type for\n * @param keys - A list of key mappings to attempt to find a valid key event\n * type from.\n * @internal\n */\nexport function getKeyboardConfig(\n  event: KeyboardEvent | React.KeyboardEvent,\n  keys: readonly KeyConfig[]\n): KeyConfig | null {\n  const { key, altKey, ctrlKey, metaKey, shiftKey } = event;\n  return (\n    keys.find(\n      (k) =>\n        k.key === key &&\n        k.altKey === altKey &&\n        k.ctrlKey === ctrlKey &&\n        k.metaKey === metaKey &&\n        k.shiftKey === shiftKey\n    ) || null\n  );\n}\n\n/**\n * Creates a stringified representation of the configuration so that the config\n * can be checked in the `onChange` callback for keyboard movement. This is used\n * as the `query` attribute on the change data.\n *\n * @param config - The key config to stringify\n * @internal\n */\nexport function getStringifiedKeyConfig(config: KeyConfig): string {\n  const { key, altKey, ctrlKey, metaKey, shiftKey, type } = config;\n  const suffix = [\n    metaKey && \"Meta\",\n    ctrlKey && \"Control\",\n    shiftKey && \"Shift\",\n    altKey && \"Alt\",\n    key,\n  ]\n    .filter(Boolean)\n    .join(\"+\");\n\n  return `${type}-${suffix}`;\n}\n"]},"metadata":{},"sourceType":"module"}