{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport { ListItem } from \"@react-md/list\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\nimport { InputToggleIcon } from \"../toggle/InputToggleIcon\";\nimport { SwitchTrack } from \"../toggle/SwitchTrack\";\nvar styles = bem(\"rmd-input-toggle-menu-item\");\n/**\n * This is a low-level component that should probably not be used externally and\n * instead the `MenuItemCheckbox`, `MenuItemRadio`, or `MenuItemSwitch` should\n * be used instead.\n *\n * @see {@link MenuItemCheckbox} for checkbox examples\n * @see {@link MenuItemRadio} for radio examples\n * @see {@link MenuItemSwitch} for switch examples\n * @remarks \\@since 2.8.0\n */\nexport var MenuItemInputToggle = forwardRef(function MenuItemInputToggle(_a, nodeRef) {\n  var children = _a.children,\n    _b = _a.tabIndex,\n    tabIndex = _b === void 0 ? -1 : _b,\n    checked = _a.checked,\n    type = _a.type,\n    propIcon = _a.icon,\n    _c = _a.iconAfter,\n    iconAfter = _c === void 0 ? false : _c,\n    addon = _a.addon,\n    addonType = _a.addonType,\n    addonPosition = _a.addonPosition,\n    onClick = _a.onClick,\n    onCheckedChange = _a.onCheckedChange,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    className = _a.className,\n    _e = _a.indeterminate,\n    indeterminate = _e === void 0 ? false : _e,\n    props = __rest(_a, [\"children\", \"tabIndex\", \"checked\", \"type\", \"icon\", \"iconAfter\", \"addon\", \"addonType\", \"addonPosition\", \"onClick\", \"onCheckedChange\", \"disabled\", \"className\", \"indeterminate\"]);\n  var ref = useKeyboardFocusableElement(nodeRef);\n  var icon = useIcon(type === \"radio\" ? \"radio\" : \"checkbox\", propIcon);\n  if (type === \"switch\" && typeof propIcon === \"undefined\") {\n    icon = _jsx(SwitchTrack, {\n      checked: checked\n    });\n  } else if (icon && type !== \"switch\") {\n    icon = _jsx(\"span\", __assign({\n      className: cn(\"rmd-toggle\", styles(\"toggle\"))\n    }, {\n      children: _jsx(InputToggleIcon, __assign({\n        circle: type === \"radio\",\n        disabled: disabled,\n        overlay: true,\n        checked: checked,\n        indeterminate: indeterminate\n      }, {\n        children: icon\n      }))\n    }));\n  }\n  var leftAddon;\n  var leftAddonType;\n  var leftAddonPosition;\n  var rightAddon;\n  var rightAddonType;\n  var rightAddonPosition;\n  if (iconAfter) {\n    leftAddon = addon;\n    leftAddonType = addonType;\n    leftAddonPosition = addonPosition;\n    rightAddon = icon;\n  } else {\n    leftAddon = icon;\n    rightAddon = addon;\n    rightAddonType = addonType;\n    rightAddonPosition = addonPosition;\n  }\n  return _jsx(ListItem, __assign({}, props, {\n    disableRipple: true,\n    \"aria-disabled\": disabled || undefined,\n    \"aria-checked\": checked,\n    role: type === \"radio\" ? \"menuitemradio\" : \"menuitemcheckbox\",\n    onClick: function (event) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n      onCheckedChange(!checked, event);\n    },\n    ref: ref,\n    className: cn(styles({\n      switch: type === \"switch\"\n    }), className),\n    tabIndex: tabIndex,\n    leftAddon: leftAddon,\n    leftAddonType: leftAddonType,\n    leftAddonPosition: leftAddonPosition,\n    rightAddon: rightAddon,\n    rightAddonType: rightAddonType,\n    rightAddonPosition: rightAddonPosition\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","useIcon","ListItem","bem","useKeyboardFocusableElement","InputToggleIcon","SwitchTrack","styles","MenuItemInputToggle","_a","nodeRef","_b","tabIndex","checked","type","propIcon","_c","iconAfter","addon","addonType","addonPosition","onClick","onCheckedChange","_d","disabled","className","_e","indeterminate","props","ref","icon","_jsx","children","circle","overlay","leftAddon","leftAddonType","leftAddonPosition","rightAddon","rightAddonType","rightAddonPosition","disableRipple","undefined","role","event","switch"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/menu/MenuItemInputToggle.tsx"],"sourcesContent":["import type { HTMLAttributes, MouseEvent, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport type {\n  ListItemAddonPosition,\n  ListItemAddonType,\n  SimpleListItemProps,\n} from \"@react-md/list\";\nimport { ListItem } from \"@react-md/list\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\n\nimport type { IndeterminateCheckboxProps } from \"../toggle/Checkbox\";\nimport { InputToggleIcon } from \"../toggle/InputToggleIcon\";\nimport { SwitchTrack } from \"../toggle/SwitchTrack\";\n\nconst styles = bem(\"rmd-input-toggle-menu-item\");\n\n/**\n * @remarks \\@since 2.8.0\n * @internal\n */\ntype AllowedListItemProps = Pick<\n  SimpleListItemProps,\n  | \"disabledOpacity\"\n  | \"threeLines\"\n  | \"height\"\n  | \"children\"\n  | \"textChildren\"\n  | \"textClassName\"\n  | \"primaryText\"\n  | \"secondaryText\"\n  | \"secondaryTextClassName\"\n  | \"forceAddonWrap\"\n>;\n\n/** @remarks \\@since 2.8.0 */\nexport interface BaseMenuItemInputToggleProps\n  extends HTMLAttributes<HTMLLIElement>,\n    AllowedListItemProps {\n  /**\n   * An id required for a11y.\n   */\n  id: string;\n\n  /**\n   * Boolean if the element should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the element is currently checked.\n   */\n  checked: boolean;\n\n  /**\n   * A function to call that should updated the `checked` state to the new\n   * value.\n   */\n  onCheckedChange(checked: boolean, event: MouseEvent<HTMLLIElement>): void;\n\n  /**\n   * The icon will default to:\n   * - {@link ConfigurableIcons.radio} when the `type` is set to `\"radio\"`\n   * - {@link ConfigurableIcons.checkbox} when the `type` is set to `\"checkbox\"`\n   * - {@link SwitchTrack} when the `type` is set to `\"switch\"`\n   *\n   * If this behavior isn't preferred, you can provide your own icon with this\n   * prop.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Boolean if the `icon` prop should appear as the `rightAddon` instead of the\n   * `leftAddon` for the `ListItem`\n   */\n  iconAfter?: boolean;\n\n  /**\n   * An optional {@link ListItem} addon to display on the opposite side of the\n   * `icon`. So if the `iconAfter` prop is `false`, the `addon` will appear to\n   * the `right` while setting `iconAfter` to `true` will render the `addon` to\n   * the `left` instead.\n   */\n  addon?: ReactNode;\n\n  /**\n   * The {@link ListItemAddonType} for the `addon`.\n   */\n  addonType?: ListItemAddonType;\n\n  /**\n   * The {@link ListItemAddonPosition} for the `addon`.\n   */\n  addonPosition?: ListItemAddonPosition;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface MenuItemInputToggleProps extends BaseMenuItemInputToggleProps {\n  /**\n   * The input toggle type to render.\n   *\n   * Note for the `radio` type:\n   * If a `menu` or `menubar` contains more than one group of `menuitemradio`\n   * elements, or if the `menu` contains one group and other, unrelated menu\n   * items, authors **SHOULD** nest each set of related `menuitemradio` elements\n   * in an element using the `group` role, and authors **SHOULD** delimit the\n   * group from other menu items with an element using the separator role.\n   *\n   * @see {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio}\n   */\n  type: \"checkbox\" | \"radio\" | \"switch\";\n}\n\n/** @remarks \\@since 2.8.5 */\nexport type StrictMenuItemInputToggleProps = BaseMenuItemInputToggleProps &\n  (\n    | ({ type: \"checkbox\" } & IndeterminateCheckboxProps)\n    | { type: \"radio\" | \"switch\"; indeterminate?: never }\n  );\n\n/**\n * This is a low-level component that should probably not be used externally and\n * instead the `MenuItemCheckbox`, `MenuItemRadio`, or `MenuItemSwitch` should\n * be used instead.\n *\n * @see {@link MenuItemCheckbox} for checkbox examples\n * @see {@link MenuItemRadio} for radio examples\n * @see {@link MenuItemSwitch} for switch examples\n * @remarks \\@since 2.8.0\n */\nexport const MenuItemInputToggle = forwardRef<\n  HTMLLIElement,\n  StrictMenuItemInputToggleProps\n>(function MenuItemInputToggle(\n  {\n    children,\n    tabIndex = -1,\n    checked,\n    type,\n    icon: propIcon,\n    iconAfter = false,\n    addon,\n    addonType,\n    addonPosition,\n    onClick,\n    onCheckedChange,\n    disabled = false,\n    className,\n    indeterminate = false,\n    ...props\n  },\n  nodeRef\n) {\n  const ref = useKeyboardFocusableElement(nodeRef);\n  let icon = useIcon(type === \"radio\" ? \"radio\" : \"checkbox\", propIcon);\n  if (type === \"switch\" && typeof propIcon === \"undefined\") {\n    icon = <SwitchTrack checked={checked} />;\n  } else if (icon && type !== \"switch\") {\n    icon = (\n      <span className={cn(\"rmd-toggle\", styles(\"toggle\"))}>\n        <InputToggleIcon\n          circle={type === \"radio\"}\n          disabled={disabled}\n          overlay\n          checked={checked}\n          indeterminate={indeterminate}\n        >\n          {icon}\n        </InputToggleIcon>\n      </span>\n    );\n  }\n\n  let leftAddon: ReactNode;\n  let leftAddonType: ListItemAddonType | undefined;\n  let leftAddonPosition: ListItemAddonPosition | undefined;\n  let rightAddon: ReactNode;\n  let rightAddonType: ListItemAddonType | undefined;\n  let rightAddonPosition: ListItemAddonPosition | undefined;\n  if (iconAfter) {\n    leftAddon = addon;\n    leftAddonType = addonType;\n    leftAddonPosition = addonPosition;\n    rightAddon = icon;\n  } else {\n    leftAddon = icon;\n    rightAddon = addon;\n    rightAddonType = addonType;\n    rightAddonPosition = addonPosition;\n  }\n\n  return (\n    <ListItem\n      {...props}\n      disableRipple\n      aria-disabled={disabled || undefined}\n      aria-checked={checked}\n      role={type === \"radio\" ? \"menuitemradio\" : \"menuitemcheckbox\"}\n      onClick={(event) => {\n        onClick?.(event);\n        onCheckedChange(!checked, event);\n      }}\n      ref={ref}\n      className={cn(styles({ switch: type === \"switch\" }), className)}\n      tabIndex={tabIndex}\n      leftAddon={leftAddon}\n      leftAddonType={leftAddonType}\n      leftAddonPosition={leftAddonPosition}\n      rightAddon={rightAddon}\n      rightAddonType={rightAddonType}\n      rightAddonPosition={rightAddonPosition}\n    >\n      {children}\n    </ListItem>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}