{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"../bem\";\nvar block = bem(\"rmd-grid-list\");\nexport var GridListCell = forwardRef(function GridListCell(_a, ref) {\n  var className = _a.className,\n    children = _a.children,\n    _b = _a.square,\n    square = _b === void 0 ? false : _b,\n    _c = _a.clone,\n    clone = _c === void 0 ? false : _c,\n    props = __rest(_a, [\"className\", \"children\", \"square\", \"clone\"]);\n  var cellClassName = cn(block(\"cell\", {\n    square: square\n  }), className);\n  if (clone && isValidElement(children)) {\n    var child = Children.only(children);\n    return cloneElement(child, {\n      className: cn(cellClassName, child.props.className)\n    });\n  }\n  return _jsx(\"div\", __assign({}, props, {\n    ref: ref,\n    className: cellClassName\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAEC,cAAc,QAAQ,OAAO;AAC1E,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,GAAG,QAAQ,QAAQ;AAiB5B,IAAMC,KAAK,GAAGD,GAAG,CAAC,eAAe,CAAC;AAElC,OAAO,IAAME,YAAY,GAAGL,UAAU,CACpC,SAASK,YAAY,CACnBC,EAAgE,EAChEC,GAAG;EADD,aAAS;IAAEC,QAAQ;IAAEC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IAAEC,aAAa;IAAbC,KAAK,mBAAG,KAAK;IAAKC,KAAK,cAA9D,4CAAgE,CAAF;EAG9D,IAAMC,aAAa,GAAGZ,EAAE,CAACE,KAAK,CAAC,MAAM,EAAE;IAAEM,MAAM;EAAA,CAAE,CAAC,EAAEK,SAAS,CAAC;EAC9D,IAAIH,KAAK,IAAIX,cAAc,CAACO,QAAQ,CAAC,EAAE;IACrC,IAAMQ,KAAK,GAAGlB,QAAQ,CAACmB,IAAI,CAACT,QAAQ,CAAC;IACrC,OAAOT,YAAY,CAACiB,KAAK,EAAE;MACzBD,SAAS,EAAEb,EAAE,CAACY,aAAa,EAAEE,KAAK,CAACH,KAAK,CAACE,SAAS;KACnD,CAAC;;EAGJ,OACEG,yBAASL,KAAK;IAAEN,GAAG,EAAEA,GAAG;IAAEQ,SAAS,EAAED;EAAa;IAAAN,UAC/CA;EAAQ,GACL;AAEV,CAAC,CACF","names":["Children","cloneElement","forwardRef","isValidElement","cn","bem","block","GridListCell","_a","ref","children","_b","square","_c","clone","props","cellClassName","className","child","only","_jsx"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/layout/GridListCell.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\n\nimport { bem } from \"../bem\";\n\nexport interface GridListCellProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Boolean if the className should be cloned into the child instead of\n   * wrapping in another div. This will only work if the `children` is a single\n   * ReactElement.\n   */\n  clone?: boolean;\n\n  /**\n   * Boolean if the cell should be square by also setting the current cell size\n   * to the `height`.\n   */\n  square?: boolean;\n}\n\nconst block = bem(\"rmd-grid-list\");\n\nexport const GridListCell = forwardRef<HTMLDivElement, GridListCellProps>(\n  function GridListCell(\n    { className, children, square = false, clone = false, ...props },\n    ref\n  ) {\n    const cellClassName = cn(block(\"cell\", { square }), className);\n    if (clone && isValidElement(children)) {\n      const child = Children.only(children);\n      return cloneElement(child, {\n        className: cn(cellClassName, child.props.className),\n      });\n    }\n\n    return (\n      <div {...props} ref={ref} className={cellClassName}>\n        {children}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}