{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This small utility function will create an onKeyDown handler that allows the\n * user to \"click\" an element with the keyboard via Enter or Space.\n */\nexport function useKeyboardClickPolyfill(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    onKeyDown = _b.onKeyDown,\n    _c = _b.disabled,\n    disabled = _c === void 0 ? false : _c,\n    _d = _b.disableEnterClick,\n    disableEnterClick = _d === void 0 ? false : _d,\n    _e = _b.disableSpacebarClick,\n    disableSpacebarClick = _e === void 0 ? false : _e;\n  var ref = useRefCache({\n    onKeyDown: onKeyDown,\n    disableSpacebarClick: disableSpacebarClick,\n    disableEnterClick: disableEnterClick\n  });\n  var handleKeyDown = useCallback(function (event) {\n    var _a = ref.current,\n      onKeyDown = _a.onKeyDown,\n      disableSpacebarClick = _a.disableSpacebarClick,\n      disableEnterClick = _a.disableEnterClick;\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n    var isSpace = event.key === \" \";\n    var isEnter = event.key === \"Enter\";\n    var currentTarget = event.currentTarget;\n    var tagName = currentTarget.tagName;\n    if (!isSpace && !isEnter || isSpace && disableSpacebarClick || isEnter && disableEnterClick ||\n    // buttons and textareas, and inputs shouldn't be polyfilled\n    /BUTTON|TEXTAREA|INPUT/.test(tagName) ||\n    // native links don't click on space\n    isSpace && tagName === \"A\") {\n      return;\n    }\n    if (isSpace) {\n      // prevent default behavior of page scrolling\n      event.preventDefault();\n    }\n    // don't want parent keydown events to be triggered since this should now\n    // be a \"click\" event instead.\n    event.stopPropagation();\n    event.currentTarget.click();\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,iBAAiB;AA6B7C;;;;AAIA,OAAM,SAAUC,wBAAwB,CAAsCC,EAK5D;MAL4DC,qBAK9D,EAAE;IAJhBC,SAAS;IACTC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,yBAAyB;IAAzBC,iBAAiB,mBAAG,KAAK;IACzBC,4BAA4B;IAA5BC,oBAAoB,mBAAG,KAAK;EAE5B,IAAMC,GAAG,GAAGX,WAAW,CAAC;IACtBI,SAAS;IACTM,oBAAoB;IACpBF,iBAAiB;GAClB,CAAC;EAEF,IAAMI,aAAa,GAAGb,WAAW,CAAC,UAACc,KAA6B;IACxD,SAAyDF,GAAG,CAACG,OAAO;MAAlEV,SAAS;MAAEM,oBAAoB;MAAEF,iBAAiB,uBAAgB;IAC1E,IAAIJ,SAAS,EAAE;MACbA,SAAS,CAACS,KAAK,CAAC;;IAGlB,IAAME,OAAO,GAAGF,KAAK,CAACG,GAAG,KAAK,GAAG;IACjC,IAAMC,OAAO,GAAGJ,KAAK,CAACG,GAAG,KAAK,OAAO;IAC7B,iBAAa,GAAKH,KAAK,cAAV;IACb,WAAO,GAAKK,aAAa,QAAlB;IACf,IACG,CAACH,OAAO,IAAI,CAACE,OAAO,IACpBF,OAAO,IAAIL,oBAAqB,IAChCO,OAAO,IAAIT,iBAAkB;IAC9B;IACA,uBAAuB,CAACW,IAAI,CAACC,OAAO,CAAC;IACrC;IACCL,OAAO,IAAIK,OAAO,KAAK,GAAI,EAC5B;MACA;;IAGF,IAAIL,OAAO,EAAE;MACX;MACAF,KAAK,CAACQ,cAAc,EAAE;;IAGxB;IACA;IACAR,KAAK,CAACS,eAAe,EAAE;IACvBT,KAAK,CAACK,aAAa,CAACK,KAAK,EAAE;IAC3B;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOjB,QAAQ,GAAGF,SAAS,GAAGQ,aAAa;AAC7C","names":["useCallback","useRefCache","useKeyboardClickPolyfill","_a","_b","onKeyDown","_c","disabled","_d","disableEnterClick","_e","disableSpacebarClick","ref","handleKeyDown","event","current","isSpace","key","isEnter","currentTarget","test","tagName","preventDefault","stopPropagation","click"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/states/src/useKeyboardClickPolyfill.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n\ninterface Options<E extends HTMLElement> {\n  /**\n   * Boolean if the keyboard click handler should be disabled. This will make it\n   * so the return value is just the provided `onKeyDown` handler or undefined\n   * if it was omitted\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the element does not need the Enter key polyfilled. This should\n   * normally be set to `true` for `<label>` elements.\n   */\n  disableEnterClick?: boolean;\n\n  /**\n   * Boolean if the user should not be able to click the element with the space\n   * key. This should normally only be set to `true` for link elements.\n   */\n  disableSpacebarClick?: boolean;\n\n  /**\n   * An optional onKeyDown event handler that should be merged with the keyboard\n   * click polyfill\n   */\n  onKeyDown?: React.KeyboardEventHandler<E>;\n}\n\n/**\n * This small utility function will create an onKeyDown handler that allows the\n * user to \"click\" an element with the keyboard via Enter or Space.\n */\nexport function useKeyboardClickPolyfill<E extends HTMLElement = HTMLElement>({\n  onKeyDown,\n  disabled = false,\n  disableEnterClick = false,\n  disableSpacebarClick = false,\n}: Options<E> = {}): React.KeyboardEventHandler<E> | undefined {\n  const ref = useRefCache({\n    onKeyDown,\n    disableSpacebarClick,\n    disableEnterClick,\n  });\n\n  const handleKeyDown = useCallback((event: React.KeyboardEvent<E>) => {\n    const { onKeyDown, disableSpacebarClick, disableEnterClick } = ref.current;\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    const isSpace = event.key === \" \";\n    const isEnter = event.key === \"Enter\";\n    const { currentTarget } = event;\n    const { tagName } = currentTarget;\n    if (\n      (!isSpace && !isEnter) ||\n      (isSpace && disableSpacebarClick) ||\n      (isEnter && disableEnterClick) ||\n      // buttons and textareas, and inputs shouldn't be polyfilled\n      /BUTTON|TEXTAREA|INPUT/.test(tagName) ||\n      // native links don't click on space\n      (isSpace && tagName === \"A\")\n    ) {\n      return;\n    }\n\n    if (isSpace) {\n      // prevent default behavior of page scrolling\n      event.preventDefault();\n    }\n\n    // don't want parent keydown events to be triggered since this should now\n    // be a \"click\" event instead.\n    event.stopPropagation();\n    event.currentTarget.click();\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return disabled ? onKeyDown : handleKeyDown;\n}\n"]},"metadata":{},"sourceType":"module"}