{"ast":null,"code":"import { useEffect } from \"react\";\nimport { delegateEvent } from \"../events/utils\";\nimport { useRefCache } from \"../useRefCache\";\n/**\n * This is a simple hook that will attach a throttled resize event listener when\n * mounted, and detach when it unmounts.\n *\n * This hook only works for entire app resize events. If you are looking for\n * specific element resize events, check out the `ResizeObserver` component or\n * `useResizeObserver` hook instead.\n */\nexport function useResizeListener(_a) {\n  var onResize = _a.onResize,\n    options = _a.options,\n    immediate = _a.immediate,\n    _b = _a.enabled,\n    enabled = _b === void 0 ? true : _b;\n  var callback = useRefCache(onResize);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    var eventHandler = delegateEvent(\"resize\", window, true, options);\n    var handler = function (event) {\n      return callback.current(event);\n    };\n    eventHandler.add(handler);\n    if (immediate && typeof window !== \"undefined\") {\n      window.dispatchEvent(new UIEvent(\"resize\"));\n    }\n    return function () {\n      eventHandler.remove(handler);\n    };\n    // disabled since useRefCache for callback and don't want immediate to\n    // re-trigger it.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, enabled]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,WAAW,QAAQ,gBAAgB;AA6B5C;;;;;;;;AAQA,OAAM,SAAUC,iBAAiB,CAACC,EAKV;MAJtBC,QAAQ;IACRC,OAAO;IACPC,SAAS;IACTC,eAAc;IAAdC,OAAO,mBAAG,IAAI;EAEd,IAAMC,QAAQ,GAAGR,WAAW,CAACG,QAAQ,CAAC;EACtCL,SAAS,CAAC;IACR,IAAI,CAACS,OAAO,EAAE;MACZ;;IAGF,IAAME,YAAY,GAAGV,aAAa,CAAC,QAAQ,EAAEW,MAAM,EAAE,IAAI,EAAEN,OAAO,CAAC;IACnE,IAAMO,OAAO,GAAG,UAACC,KAAY;MAAW,eAAQ,CAACC,OAAO,CAACD,KAAK,CAAC;IAAvB,CAAuB;IAC/DH,YAAY,CAACK,GAAG,CAACH,OAAO,CAAC;IAEzB,IAAIN,SAAS,IAAI,OAAOK,MAAM,KAAK,WAAW,EAAE;MAC9CA,MAAM,CAACK,aAAa,CAAC,IAAIC,OAAO,CAAC,QAAQ,CAAC,CAAC;;IAG7C,OAAO;MACLP,YAAY,CAACQ,MAAM,CAACN,OAAO,CAAC;IAC9B,CAAC;IACD;IACA;IACA;EACF,CAAC,EAAE,CAACP,OAAO,EAAEG,OAAO,CAAC,CAAC;AACxB","names":["useEffect","delegateEvent","useRefCache","useResizeListener","_a","onResize","options","immediate","_b","enabled","callback","eventHandler","window","handler","event","current","add","dispatchEvent","UIEvent","remove"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/sizing/useResizeListener.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { delegateEvent } from \"../events/utils\";\nimport { useRefCache } from \"../useRefCache\";\n\nexport interface ResizeListenerOptions {\n  /**\n   * A function to call when the app is resized.\n   */\n  onResize: EventListener;\n\n  /**\n   * Any event listener options to use when attaching the event.\n   */\n  options?: boolean | AddEventListenerOptions;\n\n  /**\n   * Boolean if the resize event handler should be called immediately once the\n   * component is mounted. The default behavior will be to only call the\n   * `onResize` event immediately client side and can never be invoked server\n   * side since it resize on the `window` to dispatch a `UIEvent`.\n   */\n  immediate?: boolean;\n\n  /**\n   * Boolean if the resize observer should be enabled. You can swap this boolean\n   * to `true` or `false` to add/remove the event listeners. The event listeners\n   * will *always* be removed when the parent component is unmounted though.\n   */\n  enabled?: boolean;\n}\n\n/**\n * This is a simple hook that will attach a throttled resize event listener when\n * mounted, and detach when it unmounts.\n *\n * This hook only works for entire app resize events. If you are looking for\n * specific element resize events, check out the `ResizeObserver` component or\n * `useResizeObserver` hook instead.\n */\nexport function useResizeListener({\n  onResize,\n  options,\n  immediate,\n  enabled = true,\n}: ResizeListenerOptions): void {\n  const callback = useRefCache(onResize);\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const eventHandler = delegateEvent(\"resize\", window, true, options);\n    const handler = (event: Event): void => callback.current(event);\n    eventHandler.add(handler);\n\n    if (immediate && typeof window !== \"undefined\") {\n      window.dispatchEvent(new UIEvent(\"resize\"));\n    }\n\n    return () => {\n      eventHandler.remove(handler);\n    };\n    // disabled since useRefCache for callback and don't want immediate to\n    // re-trigger it.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, enabled]);\n}\n"]},"metadata":{},"sourceType":"module"}