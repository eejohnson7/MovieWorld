{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { useMenuBarContext } from \"./MenuBarProvider\";\nimport { useMenuBarWidgetFocusId } from \"./MenuBarWidget\";\nimport { MenuItem } from \"./MenuItem\";\n/**\n * This is just an internal component that handles rendering a submenu as a\n * menuitem for a `DropdownMenu` with a conditional dropdown icon.\n *\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport var MenuItemButton = forwardRef(function MenuItemButton(_a, ref) {\n  var id = _a.id,\n    children = _a.children,\n    propRightAddon = _a.rightAddon,\n    _b = _a.disableDropdownIcon,\n    disableDropdownIcon = _b === void 0 ? typeof propRightAddon !== \"undefined\" : _b,\n    visible = _a.visible,\n    tabIndex = _a.tabIndex,\n    iconRotatorProps = _a.iconRotatorProps,\n    props = __rest(_a, [\"id\", \"children\", \"rightAddon\", \"disableDropdownIcon\", \"visible\", \"tabIndex\", \"iconRotatorProps\"]);\n  var root = useMenuBarContext().root;\n  var focusId = useMenuBarWidgetFocusId();\n  var dropdownIcon = useIcon(root ? \"dropdown\" : \"forward\");\n  var rightAddon = propRightAddon;\n  if (!disableDropdownIcon) {\n    rightAddon = _jsx(IconRotator, __assign({}, iconRotatorProps, {\n      rotated: visible\n    }, {\n      children: dropdownIcon\n    }));\n  }\n  return _jsx(MenuItem, __assign({}, props, {\n    id: id,\n    ref: ref,\n    rightAddon: rightAddon,\n    tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : root && id === focusId ? 0 : -1\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AAErD,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,uBAAuB,QAAQ,iBAAiB;AACzD,SAASC,QAAQ,QAAQ,YAAY;AAgBrC;;;;;;;AAOA,OAAO,IAAMC,cAAc,GAAGN,UAAU,CACtC,SAASM,cAAc,CACrBC,EASC,EACDC,GAAG;EATD,MAAE;IACFC,QAAQ;IACIC,cAAc;IAC1BC,2BAA2D;IAA3DC,mBAAmB,mBAAG,OAAOF,cAAc,KAAK,WAAW;IAC3DG,OAAO;IACPC,QAAQ;IACRC,gBAAgB;IACbC,KAAK,cARV,kGASC,CADS;EAIF,QAAI,GAAKb,iBAAiB,EAAE,KAAxB;EACZ,IAAMc,OAAO,GAAGb,uBAAuB,EAAE;EACzC,IAAMc,YAAY,GAAGhB,OAAO,CAACiB,IAAI,GAAG,UAAU,GAAG,SAAS,CAAC;EAE3D,IAAIC,UAAU,GAAGV,cAAc;EAC/B,IAAI,CAACE,mBAAmB,EAAE;IACxBQ,UAAU,GACRC,KAACpB,WAAW,eAAKc,gBAAgB;MAAEO,OAAO,EAAET;IAAO;MAAAJ,UAChDS;IAAY,GAEhB;;EAGH,OACEG,KAAChB,QAAQ,eACHW,KAAK;IACTO,EAAE,EAAEA,EAAE;IACNf,GAAG,EAAEA,GAAG;IACRY,UAAU,EAAEA,UAAU;IACtBN,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAKK,IAAI,IAAII,EAAE,KAAKN,OAAO,GAAG,CAAC,GAAG,CAAC;EAAE;IAAAR,UAEtDA;EAAQ,GACA;AAEf,CAAC,CACF","names":["forwardRef","IconRotator","useIcon","useMenuBarContext","useMenuBarWidgetFocusId","MenuItem","MenuItemButton","_a","ref","children","propRightAddon","_b","disableDropdownIcon","visible","tabIndex","iconRotatorProps","props","focusId","dropdownIcon","root","rightAddon","_jsx","rotated","id"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/menu/src/MenuItemButton.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\n\nimport { useMenuBarContext } from \"./MenuBarProvider\";\nimport { useMenuBarWidgetFocusId } from \"./MenuBarWidget\";\nimport { MenuItem } from \"./MenuItem\";\nimport type { BaseMenuItemButtonProps } from \"./types\";\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport interface MenuItemButtonProps extends BaseMenuItemButtonProps {\n  /**\n   * Boolean if the menu is currently visible which will rotate the dropdown\n   * icon when the {@link BaseDropdownMenuItemProps.disableDropdownIcon} is not\n   * `true`.\n   */\n  visible: boolean;\n}\n\n/**\n * This is just an internal component that handles rendering a submenu as a\n * menuitem for a `DropdownMenu` with a conditional dropdown icon.\n *\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport const MenuItemButton = forwardRef<HTMLLIElement, MenuItemButtonProps>(\n  function MenuItemButton(\n    {\n      id,\n      children,\n      rightAddon: propRightAddon,\n      disableDropdownIcon = typeof propRightAddon !== \"undefined\",\n      visible,\n      tabIndex,\n      iconRotatorProps,\n      ...props\n    },\n    ref\n  ) {\n    const { root } = useMenuBarContext();\n    const focusId = useMenuBarWidgetFocusId();\n    const dropdownIcon = useIcon(root ? \"dropdown\" : \"forward\");\n\n    let rightAddon = propRightAddon;\n    if (!disableDropdownIcon) {\n      rightAddon = (\n        <IconRotator {...iconRotatorProps} rotated={visible}>\n          {dropdownIcon}\n        </IconRotator>\n      );\n    }\n\n    return (\n      <MenuItem\n        {...props}\n        id={id}\n        ref={ref}\n        rightAddon={rightAddon}\n        tabIndex={tabIndex ?? (root && id === focusId ? 0 : -1)}\n      >\n        {children}\n      </MenuItem>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}