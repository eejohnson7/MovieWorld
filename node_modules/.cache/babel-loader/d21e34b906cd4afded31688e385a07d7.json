{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback } from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\nexport var LayoutCloseNavigationButton = forwardRef(function LayoutCloseNavigationButton(_a, ref) {\n  var propId = _a.id,\n    ariaLabelledBy = _a[\"aria-labelledby\"],\n    _b = _a[\"aria-label\"],\n    ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Hide Navigation\" : _b,\n    onClick = _a.onClick,\n    _c = _a.first,\n    first = _c === void 0 ? true : _c,\n    _d = _a.last,\n    last = _d === void 0 ? true : _d,\n    _e = _a.buttonType,\n    buttonType = _e === void 0 ? \"icon\" : _e,\n    propChildren = _a.children,\n    rendered = _a.rendered,\n    props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"onClick\", \"first\", \"last\", \"buttonType\", \"children\", \"rendered\"]);\n  var children = useIcon(\"back\", propChildren);\n  var _f = useLayoutConfig(),\n    baseId = _f.baseId,\n    layout = _f.layout,\n    hideNav = _f.hideNav;\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      onClick(event);\n    }\n    hideNav();\n  }, [onClick, hideNav]);\n  var id = propId !== null && propId !== void 0 ? propId : \"\".concat(baseId, \"-nav-x\");\n  var isRendered = rendered !== null && rendered !== void 0 ? rendered : isToggleableLayout(layout);\n  if (!isRendered) {\n    return null;\n  }\n  return _jsx(AppBarAction, __assign({}, props, {\n    id: id,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ref: ref,\n    first: first,\n    last: last,\n    buttonType: buttonType,\n    onClick: handleClick\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAE/C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,OAAO,QAAQ,gBAAgB;AAExC,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,kBAAkB,QAAQ,SAAS;AAU5C;;;;AAIA,OAAO,IAAMC,2BAA2B,GAAGN,UAAU,CAGnD,SAASM,2BAA2B,CACpCC,EAWC,EACDC,GAAG;EAXD,IAAIC,MAAM;IACSC,cAAc;IACjCC,qBAAwE;IAA1DC,SAAS,mBAAGF,cAAc,GAAGG,SAAS,GAAG,iBAAiB;IACxEC,OAAO;IACPC,aAAY;IAAZC,KAAK,mBAAG,IAAI;IACZC,YAAW;IAAXC,IAAI,mBAAG,IAAI;IACXC,kBAAmB;IAAnBC,UAAU,mBAAG,MAAM;IACTC,YAAY;IACtBC,QAAQ;IACLC,KAAK,cAVV,yGAWC,CADS;EAIV,IAAMC,QAAQ,GAAGrB,OAAO,CAAC,MAAM,EAAEkB,YAAY,CAAC;EACxC,SAA8BjB,eAAe,EAAE;IAA7CqB,MAAM;IAAEC,MAAM;IAAEC,OAAO,aAAsB;EACrD,IAAMC,WAAW,GAAG3B,WAAW,CAC7B,UAAC4B,KAAoC;IACnC,IAAIf,OAAO,EAAE;MACXA,OAAO,CAACe,KAAK,CAAC;;IAGhBF,OAAO,EAAE;EACX,CAAC,EACD,CAACb,OAAO,EAAEa,OAAO,CAAC,CACnB;EAED,IAAMG,EAAE,GAAGrB,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,UAAGgB,MAAM,WAAQ;EACtC,IAAMM,UAAU,GAAGT,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIjB,kBAAkB,CAACqB,MAAM,CAAC;EACzD,IAAI,CAACK,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,OACEC,KAAC9B,YAAY,eACPqB,KAAK;IACTO,EAAE,EAAEA,EAAE;IAAA,cACMlB,SAAS;IAAA,mBACJF,cAAc;IAC/BF,GAAG,EAAEA,GAAG;IACRQ,KAAK,EAAEA,KAAK;IACZE,IAAI,EAAEA,IAAI;IACVE,UAAU,EAAEA,UAAU;IACtBN,OAAO,EAAEc;EAAW;IAAAJ,UAEnBA;EAAQ,GACI;AAEnB,CAAC,CAAC","names":["forwardRef","useCallback","AppBarAction","useIcon","useLayoutConfig","isToggleableLayout","LayoutCloseNavigationButton","_a","ref","propId","ariaLabelledBy","_b","ariaLabel","undefined","onClick","_c","first","_d","last","_e","buttonType","propChildren","rendered","props","children","baseId","layout","hideNav","handleClick","event","id","isRendered","_jsx"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/layout/src/LayoutCloseNavigationButton.tsx"],"sourcesContent":["import type { MouseEvent } from \"react\";\nimport { forwardRef, useCallback } from \"react\";\nimport type { AppBarActionProps } from \"@react-md/app-bar\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\n\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n\nexport interface LayoutCloseNavigationButtonProps extends AppBarActionProps {\n  /**\n   * Boolean if the button should be rendered. If this is omitted, it will only\n   * be rendered for toggleable layouts.\n   */\n  rendered?: boolean;\n}\n\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\nexport const LayoutCloseNavigationButton = forwardRef<\n  HTMLButtonElement,\n  LayoutCloseNavigationButtonProps\n>(function LayoutCloseNavigationButton(\n  {\n    id: propId,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel = ariaLabelledBy ? undefined : \"Hide Navigation\",\n    onClick,\n    first = true,\n    last = true,\n    buttonType = \"icon\",\n    children: propChildren,\n    rendered,\n    ...props\n  },\n  ref\n) {\n  const children = useIcon(\"back\", propChildren);\n  const { baseId, layout, hideNav } = useLayoutConfig();\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      hideNav();\n    },\n    [onClick, hideNav]\n  );\n\n  const id = propId ?? `${baseId}-nav-x`;\n  const isRendered = rendered ?? isToggleableLayout(layout);\n  if (!isRendered) {\n    return null;\n  }\n\n  return (\n    <AppBarAction\n      {...props}\n      id={id}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      first={first}\n      last={last}\n      buttonType={buttonType}\n      onClick={handleClick}\n    >\n      {children}\n    </AppBarAction>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}