{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { nearest } from \"@react-md/utils\";\nimport { DEFAULT_SLIDER_MAX, DEFAULT_SLIDER_MIN, DEFAULT_SLIDER_STEP } from \"./constants\";\nimport { getJumpValue, getSteps } from \"./utils\";\nvar noop = function () {\n  // do nothing\n};\n/**\n * This hook is used to control the value and behavior of the `Slider`\n * component. The first argument will contain the current slider value while\n * the second argument will be all the props required to control the `Slider`\n * component.\n *\n * @param defaultValue - An optional default value to use for the slider. This\n * will default to the `min` option when undefined.\n * @param options - An object containing the `min` and `max` values allowed for\n * the slider as well as a `step` to indicate valid values between the `min` and\n * `max`.\n * @returns an ordered list containing the current value followed by the\n * `Slider` props\n * @remarks \\@since 2.5.0\n */\nexport function useSlider(defaultValue, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.min,\n    min = _c === void 0 ? DEFAULT_SLIDER_MIN : _c,\n    _d = _b.max,\n    max = _d === void 0 ? DEFAULT_SLIDER_MAX : _d,\n    _e = _b.step,\n    step = _e === void 0 ? DEFAULT_SLIDER_STEP : _e,\n    propJump = _b.jump,\n    _f = _b.updateOn,\n    updateOn = _f === void 0 ? \"change\" : _f,\n    _g = _b.onChange,\n    onChange = _g === void 0 ? noop : _g;\n  var jump = useMemo(function () {\n    return getJumpValue(min, max, step, propJump);\n  }, [min, max, step, propJump]);\n  // since the `currentValue` is a ref, this state is used to force a re-render\n  // to get the updated value from the ref.\n  var _h = __read(useState([]), 2),\n    hack = _h[1];\n  var _j = __read(useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : min), 2),\n    value = _j[0],\n    setValue = _j[1];\n  var currentValue = useRef(value);\n  var increment = useCallback(function () {\n    setValue(function (prevValue) {\n      return Math.max(min, Math.min(max, prevValue + step));\n    });\n  }, [min, max, step]);\n  var incrementJump = useCallback(function () {\n    setValue(function (prevValue) {\n      return Math.max(min, Math.min(max, prevValue + jump));\n    });\n  }, [min, max, jump]);\n  var decrement = useCallback(function () {\n    setValue(function (prevValue) {\n      return Math.max(min, Math.min(max, prevValue - step));\n    });\n  }, [min, max, step]);\n  var decrementJump = useCallback(function () {\n    setValue(function (prevValue) {\n      return Math.max(min, Math.min(max, prevValue - jump));\n    });\n  }, [min, max, jump]);\n  var minimum = useCallback(function () {\n    setValue(min);\n  }, [min]);\n  var maximum = useCallback(function () {\n    setValue(max);\n  }, [max]);\n  var persist = useCallback(function () {\n    if (currentValue.current === value) {\n      return;\n    }\n    onChange(value);\n    currentValue.current = value;\n    hack([]);\n  }, [onChange, value]);\n  var prev = useRef({\n    min: min,\n    max: max,\n    step: step\n  });\n  useEffect(function () {\n    if (prev.current.min !== min || prev.current.max !== max || prev.current.step !== step) {\n      // ensure that if the `min`, `max`, or `step` value changes that the value\n      // is updated as well. Without this, there will be a runtime error if the\n      // value is not within the new range.\n      prev.current = {\n        min: min,\n        max: max,\n        step: step\n      };\n      var nextValue = nearest(value, min, max, getSteps(min, max, step));\n      currentValue.current = nextValue;\n      setValue(nextValue);\n    }\n  }, [min, max, step, value]);\n  if (updateOn === \"change\" && currentValue.current !== value) {\n    currentValue.current = value;\n  }\n  return [currentValue.current, {\n    min: min,\n    max: max,\n    step: step,\n    value: value,\n    increment: increment,\n    incrementJump: incrementJump,\n    decrement: decrement,\n    decrementJump: decrementJump,\n    minimum: minimum,\n    maximum: maximum,\n    persist: persist,\n    setValue: setValue\n  }];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useMemo","useRef","useState","nearest","DEFAULT_SLIDER_MAX","DEFAULT_SLIDER_MIN","DEFAULT_SLIDER_STEP","getJumpValue","getSteps","noop","useSlider","defaultValue","_a","_b","_c","min","_d","max","_e","step","propJump","_f","updateOn","_g","onChange","jump","hack","value","setValue","currentValue","increment","prevValue","Math","incrementJump","decrement","decrementJump","minimum","maximum","persist","current","prev","nextValue"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/slider/useSlider.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { nearest } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_SLIDER_MAX,\n  DEFAULT_SLIDER_MIN,\n  DEFAULT_SLIDER_STEP,\n} from \"./constants\";\nimport type {\n  DefinedSliderValueOptions,\n  SliderControls,\n  SliderDefaultValue,\n  SliderValue,\n  SliderStepOptions,\n} from \"./types\";\nimport { getJumpValue, getSteps } from \"./utils\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderRequiredProps\n  extends SliderControls,\n    DefinedSliderValueOptions {\n  /**\n   * The current value of the slider.\n   */\n  value: SliderValue;\n}\n\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type SliderValueReturnType = readonly [SliderValue, SliderRequiredProps];\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface UseSliderOptions extends SliderStepOptions {\n  /**\n   * An optional callback that will be triggered when the value has changed when\n   * the `updateOn` behavior is set to `\"blur\"`. When the `updateOn` behavior is\n   * set to `\"change\"` (default), this will do nothing since the return value\n   * from the hook will always be the latest value.\n   */\n  onChange?(value: SliderValue): void;\n}\n\n/**\n * This hook is used to control the value and behavior of the `Slider`\n * component. The first argument will contain the current slider value while\n * the second argument will be all the props required to control the `Slider`\n * component.\n *\n * @param defaultValue - An optional default value to use for the slider. This\n * will default to the `min` option when undefined.\n * @param options - An object containing the `min` and `max` values allowed for\n * the slider as well as a `step` to indicate valid values between the `min` and\n * `max`.\n * @returns an ordered list containing the current value followed by the\n * `Slider` props\n * @remarks \\@since 2.5.0\n */\nexport function useSlider(\n  defaultValue?: SliderDefaultValue,\n  {\n    min = DEFAULT_SLIDER_MIN,\n    max = DEFAULT_SLIDER_MAX,\n    step = DEFAULT_SLIDER_STEP,\n    jump: propJump,\n    updateOn = \"change\",\n    onChange = noop,\n  }: UseSliderOptions = {}\n): SliderValueReturnType {\n  const jump = useMemo(\n    () => getJumpValue(min, max, step, propJump),\n    [min, max, step, propJump]\n  );\n\n  // since the `currentValue` is a ref, this state is used to force a re-render\n  // to get the updated value from the ref.\n  const [, hack] = useState([]);\n  const [value, setValue] = useState(defaultValue ?? min);\n  const currentValue = useRef(value);\n\n  const increment = useCallback(() => {\n    setValue((prevValue) => Math.max(min, Math.min(max, prevValue + step)));\n  }, [min, max, step]);\n  const incrementJump = useCallback(() => {\n    setValue((prevValue) => Math.max(min, Math.min(max, prevValue + jump)));\n  }, [min, max, jump]);\n  const decrement = useCallback(() => {\n    setValue((prevValue) => Math.max(min, Math.min(max, prevValue - step)));\n  }, [min, max, step]);\n  const decrementJump = useCallback(() => {\n    setValue((prevValue) => Math.max(min, Math.min(max, prevValue - jump)));\n  }, [min, max, jump]);\n  const minimum = useCallback(() => {\n    setValue(min);\n  }, [min]);\n  const maximum = useCallback(() => {\n    setValue(max);\n  }, [max]);\n\n  const persist = useCallback(() => {\n    if (currentValue.current === value) {\n      return;\n    }\n\n    onChange(value);\n    currentValue.current = value;\n    hack([]);\n  }, [onChange, value]);\n\n  const prev = useRef({ min, max, step });\n  useEffect(() => {\n    if (\n      prev.current.min !== min ||\n      prev.current.max !== max ||\n      prev.current.step !== step\n    ) {\n      // ensure that if the `min`, `max`, or `step` value changes that the value\n      // is updated as well. Without this, there will be a runtime error if the\n      // value is not within the new range.\n      prev.current = { min, max, step };\n      const nextValue = nearest(value, min, max, getSteps(min, max, step));\n      currentValue.current = nextValue;\n      setValue(nextValue);\n    }\n  }, [min, max, step, value]);\n\n  if (updateOn === \"change\" && currentValue.current !== value) {\n    currentValue.current = value;\n  }\n\n  return [\n    currentValue.current,\n    {\n      min,\n      max,\n      step,\n      value,\n      increment,\n      incrementJump,\n      decrement,\n      decrementJump,\n      minimum,\n      maximum,\n      persist,\n      setValue,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}