{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useState } from \"react\";\n/**\n * A hook that implements the base functionality for expanding different tree\n * items.\n *\n * @param defaultExpandedIds - Either a list of tree item ids to be expanded by\n * default or a function that will return the list of tree item ids to be\n * expanded by default\n * @returns An object containing props that can be passed to the `Tree`\n * component to handle the expansion state within the tree.\n */\nexport function useTreeItemExpansion(defaultExpandedIds) {\n  var _a = __read(useState(defaultExpandedIds), 2),\n    expandedIds = _a[0],\n    setExpandedIds = _a[1];\n  var onItemExpansion = useCallback(function (itemId, expanded) {\n    setExpandedIds(function (expandedIds) {\n      var i = expandedIds.indexOf(itemId);\n      if (i === -1 && expanded) {\n        return __spreadArray(__spreadArray([], __read(expandedIds), false), [itemId], false);\n      }\n      if (i !== -1 && !expanded) {\n        var nextIds = expandedIds.slice();\n        nextIds.splice(i, 1);\n        return nextIds;\n      }\n      return expandedIds;\n    });\n  }, []);\n  return {\n    expandedIds: expandedIds,\n    onItemExpansion: onItemExpansion,\n    onMultiItemExpansion: setExpandedIds\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAI7C;;;;;;;;;;AAUA,OAAM,SAAUC,oBAAoB,CAClCC,kBAAqD;EAE/C,gBAAgCF,QAAQ,CAACE,kBAAkB,CAAC;IAA3DC,WAAW;IAAEC,cAAc,QAAgC;EAClE,IAAMC,eAAe,GAAGN,WAAW,CACjC,UAACO,MAAkB,EAAEC,QAAiB;IACpCH,cAAc,CAAC,UAACD,WAAW;MACzB,IAAMK,CAAC,GAAGL,WAAW,CAACM,OAAO,CAACH,MAAM,CAAC;MACrC,IAAIE,CAAC,KAAK,CAAC,CAAC,IAAID,QAAQ,EAAE;QACxB,8CAAWJ,WAAW,YAAEG,MAAM;;MAGhC,IAAIE,CAAC,KAAK,CAAC,CAAC,IAAI,CAACD,QAAQ,EAAE;QACzB,IAAMG,OAAO,GAAGP,WAAW,CAACQ,KAAK,EAAE;QACnCD,OAAO,CAACE,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;QACpB,OAAOE,OAAO;;MAGhB,OAAOP,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC,EACD,EAAE,CACH;EAED,OAAO;IACLA,WAAW;IACXE,eAAe;IACfQ,oBAAoB,EAAET;GACvB;AACH","names":["useCallback","useState","useTreeItemExpansion","defaultExpandedIds","expandedIds","setExpandedIds","onItemExpansion","itemId","expanded","i","indexOf","nextIds","slice","splice","onMultiItemExpansion"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tree/src/useTreeItemExpansion.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport type { ExpandedIds, TreeItemExpansion, TreeItemId } from \"./types\";\n\n/**\n * A hook that implements the base functionality for expanding different tree\n * items.\n *\n * @param defaultExpandedIds - Either a list of tree item ids to be expanded by\n * default or a function that will return the list of tree item ids to be\n * expanded by default\n * @returns An object containing props that can be passed to the `Tree`\n * component to handle the expansion state within the tree.\n */\nexport function useTreeItemExpansion(\n  defaultExpandedIds: ExpandedIds | (() => ExpandedIds)\n): TreeItemExpansion {\n  const [expandedIds, setExpandedIds] = useState(defaultExpandedIds);\n  const onItemExpansion = useCallback(\n    (itemId: TreeItemId, expanded: boolean) => {\n      setExpandedIds((expandedIds) => {\n        const i = expandedIds.indexOf(itemId);\n        if (i === -1 && expanded) {\n          return [...expandedIds, itemId];\n        }\n\n        if (i !== -1 && !expanded) {\n          const nextIds = expandedIds.slice();\n          nextIds.splice(i, 1);\n          return nextIds;\n        }\n\n        return expandedIds;\n      });\n    },\n    []\n  );\n\n  return {\n    expandedIds,\n    onItemExpansion,\n    onMultiItemExpansion: setExpandedIds,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}