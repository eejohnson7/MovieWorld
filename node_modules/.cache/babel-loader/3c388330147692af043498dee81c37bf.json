{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-tab-panel\");\nvar prefix = \"rmd-tab-panel\";\n/** @remarks \\@since 4.0.0 */\nexport var DEFAULT_TABPANEL_TIMEOUT = 150;\n/** @remarks \\@since 4.0.0 */\nexport var DEFAULT_TABPANEL_CLASSNAMES = {\n  enter: \"\".concat(prefix, \"--enter\"),\n  enterActive: \"\".concat(prefix, \"--enter-active \").concat(prefix, \"--animate\"),\n  exit: \"\".concat(prefix, \"--exit\"),\n  exitActive: \"\".concat(prefix, \"--exit-active \").concat(prefix, \"--animate\")\n};\n/**\n * This component renders an accessible tab panel with enter and exit\n * animations.  This probably should only be used internally as it relies on the\n * `TabPanels` component along with the `TransitionGroup` from\n * `react-transition-group` to work as expected.\n */\nexport var TabPanel = forwardRef(function TabPanel(_a, nodeRef) {\n  var propClassName = _a.className,\n    appear = _a.appear,\n    enter = _a.enter,\n    exit = _a.exit,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    _b = _a.timeout,\n    timeout = _b === void 0 ? DEFAULT_TABPANEL_TIMEOUT : _b,\n    _c = _a.classNames,\n    classNames = _c === void 0 ? DEFAULT_TABPANEL_CLASSNAMES : _c,\n    _d = _a.transitionIn,\n    transitionIn = _d === void 0 ? true : _d,\n    temporary = _a.temporary,\n    children = _a.children,\n    hidden = _a.hidden,\n    props = __rest(_a, [\"className\", \"appear\", \"enter\", \"exit\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"timeout\", \"classNames\", \"transitionIn\", \"temporary\", \"children\", \"hidden\"]);\n  var _e = useCSSTransition({\n      nodeRef: nodeRef,\n      timeout: timeout,\n      classNames: classNames,\n      className: cn(block(), propClassName),\n      transitionIn: transitionIn && !hidden,\n      appear: appear,\n      enter: enter,\n      exit: exit,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      temporary: temporary\n    }),\n    elementProps = _e.elementProps,\n    rendered = _e.rendered;\n  if (!rendered) {\n    return null;\n  }\n  return _jsx(\"div\", __assign({}, props, elementProps, {\n    role: \"tabpanel\",\n    hidden: hidden\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAO3B,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,GAAG,QAAQ,iBAAiB;AAgCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,eAAe,CAAC;AAClC,IAAME,MAAM,GAAG,eAAe;AAE9B;AACA,OAAO,IAAMC,wBAAwB,GAAsB,GAAG;AAE9D;AACA,OAAO,IAAMC,2BAA2B,GAAsC;EAC5EC,KAAK,EAAE,UAAGH,MAAM,YAAS;EACzBI,WAAW,EAAE,UAAGJ,MAAM,4BAAkBA,MAAM,cAAW;EACzDK,IAAI,EAAE,UAAGL,MAAM,WAAQ;EACvBM,UAAU,EAAE,UAAGN,MAAM,2BAAiBA,MAAM;CAC7C;AAED;;;;;;AAMA,OAAO,IAAMO,QAAQ,GAAGZ,UAAU,CAChC,SAASY,QAAQ,CACfC,EAkBC,EACDC,OAAO;EAlBL,IAAWC,aAAa;IACxBC,MAAM;IACNR,KAAK;IACLE,IAAI;IACJO,OAAO;IACPC,UAAU;IACVC,SAAS;IACTC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,eAAkC;IAAlCC,OAAO,mBAAGlB,wBAAwB;IAClCmB,kBAAwC;IAAxCC,UAAU,mBAAGnB,2BAA2B;IACxCoB,oBAAmB;IAAnBC,YAAY,mBAAG,IAAI;IACnBC,SAAS;IACTC,QAAQ;IACRC,MAAM;IACHC,KAAK,cAjBV,6LAkBC,CADS;EAIJ,SAA6B9B,gBAAgB,CAAC;MAClDY,OAAO;MACPU,OAAO;MACPE,UAAU;MACVO,SAAS,EAAEhC,EAAE,CAACG,KAAK,EAAE,EAAEW,aAAa,CAAC;MACrCa,YAAY,EAAEA,YAAY,IAAI,CAACG,MAAM;MACrCf,MAAM;MACNR,KAAK;MACLE,IAAI;MACJO,OAAO;MACPC,UAAU;MACVC,SAAS;MACTC,MAAM;MACNC,SAAS;MACTC,QAAQ;MACRO,SAAS;KACV,CAAC;IAhBMK,YAAY;IAAEC,QAAQ,cAgB5B;EACF,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb,OACEC,yBAASJ,KAAK,EAAME,YAAY;IAAEG,IAAI,EAAC,UAAU;IAACN,MAAM,EAAEA;EAAM;IAAAD,UAC7DA;EAAQ,GACL;AAEV,CAAC,CACF","names":["forwardRef","cn","useCSSTransition","bem","block","prefix","DEFAULT_TABPANEL_TIMEOUT","DEFAULT_TABPANEL_CLASSNAMES","enter","enterActive","exit","exitActive","TabPanel","_a","nodeRef","propClassName","appear","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_b","timeout","_c","classNames","_d","transitionIn","temporary","children","hidden","props","className","elementProps","rendered","_jsx","role"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tabs/src/TabPanel.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type {\n  CSSTransitionClassNames,\n  CSSTransitionComponentProps,\n  TransitionActions,\n  TransitionTimeout,\n} from \"@react-md/transition\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface TabPanelProps\n  extends HTMLAttributes<HTMLDivElement>,\n    CSSTransitionComponentProps,\n    TransitionActions {\n  /**\n   * The id for the tab panel. This is required for a11y but will automatically\n   * be provided by the `TabPanels` component by cloning the `id` in.\n   */\n  id?: string;\n\n  /**\n   * An optional label to describe this tab panel. Either this or the\n   * `aria-labelledby` are required for a11y but the default implementation will\n   * use the `aria-labelledby` automatically.\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * An optional id pointing to an element that describes this tab panel. Either\n   * this or the `aria-labelledby` are required for a11y but the default\n   * implementation will use the `aria-labelledby` automatically.\n   */\n  \"aria-labelledby\"?: string;\n\n  /**\n   * @see {@link TransitionOptions.transitionIn}\n   */\n  transitionIn?: boolean;\n}\n\nconst block = bem(\"rmd-tab-panel\");\nconst prefix = \"rmd-tab-panel\";\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_TABPANEL_TIMEOUT: TransitionTimeout = 150;\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_TABPANEL_CLASSNAMES: Readonly<CSSTransitionClassNames> = {\n  enter: `${prefix}--enter`,\n  enterActive: `${prefix}--enter-active ${prefix}--animate`,\n  exit: `${prefix}--exit`,\n  exitActive: `${prefix}--exit-active ${prefix}--animate`,\n};\n\n/**\n * This component renders an accessible tab panel with enter and exit\n * animations.  This probably should only be used internally as it relies on the\n * `TabPanels` component along with the `TransitionGroup` from\n * `react-transition-group` to work as expected.\n */\nexport const TabPanel = forwardRef<HTMLDivElement, TabPanelProps>(\n  function TabPanel(\n    {\n      className: propClassName,\n      appear,\n      enter,\n      exit,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      timeout = DEFAULT_TABPANEL_TIMEOUT,\n      classNames = DEFAULT_TABPANEL_CLASSNAMES,\n      transitionIn = true,\n      temporary,\n      children,\n      hidden,\n      ...props\n    },\n    nodeRef\n  ) {\n    const { elementProps, rendered } = useCSSTransition({\n      nodeRef,\n      timeout,\n      classNames,\n      className: cn(block(), propClassName),\n      transitionIn: transitionIn && !hidden,\n      appear,\n      enter,\n      exit,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      temporary,\n    });\n    if (!rendered) {\n      return null;\n    }\n\n    return (\n      <div {...props} {...elementProps} role=\"tabpanel\" hidden={hidden}>\n        {children}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}