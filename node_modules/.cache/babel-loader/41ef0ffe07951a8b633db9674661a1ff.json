{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from \"react\";\nimport { ActiveDescendantContextProvider } from \"./activeDescendantContext\";\n/**\n * This component should be used with the {@link KeyboardMovementProvider}\n * component to implement custom keyboard focusable behavior using\n * `aria-activedescendant`.\n *\n * @example\n * Base Example\n * ```tsx\n * function Descendant({ id, children, ...props }: HTMLAttributes<HTMLDivElement>): ReactElement {\n *   const { ref, active } = useActiveDescendant({ id });\n *   return (\n *     <div\n *       {...props}\n *       id={id}\n *       ref={ref}\n *       role=\"option\"\n *       tabIndex={-1}\n *       className={active ? \"active\" : undefined}\n *     >\n *       {children}\n *     </div>\n *   );\n * }\n *\n * function CustomFocus(): ReactElement {\n *   const { providerProps, focusIndex, ...containerProps } =\n *     useActiveDescendantFocus()\n *\n *   return (\n *     <ActiveDescendantMovementProvider>\n *       <div\n *         {...containerProps}\n *         id=\"some-unique-id\"\n *         role=\"listbox\"\n *         tabIndex={0}\n *       >\n *         <Descendant id=\"some-descendant-id\">\n *           Some Option\n *         </Descendant>\n *       </div>\n *      </ActiveDescendantMovementProvider>\n *   );\n * }\n *\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider loopable searchable>\n *       <CustomFocus />\n *     </KeyboardMovementProvider>\n *   );\n * }\n * ```\n *\n * @see https://www.w3.org/TR/wai-aria-practices/#kbd_focus_activedescendant\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function ActiveDescendantMovementProvider(_a) {\n  var children = _a.children,\n    activeId = _a.activeId,\n    setActiveId = _a.setActiveId;\n  return _jsx(ActiveDescendantContextProvider, __assign({\n    value: useMemo(function () {\n      return {\n        activeId: activeId,\n        setActiveId: setActiveId\n      };\n    }, [activeId, setActiveId])\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,+BAA+B,QAAQ,2BAA2B;AAW3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAUC,gCAAgC,CAACC,EAIT;MAHtCC,QAAQ;IACRC,QAAQ;IACRC,WAAW;EAEX,OACEC,KAACN,+BAA+B;IAC9BO,KAAK,EAAER,OAAO,CACZ;MAAM,OAAC;QACLK,QAAQ;QACRC,WAAW;OACZ;IAHK,CAGJ,EACF,CAACD,QAAQ,EAAEC,WAAW,CAAC;EACxB;IAAAF,UAEAA;EAAQ,GACuB;AAEtC","names":["useMemo","ActiveDescendantContextProvider","ActiveDescendantMovementProvider","_a","children","activeId","setActiveId","_jsx","value"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/keyboardMovement/ActiveDescendantMovementProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useMemo } from \"react\";\nimport type { ActiveDescendantContext } from \"./activeDescendantContext\";\nimport { ActiveDescendantContextProvider } from \"./activeDescendantContext\";\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport interface ActiveDescendantMovementProviderProps\n  extends ActiveDescendantContext {\n  children: ReactNode;\n}\n\n/**\n * This component should be used with the {@link KeyboardMovementProvider}\n * component to implement custom keyboard focusable behavior using\n * `aria-activedescendant`.\n *\n * @example\n * Base Example\n * ```tsx\n * function Descendant({ id, children, ...props }: HTMLAttributes<HTMLDivElement>): ReactElement {\n *   const { ref, active } = useActiveDescendant({ id });\n *   return (\n *     <div\n *       {...props}\n *       id={id}\n *       ref={ref}\n *       role=\"option\"\n *       tabIndex={-1}\n *       className={active ? \"active\" : undefined}\n *     >\n *       {children}\n *     </div>\n *   );\n * }\n *\n * function CustomFocus(): ReactElement {\n *   const { providerProps, focusIndex, ...containerProps } =\n *     useActiveDescendantFocus()\n *\n *   return (\n *     <ActiveDescendantMovementProvider>\n *       <div\n *         {...containerProps}\n *         id=\"some-unique-id\"\n *         role=\"listbox\"\n *         tabIndex={0}\n *       >\n *         <Descendant id=\"some-descendant-id\">\n *           Some Option\n *         </Descendant>\n *       </div>\n *      </ActiveDescendantMovementProvider>\n *   );\n * }\n *\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider loopable searchable>\n *       <CustomFocus />\n *     </KeyboardMovementProvider>\n *   );\n * }\n * ```\n *\n * @see https://www.w3.org/TR/wai-aria-practices/#kbd_focus_activedescendant\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function ActiveDescendantMovementProvider({\n  children,\n  activeId,\n  setActiveId,\n}: ActiveDescendantMovementProviderProps): ReactElement {\n  return (\n    <ActiveDescendantContextProvider\n      value={useMemo(\n        () => ({\n          activeId,\n          setActiveId,\n        }),\n        [activeId, setActiveId]\n      )}\n    >\n      {children}\n    </ActiveDescendantContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}