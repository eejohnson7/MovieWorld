{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { useIcon } from \"@react-md/icon\";\nimport { InputToggle } from \"./InputToggle\";\n/**\n * The `Checkbox` component is just a wrapper for the `InputToggle` that\n * defaults to reasonable defaults for a checkbox input.\n */\nexport var Checkbox = forwardRef(function Checkbox(_a, ref) {\n  var propIcon = _a.icon,\n    _b = _a.indeterminate,\n    indeterminate = _b === void 0 ? false : _b,\n    props = __rest(_a, [\"icon\", \"indeterminate\"]);\n  var icon = useIcon(\"checkbox\", propIcon);\n  return _jsx(InputToggle, __assign({}, props, {\n    icon: icon,\n    ref: ref,\n    type: \"checkbox\",\n    indeterminate: indeterminate\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,OAAO,QAAQ,gBAAgB;AAGxC,SAASC,WAAW,QAAQ,eAAe;AAuB3C;;;;AAIA,OAAO,IAAMC,QAAQ,GAAGH,UAAU,CAChC,SAASG,QAAQ,CAACC,EAAmD,EAAEC,GAAG;EAAtD,IAAMC,QAAQ;IAAEC,qBAAqB;IAArBC,aAAa,mBAAG,KAAK;IAAKC,KAAK,cAAjD,yBAAmD,CAAF;EACjE,IAAMC,IAAI,GAAGT,OAAO,CAAC,UAAU,EAAEK,QAAQ,CAAC;EAE1C,OACEK,KAACT,WAAW,eACNO,KAAK;IACTC,IAAI,EAAEA,IAAI;IACVL,GAAG,EAAEA,GAAG;IACRO,IAAI,EAAC,UAAU;IACfJ,aAAa,EAAEA;EAAa,GAC5B;AAEN,CAAC,CACF","names":["forwardRef","useIcon","InputToggle","Checkbox","_a","ref","propIcon","_b","indeterminate","props","icon","_jsx","type"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/toggle/Checkbox.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { useIcon } from \"@react-md/icon\";\n\nimport type { InputToggleProps } from \"./InputToggle\";\nimport { InputToggle } from \"./InputToggle\";\n\n/** @remarks \\@since 2.8.5 */\nexport interface IndeterminateCheckboxProps {\n  /**\n   * If the indeterminate prop is enabled, the this prop must be a\n   * space-delimited string of **all** the checkboxes that it controls.\n   */\n  \"aria-controls\"?: string;\n\n  /**\n   * Boolean if the checkbox can have an indeterminate state. This is used when\n   * there is a checkbox group where a single checkbox and select/deselect all\n   * related checkboxes. This should be enabled when not all the related\n   * checkboxes have been checked.\n   */\n  indeterminate?: boolean;\n}\n\nexport interface CheckboxProps\n  extends InputToggleProps,\n    IndeterminateCheckboxProps {}\n\n/**\n * The `Checkbox` component is just a wrapper for the `InputToggle` that\n * defaults to reasonable defaults for a checkbox input.\n */\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  function Checkbox({ icon: propIcon, indeterminate = false, ...props }, ref) {\n    const icon = useIcon(\"checkbox\", propIcon);\n\n    return (\n      <InputToggle\n        {...props}\n        icon={icon}\n        ref={ref}\n        type=\"checkbox\"\n        indeterminate={indeterminate}\n      />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}