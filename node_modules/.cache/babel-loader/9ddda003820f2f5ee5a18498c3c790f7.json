{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { THUMB_1_VAR, THUMB_2_VAR } from \"./constants\";\nvar styles = bem(\"rmd-slider-track\");\n/**\n * The `SliderTrack` component is used to show the distance that the slider can\n * be dragged as well as a visual indication of the value. The main usage is to\n * update the custom css properties for the thumb's values.\n *\n * @remarks \\@since 2.5.0\n */\nexport var SliderTrack = forwardRef(function SliderTrack(_a, ref) {\n  var _b;\n  var propStyle = _a.style,\n    className = _a.className,\n    children = _a.children,\n    _c = _a.animate,\n    animate = _c === void 0 ? false : _c,\n    _d = _a.vertical,\n    vertical = _d === void 0 ? false : _d,\n    _e = _a.disabled,\n    disabled = _e === void 0 ? false : _e,\n    thumb1Percentage = _a.thumb1Percentage,\n    thumb2Percentage = _a.thumb2Percentage,\n    props = __rest(_a, [\"style\", \"className\", \"children\", \"animate\", \"vertical\", \"disabled\", \"thumb1Percentage\", \"thumb2Percentage\"]);\n  var style = __assign(__assign({}, propStyle), (_b = {}, _b[THUMB_1_VAR] = thumb1Percentage, _b[THUMB_2_VAR] = thumb2Percentage, _b));\n  return _jsx(\"span\", __assign({}, props, {\n    ref: ref,\n    style: style,\n    className: cn(styles({\n      animate: animate,\n      hoverable: !disabled,\n      disabled: disabled,\n      h: !vertical,\n      h1: !vertical && !thumb2Percentage,\n      h2: !vertical && thumb2Percentage,\n      v: vertical,\n      v1: vertical && !thumb2Percentage,\n      v2: vertical && thumb2Percentage\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,IAAMC,MAAM,GAAGH,GAAG,CAAC,kBAAkB,CAAC;AAiCtC;;;;;;;AAOA,OAAO,IAAMI,WAAW,GAAGN,UAAU,CACnC,SAASM,WAAW,CAClBC,EAUC,EACDC,GAAG;;EAVD,IAAOC,SAAS;IAChBC,SAAS;IACTC,QAAQ;IACRC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,gBAAgB;IAChBC,gBAAgB;IACbC,KAAK,cATV,6GAUC,CADS;EAIV,IAAMC,KAAK,yBACNZ,SAAS,gBACXN,WAAW,IAAGe,gBAAgB,KAC9Bd,WAAW,IAAGe,gBAAgB,MAChC;EAED,OACEG,0BACMF,KAAK;IACTZ,GAAG,EAAEA,GAAG;IACRa,KAAK,EAAEA,KAAK;IACZX,SAAS,EAAET,EAAE,CACXI,MAAM,CAAC;MACLQ,OAAO;MACPU,SAAS,EAAE,CAACN,QAAQ;MACpBA,QAAQ;MACRO,CAAC,EAAE,CAACT,QAAQ;MACZU,EAAE,EAAE,CAACV,QAAQ,IAAI,CAACI,gBAAgB;MAClCO,EAAE,EAAE,CAACX,QAAQ,IAAII,gBAAgB;MACjCQ,CAAC,EAAEZ,QAAQ;MACXa,EAAE,EAAEb,QAAQ,IAAI,CAACI,gBAAgB;MACjCU,EAAE,EAAEd,QAAQ,IAAII;KACjB,CAAC,EACFT,SAAS;EACV;IAAAC,UAEAA;EAAQ,GACJ;AAEX,CAAC,CACF","names":["forwardRef","cn","bem","THUMB_1_VAR","THUMB_2_VAR","styles","SliderTrack","_a","ref","propStyle","className","children","_c","animate","_d","vertical","_e","disabled","thumb1Percentage","thumb2Percentage","props","style","_jsx","hoverable","h","h1","h2","v","v1","v2"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/slider/SliderTrack.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport { THUMB_1_VAR, THUMB_2_VAR } from \"./constants\";\nimport type { SliderPresentation } from \"./types\";\n\nconst styles = bem(\"rmd-slider-track\");\n\ntype CSSProperties = React.CSSProperties & {\n  [THUMB_1_VAR]?: string;\n  [THUMB_2_VAR]?: string;\n};\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface SliderTrackProps\n  extends HTMLAttributes<HTMLSpanElement>,\n    SliderPresentation {\n  /**\n   * Boolean if the track should animate the value position whenever the\n   * value changes. This should normally be set to `true` only when the track\n   * is \"idle\" and not being dragged.\n   */\n  animate?: boolean;\n\n  /**\n   * This should be the current value as a percentage for the first thumb that\n   * appears within the slider.\n   */\n  thumb1Percentage: string;\n\n  /**\n   * This should be the current value as a percentage for the second thumb that\n   * appears within the slider, but only when behaving as a range slider.\n   */\n  thumb2Percentage?: string;\n}\n\n/**\n * The `SliderTrack` component is used to show the distance that the slider can\n * be dragged as well as a visual indication of the value. The main usage is to\n * update the custom css properties for the thumb's values.\n *\n * @remarks \\@since 2.5.0\n */\nexport const SliderTrack = forwardRef<HTMLSpanElement, SliderTrackProps>(\n  function SliderTrack(\n    {\n      style: propStyle,\n      className,\n      children,\n      animate = false,\n      vertical = false,\n      disabled = false,\n      thumb1Percentage,\n      thumb2Percentage,\n      ...props\n    },\n    ref\n  ) {\n    const style: CSSProperties = {\n      ...propStyle,\n      [THUMB_1_VAR]: thumb1Percentage,\n      [THUMB_2_VAR]: thumb2Percentage,\n    };\n\n    return (\n      <span\n        {...props}\n        ref={ref}\n        style={style}\n        className={cn(\n          styles({\n            animate,\n            hoverable: !disabled,\n            disabled,\n            h: !vertical,\n            h1: !vertical && !thumb2Percentage,\n            h2: !vertical && thumb2Percentage,\n            v: vertical,\n            v1: vertical && !thumb2Percentage,\n            v2: vertical && thumb2Percentage,\n          }),\n          className\n        )}\n      >\n        {children}\n      </span>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}