{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-icon\");\n/**\n * The `FontIcon` component is used for rendering a font-icon library's icon.\n * The default is to use the `material-icons` library, but others can be used as\n * well.\n *\n * If you are using another font icon library that does not always create icons\n * with a perfect 1:1 scale (such as font awesome), it is recommended to use the\n * `forceSize` and `forceFontSize` props to fix the sizing issues.\n */\nexport var FontIcon = forwardRef(function FontIcon(_a, ref) {\n  var className = _a.className,\n    children = _a.children,\n    _b = _a[\"aria-hidden\"],\n    ariaHidden = _b === void 0 ? true : _b,\n    _c = _a.dense,\n    dense = _c === void 0 ? false : _c,\n    _d = _a.iconClassName,\n    iconClassName = _d === void 0 ? \"material-icons\" : _d,\n    _e = _a.forceSize,\n    forceSize = _e === void 0 ? false : _e,\n    _f = _a.forceFontSize,\n    forceFontSize = _f === void 0 ? false : _f,\n    props = __rest(_a, [\"className\", \"children\", \"aria-hidden\", \"dense\", \"iconClassName\", \"forceSize\", \"forceFontSize\"]);\n  return _jsx(\"i\", __assign({}, props, {\n    \"aria-hidden\": ariaHidden,\n    ref: ref,\n    className: cn(block({\n      font: true,\n      dense: dense,\n      \"forced-font\": forceFontSize,\n      \"forced-size\": forceSize\n    }), iconClassName, className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAiCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,UAAU,CAAC;AAE7B;;;;;;;;;AASA,OAAO,IAAME,QAAQ,GAAGJ,UAAU,CAChC,SAASI,QAAQ,CACfC,EASC,EACDC,GAAG;EATD,aAAS;IACTC,QAAQ;IACRC,sBAAgC;IAAjBC,UAAU,mBAAG,IAAI;IAChCC,aAAa;IAAbC,KAAK,mBAAG,KAAK;IACbC,qBAAgC;IAAhCC,aAAa,mBAAG,gBAAgB;IAChCC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACjBC,qBAAqB;IAArBC,aAAa,mBAAG,KAAK;IAClBC,KAAK,cARV,gGASC,CADS;EAIV,OACEC,uBACMD,KAAK;IAAA,eACIT,UAAU;IACvBH,GAAG,EAAEA,GAAG;IACRc,SAAS,EAAEnB,EAAE,CACXE,KAAK,CAAC;MACJkB,IAAI,EAAE,IAAI;MACVV,KAAK;MACL,aAAa,EAAEM,aAAa;MAC5B,aAAa,EAAEF;KAChB,CAAC,EACFF,aAAa,EACbO,SAAS;EACV;IAAAb,UAEAA;EAAQ,GACP;AAER,CAAC,CACF","names":["forwardRef","cn","bem","block","FontIcon","_a","ref","children","_b","ariaHidden","_c","dense","_d","iconClassName","_e","forceSize","_f","forceFontSize","props","_jsx","className","font"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/icon/src/FontIcon.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface FontIconProps extends HTMLAttributes<HTMLElement> {\n  /**\n   * The font icon class name to use.\n   */\n  iconClassName?: string;\n\n  /**\n   * Boolean if the font icon should use the dense spec.\n   */\n  dense?: boolean;\n\n  /**\n   * Any children to render to create the font icon. This is required for\n   * material-icons.\n   */\n  children?: ReactNode;\n\n  /**\n   * Either a boolean that will enforce the 24x24 size of the font icon or a\n   * number of the size to enforce. This is useful when using other font icon\n   * libraries that do not have a consistent size.\n   */\n  forceSize?: boolean;\n\n  /**\n   * Boolean if the `forceSize` prop should also force the `font-size` instead\n   * of only `width` and `height`.\n   */\n  forceFontSize?: boolean;\n}\n\nconst block = bem(\"rmd-icon\");\n\n/**\n * The `FontIcon` component is used for rendering a font-icon library's icon.\n * The default is to use the `material-icons` library, but others can be used as\n * well.\n *\n * If you are using another font icon library that does not always create icons\n * with a perfect 1:1 scale (such as font awesome), it is recommended to use the\n * `forceSize` and `forceFontSize` props to fix the sizing issues.\n */\nexport const FontIcon = forwardRef<HTMLElement, FontIconProps>(\n  function FontIcon(\n    {\n      className,\n      children,\n      \"aria-hidden\": ariaHidden = true,\n      dense = false,\n      iconClassName = \"material-icons\",\n      forceSize = false,\n      forceFontSize = false,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <i\n        {...props}\n        aria-hidden={ariaHidden}\n        ref={ref}\n        className={cn(\n          block({\n            font: true,\n            dense,\n            \"forced-font\": forceFontSize,\n            \"forced-size\": forceSize,\n          }),\n          iconClassName,\n          className\n        )}\n      >\n        {children}\n      </i>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}