{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nimport { CardHeaderAddon } from \"./CardHeaderAddon\";\nvar block = bem(\"rmd-card\");\n/**\n * The header for a `Card`. There should only be up to 1 `CardHeader` within a\n * card and normally contains the `CardTitle` and optionally `CardSubtitle`\n * components. There is also additional functionality built in to render items\n * before or after the main children with some additional spacing.\n */\nexport var CardHeader = forwardRef(function CardHeader(_a, ref) {\n  var _b;\n  var _c = _a.align,\n    align = _c === void 0 ? \"center\" : _c,\n    className = _a.className,\n    contentClassName = _a.contentClassName,\n    children = _a.children,\n    beforeChildren = _a.beforeChildren,\n    afterChildren = _a.afterChildren,\n    props = __rest(_a, [\"align\", \"className\", \"contentClassName\", \"children\", \"beforeChildren\", \"afterChildren\"]);\n  return _jsx(\"header\", __assign({}, props, {\n    ref: ref,\n    className: cn(block(\"header\", (_b = {}, _b[align] = align !== \"none\", _b)), className)\n  }, {\n    children: _jsx(TextIconSpacing, __assign({\n      icon: _jsx(CardHeaderAddon, {\n        children: beforeChildren\n      })\n    }, {\n      children: _jsx(TextIconSpacing, __assign({\n        icon: _jsx(CardHeaderAddon, {\n          children: afterChildren\n        }),\n        iconAfter: true\n      }, {\n        children: _jsx(\"span\", __assign({\n          className: cn(block(\"header-content\"), contentClassName)\n        }, {\n          children: children\n        }))\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SAASC,eAAe,QAAQ,mBAAmB;AAsCnD,IAAMC,KAAK,GAAGF,GAAG,CAAC,UAAU,CAAC;AAE7B;;;;;;AAMA,OAAO,IAAMG,UAAU,GAAGN,UAAU,CAClC,SAASM,UAAU,CACjBC,EAQC,EACDC,GAAG;;EARD,iBAAgB;IAAhBC,KAAK,mBAAG,QAAQ;IAChBC,SAAS;IACTC,gBAAgB;IAChBC,QAAQ;IACRC,cAAc;IACdC,aAAa;IACVC,KAAK,cAPV,yFAQC,CADS;EAIV,OACEC,4BACMD,KAAK;IACTP,GAAG,EAAEA,GAAG;IACRE,SAAS,EAAET,EAAE,CACXI,KAAK,CAAC,QAAQ,YACZY,GAACR,KAAK,IAAGA,KAAK,KAAK,MAAM,MACzB,EACFC,SAAS;EACV;IAAAE,UAEDI,KAACd,eAAe;MACdgB,IAAI,EAAEF,KAACZ,eAAe;QAAAQ,UAAEC;MAAc;IAAmB;MAAAD,UAEzDI,KAACd,eAAe;QACdgB,IAAI,EAAEF,KAACZ,eAAe;UAAAQ,UAAEE;QAAa,EAAmB;QACxDK,SAAS;MAAA;QAAAP,UAETI;UAAMN,SAAS,EAAET,EAAE,CAACI,KAAK,CAAC,gBAAgB,CAAC,EAAEM,gBAAgB;QAAC;UAAAC,UAC3DA;QAAQ;MACJ;IACS;EACF,GACX;AAEb,CAAC,CACF","names":["forwardRef","cn","TextIconSpacing","bem","CardHeaderAddon","block","CardHeader","_a","ref","align","className","contentClassName","children","beforeChildren","afterChildren","props","_jsx","_b","icon","iconAfter"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/card/src/CardHeader.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nimport { CardHeaderAddon } from \"./CardHeaderAddon\";\n\nexport interface CardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * This is how to align the items within the header component. It's really\n   * just a simple pass-through to `align-items`.\n   */\n  align?: \"top\" | \"center\" | \"bottom\" | \"none\";\n\n  /**\n   * Optional children to render before the main `children` in the component.\n   * This is a good place to add `Avatar`s or additional `Media` to display with\n   * the card.\n   *\n   * This using the `TextIconSpacing` component behind the scenes, so some\n   * additional margin will be added to separate the content.\n   */\n  beforeChildren?: ReactNode;\n\n  /**\n   * Optional children to render after the main `children` in the component.\n   * This is a good place to add expander buttons or overflow menus.\n   *\n   * This using the `TextIconSpacing` component behind the scenes, so some\n   * additional margin will be added to separate the content.\n   */\n  afterChildren?: ReactNode;\n\n  /**\n   * Since it's possible to add content before or after the main children, the\n   * main content gets wrapped in a small `<span>` to help stack the `CardTitle`\n   * and `CardSubtitle` components while still allowing content to be centered\n   * vertically. If you need to add additional styles to this element for some\n   * reason, you can use this class name to do so.\n   */\n  contentClassName?: string;\n}\n\nconst block = bem(\"rmd-card\");\n\n/**\n * The header for a `Card`. There should only be up to 1 `CardHeader` within a\n * card and normally contains the `CardTitle` and optionally `CardSubtitle`\n * components. There is also additional functionality built in to render items\n * before or after the main children with some additional spacing.\n */\nexport const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>(\n  function CardHeader(\n    {\n      align = \"center\",\n      className,\n      contentClassName,\n      children,\n      beforeChildren,\n      afterChildren,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <header\n        {...props}\n        ref={ref}\n        className={cn(\n          block(\"header\", {\n            [align]: align !== \"none\",\n          }),\n          className\n        )}\n      >\n        <TextIconSpacing\n          icon={<CardHeaderAddon>{beforeChildren}</CardHeaderAddon>}\n        >\n          <TextIconSpacing\n            icon={<CardHeaderAddon>{afterChildren}</CardHeaderAddon>}\n            iconAfter\n          >\n            <span className={cn(block(\"header-content\"), contentClassName)}>\n              {children}\n            </span>\n          </TextIconSpacing>\n        </TextIconSpacing>\n      </header>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}