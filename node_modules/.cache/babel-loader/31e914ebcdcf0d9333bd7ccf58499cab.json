{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { useScaleTransition } from \"./useScaleTransition\";\n/**\n * A component implementation of the {@link useScaleTransition} hook that just\n * has some reasonable defaults and supports portalling the children. Since this\n * component uses the `React.cloneElement` to inject the `ref` and `className`\n * into the `children`, it is recommended to use the hook instead.\n *\n * @example\n * Dropdown Menu Example\n * ```tsx\n * import { ReactElement, useRef, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useFixedPositioning, useScaleTransition } from \"@react-md/transition\";\n *\n * function Example(): ReactElement {\n *   const buttonRef = useRef<HTMLButtonElement>(null);\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { style, transitionOptions } = useFixedPositioning({\n *     fixedTo: buttonRef,\n *   });\n *\n *   return (\n *     <>\n *       <Button ref={buttonRef} onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <ScaleTransition\n *         {...transitionOptions}\n *         vertical\n *         transitionIn={transitionIn}\n *       >\n *         <div style={style}>\n *           Some content within a menu\n *         </div>\n *       </ScaleTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 The typeParam was added and the API was updated.\n */\nexport function ScaleTransition(_a) {\n  var portal = _a.portal,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    children = _a.children,\n    className = _a.className,\n    options = __rest(_a, [\"portal\", \"portalInto\", \"portalIntoId\", \"children\", \"className\"]);\n  var child = Children.only(children);\n  var _b = useScaleTransition(__assign(__assign({}, options), {\n      className: cn(child.props.className, className)\n    })),\n    elementProps = _b.elementProps,\n    rendered = _b.rendered;\n  return _jsx(ConditionalPortal, __assign({\n    portal: portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: rendered && cloneElement(children, elementProps)\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,OAAO;AAC9C,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,iBAAiB,QAAQ,kBAAkB;AAIpD,SAASC,kBAAkB,QAAQ,sBAAsB;AAazD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,OAAM,SAAUC,eAAe,CAAwBC,EAO7B;EANxB,UAAM;IACNC,UAAU;IACVC,YAAY;IACZC,QAAQ;IACRC,SAAS;IACNC,OAAO,cAN2C,iEAOtD,CADW;EAEV,IAAMC,KAAK,GAAGZ,QAAQ,CAACa,IAAI,CAACJ,QAAQ,CAAC;EAC/B,SAA6BL,kBAAkB,uBAChDO,OAAO;MACVD,SAAS,EAAER,EAAE,CAACU,KAAK,CAACE,KAAK,CAACJ,SAAS,EAAEA,SAAS;IAAC,GAC/C;IAHMK,YAAY;IAAEC,QAAQ,cAG5B;EAEF,OACEC,KAACd,iBAAiB;IAChBe,MAAM,EAAEA,MAAM;IACdX,UAAU,EAAEA,UAAU;IACtBC,YAAY,EAAEA;EAAY;IAAAC,UAEzBO,QAAQ,IAAIf,YAAY,CAACQ,QAAQ,EAAEM,YAAY;EAAC,GAC/B;AAExB","names":["Children","cloneElement","cn","ConditionalPortal","useScaleTransition","ScaleTransition","_a","portalInto","portalIntoId","children","className","options","child","only","props","elementProps","rendered","_jsx","portal"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/ScaleTransition.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\n\nimport type { CSSTransitionComponentImplementation } from \"./types\";\nimport type { ScaleTransitionHookOptions } from \"./useScaleTransition\";\nimport { useScaleTransition } from \"./useScaleTransition\";\n\n/**\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 The typeParam was added\n */\nexport interface ScaleTransitionProps<E extends HTMLElement>\n  extends CSSTransitionComponentImplementation<E>,\n    RenderConditionalPortalProps,\n    ScaleTransitionHookOptions<E> {}\n\n/**\n * A component implementation of the {@link useScaleTransition} hook that just\n * has some reasonable defaults and supports portalling the children. Since this\n * component uses the `React.cloneElement` to inject the `ref` and `className`\n * into the `children`, it is recommended to use the hook instead.\n *\n * @example\n * Dropdown Menu Example\n * ```tsx\n * import { ReactElement, useRef, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useFixedPositioning, useScaleTransition } from \"@react-md/transition\";\n *\n * function Example(): ReactElement {\n *   const buttonRef = useRef<HTMLButtonElement>(null);\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { style, transitionOptions } = useFixedPositioning({\n *     fixedTo: buttonRef,\n *   });\n *\n *   return (\n *     <>\n *       <Button ref={buttonRef} onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <ScaleTransition\n *         {...transitionOptions}\n *         vertical\n *         transitionIn={transitionIn}\n *       >\n *         <div style={style}>\n *           Some content within a menu\n *         </div>\n *       </ScaleTransition>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 The typeParam was added and the API was updated.\n */\nexport function ScaleTransition<E extends HTMLElement>({\n  portal,\n  portalInto,\n  portalIntoId,\n  children,\n  className,\n  ...options\n}: ScaleTransitionProps<E>): ReactElement {\n  const child = Children.only(children);\n  const { elementProps, rendered } = useScaleTransition({\n    ...options,\n    className: cn(child.props.className, className),\n  });\n\n  return (\n    <ConditionalPortal\n      portal={portal}\n      portalInto={portalInto}\n      portalIntoId={portalIntoId}\n    >\n      {rendered && cloneElement(children, elementProps)}\n    </ConditionalPortal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}