{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport cn from \"classnames\";\nimport { useTransition } from \"./useTransition\";\nimport { getTransitionClassNames } from \"./utils\";\n/**\n * This hook is used to create CSS transitions for different components whenever\n * a {@link TransitionHookOptions.transitionIn} flag is changed.\n *\n * @example\n * Simple Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0.5;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0.5;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps } = useCSSTransition({\n *     timeout: 150,\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <Typography {...elementProps}>\n *         Some Opacity Changing Text\n *       </Typography>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Visibility Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0;\n * //   transition: opacity .2s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps, rendered } = useCSSTransition({\n *     timeout: {\n *       enter: 200,\n *       exit: 150,\n *     },\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *     temporary: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <Typography {...elementProps}>\n *           Some Opacity Changing Text\n *         </Typography>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Mount Transition\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { useCSSTransition } from \"@react-md/transition\";\n *\n * // Pretend styles\n * // .opacity {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--active {\n * //   opacity: 1;\n * // }\n * //\n *\n * function Example(): ReactElement {\n *   const { elementProps } = useCSSTransition({\n *     appear: true,\n *     transitionIn: true,\n *     timeout: 300,\n *     classNames: \"opacity\",\n *   })\n *\n *   return <div {...elementProps}>Some Content!</div>;\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCSSTransition(_a) {\n  var className = _a.className,\n    classNames = _a.classNames,\n    _b = _a.appear,\n    appear = _b === void 0 ? false : _b,\n    _c = _a.enter,\n    enter = _c === void 0 ? true : _c,\n    _d = _a.exit,\n    exit = _d === void 0 ? true : _d,\n    timeout = _a.timeout,\n    options = __rest(_a, [\"className\", \"classNames\", \"appear\", \"enter\", \"exit\", \"timeout\"]);\n  var _e = useTransition(__assign(__assign({}, options), {\n      appear: appear,\n      enter: enter,\n      exit: exit,\n      timeout: timeout,\n      reflow: true\n    })),\n    ref = _e.ref,\n    stage = _e.stage,\n    rendered = _e.rendered,\n    appearing = _e.appearing,\n    transitionTo = _e.transitionTo;\n  var isEntering = stage === \"entering\";\n  var isEnter = isEntering || stage === \"enter\";\n  var isEntered = stage === \"entered\";\n  var isExiting = stage === \"exiting\";\n  var isExit = isExiting || stage === \"exit\";\n  var isExited = stage === \"exited\";\n  var transitionClassNames = getTransitionClassNames({\n    timeout: timeout,\n    appear: appear,\n    enter: enter,\n    exit: exit,\n    classNames: classNames\n  });\n  var elementProps = {\n    ref: ref,\n    className: cn(\n    // always apply the provided className first since it makes snapshot\n    // tests easier to parse if dynamic classes come afterwards\n    className, appearing && isEnter && transitionClassNames.appear, appearing && isEntering && transitionClassNames.appearActive, appearing && isEntered && transitionClassNames.appearDone, !appearing && isEnter && transitionClassNames.enter, !appearing && isEntering && transitionClassNames.enterActive, !appearing && isEntered && transitionClassNames.enterDone, isExit && transitionClassNames.exit, isExiting && transitionClassNames.exitActive, isExited && transitionClassNames.exitDone) || undefined\n  };\n  return __assign(__assign({}, elementProps), {\n    stage: stage,\n    rendered: rendered,\n    appearing: appearing,\n    elementProps: elementProps,\n    transitionTo: transitionTo\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,EAAE,MAAM,YAAY;AAO3B,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,uBAAuB,QAAQ,SAAS;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA,OAAM,SAAUC,gBAAgB,CAAwBC,EAQ1B;EAP5B,aAAS;IACTC,UAAU;IACVC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACdC,aAAY;IAAZC,KAAK,mBAAG,IAAI;IACZC,YAAW;IAAXC,IAAI,mBAAG,IAAI;IACXC,OAAO;IACJC,OAAO,cAP4C,iEAQvD,CADW;EAEJ,SAAoDZ,aAAa,uBAClEY,OAAO;MACVN,MAAM;MACNE,KAAK;MACLE,IAAI;MACJC,OAAO;MACPE,MAAM,EAAE;IAAI,GACZ;IAPMC,GAAG;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,YAAY,kBAOnD;EACF,IAAMC,UAAU,GAAGJ,KAAK,KAAK,UAAU;EACvC,IAAMK,OAAO,GAAGD,UAAU,IAAIJ,KAAK,KAAK,OAAO;EAC/C,IAAMM,SAAS,GAAGN,KAAK,KAAK,SAAS;EACrC,IAAMO,SAAS,GAAGP,KAAK,KAAK,SAAS;EACrC,IAAMQ,MAAM,GAAGD,SAAS,IAAIP,KAAK,KAAK,MAAM;EAC5C,IAAMS,QAAQ,GAAGT,KAAK,KAAK,QAAQ;EACnC,IAAMU,oBAAoB,GAAGxB,uBAAuB,CAAC;IACnDU,OAAO;IACPL,MAAM;IACNE,KAAK;IACLE,IAAI;IACJN,UAAU;GACX,CAAC;EAEF,IAAMsB,YAAY,GAAiC;IACjDZ,GAAG;IACHa,SAAS,EACP5B,EAAE;IACA;IACA;IACA4B,SAAS,EACTV,SAAS,IAAIG,OAAO,IAAIK,oBAAoB,CAACnB,MAAM,EACnDW,SAAS,IAAIE,UAAU,IAAIM,oBAAoB,CAACG,YAAY,EAC5DX,SAAS,IAAII,SAAS,IAAII,oBAAoB,CAACI,UAAU,EACzD,CAACZ,SAAS,IAAIG,OAAO,IAAIK,oBAAoB,CAACjB,KAAK,EACnD,CAACS,SAAS,IAAIE,UAAU,IAAIM,oBAAoB,CAACK,WAAW,EAC5D,CAACb,SAAS,IAAII,SAAS,IAAII,oBAAoB,CAACM,SAAS,EACzDR,MAAM,IAAIE,oBAAoB,CAACf,IAAI,EACnCY,SAAS,IAAIG,oBAAoB,CAACO,UAAU,EAC5CR,QAAQ,IAAIC,oBAAoB,CAACQ,QAAQ,CAC1C,IAAIC;GACR;EAED,6BACKR,YAAY;IACfX,KAAK;IACLC,QAAQ;IACRC,SAAS;IACTS,YAAY;IACZR,YAAY;EAAA;AAEhB","names":["cn","useTransition","getTransitionClassNames","useCSSTransition","_a","classNames","_b","appear","_c","enter","_d","exit","timeout","options","reflow","ref","stage","rendered","appearing","transitionTo","isEntering","isEnter","isEntered","isExiting","isExit","isExited","transitionClassNames","elementProps","className","appearActive","appearDone","enterActive","enterDone","exitActive","exitDone","undefined"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/useCSSTransition.ts"],"sourcesContent":["import cn from \"classnames\";\n\nimport type {\n  CSSTransitionHookOptions,\n  CSSTransitionHookReturnValue,\n  CSSTransitionElementProps,\n} from \"./types\";\nimport { useTransition } from \"./useTransition\";\nimport { getTransitionClassNames } from \"./utils\";\n\n/**\n * This hook is used to create CSS transitions for different components whenever\n * a {@link TransitionHookOptions.transitionIn} flag is changed.\n *\n * @example\n * Simple Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0.5;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0.5;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps } = useCSSTransition({\n *     timeout: 150,\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <Typography {...elementProps}>\n *         Some Opacity Changing Text\n *       </Typography>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Visibility Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0;\n * //   transition: opacity .2s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps, rendered } = useCSSTransition({\n *     timeout: {\n *       enter: 200,\n *       exit: 150,\n *     },\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *     temporary: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <Typography {...elementProps}>\n *           Some Opacity Changing Text\n *         </Typography>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Mount Transition\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { useCSSTransition } from \"@react-md/transition\";\n *\n * // Pretend styles\n * // .opacity {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--active {\n * //   opacity: 1;\n * // }\n * //\n *\n * function Example(): ReactElement {\n *   const { elementProps } = useCSSTransition({\n *     appear: true,\n *     transitionIn: true,\n *     timeout: 300,\n *     classNames: \"opacity\",\n *   })\n *\n *   return <div {...elementProps}>Some Content!</div>;\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCSSTransition<E extends HTMLElement>({\n  className,\n  classNames,\n  appear = false,\n  enter = true,\n  exit = true,\n  timeout,\n  ...options\n}: CSSTransitionHookOptions<E>): CSSTransitionHookReturnValue<E> {\n  const { ref, stage, rendered, appearing, transitionTo } = useTransition({\n    ...options,\n    appear,\n    enter,\n    exit,\n    timeout,\n    reflow: true,\n  });\n  const isEntering = stage === \"entering\";\n  const isEnter = isEntering || stage === \"enter\";\n  const isEntered = stage === \"entered\";\n  const isExiting = stage === \"exiting\";\n  const isExit = isExiting || stage === \"exit\";\n  const isExited = stage === \"exited\";\n  const transitionClassNames = getTransitionClassNames({\n    timeout,\n    appear,\n    enter,\n    exit,\n    classNames,\n  });\n\n  const elementProps: CSSTransitionElementProps<E> = {\n    ref,\n    className:\n      cn(\n        // always apply the provided className first since it makes snapshot\n        // tests easier to parse if dynamic classes come afterwards\n        className,\n        appearing && isEnter && transitionClassNames.appear,\n        appearing && isEntering && transitionClassNames.appearActive,\n        appearing && isEntered && transitionClassNames.appearDone,\n        !appearing && isEnter && transitionClassNames.enter,\n        !appearing && isEntering && transitionClassNames.enterActive,\n        !appearing && isEntered && transitionClassNames.enterDone,\n        isExit && transitionClassNames.exit,\n        isExiting && transitionClassNames.exitActive,\n        isExited && transitionClassNames.exitDone\n      ) || undefined,\n  };\n\n  return {\n    ...elementProps,\n    stage,\n    rendered,\n    appearing,\n    elementProps,\n    transitionTo,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}