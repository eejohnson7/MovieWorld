{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nvar context = createContext({\n  visible: false,\n  setVisible: function () {\n    throw new Error('\"MenuVisibilityProvider\" must be a parent component');\n  }\n});\ncontext.displayName = \"MenuVisibility\";\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nvar Provider = context.Provider;\n/**\n * This hook allows you control the visibility of a parent menu. The main\n * use-case for this hook is adding a custom sheet header/footer.\n *\n * @example\n * Simple Example\n * ```tsx\n * function SheetFooter(): ReactElement {\n *   const { setVisible } = useMenuVisibility();\n *\n *   return (\n *     <DialogFooter>\n *       <Button onClick={() => setVisible(false)}>Cancel</Button>\n *     </DialogFooter>\n *   );\n * }\n * ```\n *\n * @returns the {@link MenuVisibilityContext}\n * @remarks \\@since 5.0.0\n */\nexport function useMenuVisibility() {\n  return useContext(context);\n}\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function MenuVisibilityProvider(_a) {\n  var visible = _a.visible,\n    setVisible = _a.setVisible,\n    children = _a.children;\n  var value = useMemo(function () {\n    return {\n      visible: visible,\n      setVisible: setVisible\n    };\n  }, [visible, setVisible]);\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAS1D;;;;AAIA,IAAMC,OAAO,GAAGH,aAAa,CAAwB;EACnDI,OAAO,EAAE,KAAK;EACdC,UAAU;IACR,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EACxE;CACD,CAAC;AACFH,OAAO,CAACI,WAAW,GAAG,gBAAgB;AAEtC;;;;AAIQ,YAAQ,GAAKJ,OAAO,SAAZ;AAEhB;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAM,SAAUK,iBAAiB;EAC/B,OAAOP,UAAU,CAACE,OAAO,CAAC;AAC5B;AAUA;;;;AAIA,OAAM,SAAUM,sBAAsB,CAACC,EAIT;MAH5BN,OAAO;IACPC,UAAU;IACVM,QAAQ;EAER,IAAMC,KAAK,GAAGV,OAAO,CACnB;IAAM,OAAC;MACLE,OAAO;MACPC,UAAU;KACX;EAHK,CAGJ,EACF,CAACD,OAAO,EAAEC,UAAU,CAAC,CACtB;EAED,OAAOQ,KAACC,QAAQ;IAACF,KAAK,EAAEA;EAAK;IAAAD,UAAGA;EAAQ,GAAY;AACtD","names":["createContext","useContext","useMemo","context","visible","setVisible","Error","displayName","useMenuVisibility","MenuVisibilityProvider","_a","children","value","_jsx","Provider"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/menu/src/MenuVisibilityProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport type { HoverModeHookReturnValue } from \"@react-md/utils\";\n\n/** @remarks \\@since 5.0.0 */\nexport type MenuVisibilityContext = Pick<\n  HoverModeHookReturnValue,\n  \"visible\" | \"setVisible\"\n>;\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nconst context = createContext<MenuVisibilityContext>({\n  visible: false,\n  setVisible() {\n    throw new Error('\"MenuVisibilityProvider\" must be a parent component');\n  },\n});\ncontext.displayName = \"MenuVisibility\";\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nconst { Provider } = context;\n\n/**\n * This hook allows you control the visibility of a parent menu. The main\n * use-case for this hook is adding a custom sheet header/footer.\n *\n * @example\n * Simple Example\n * ```tsx\n * function SheetFooter(): ReactElement {\n *   const { setVisible } = useMenuVisibility();\n *\n *   return (\n *     <DialogFooter>\n *       <Button onClick={() => setVisible(false)}>Cancel</Button>\n *     </DialogFooter>\n *   );\n * }\n * ```\n *\n * @returns the {@link MenuVisibilityContext}\n * @remarks \\@since 5.0.0\n */\nexport function useMenuVisibility(): Readonly<MenuVisibilityContext> {\n  return useContext(context);\n}\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport interface MenuVisibilityProviderProps extends MenuVisibilityContext {\n  children: ReactNode;\n}\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function MenuVisibilityProvider({\n  visible,\n  setVisible,\n  children,\n}: MenuVisibilityProviderProps): ReactElement {\n  const value = useMemo<MenuVisibilityContext>(\n    () => ({\n      visible,\n      setVisible,\n    }),\n    [visible, setVisible]\n  );\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}