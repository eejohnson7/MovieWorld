{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nimport { DEFAULT_TOAST_CLASSNAMES, DEFAULT_TOAST_TIMEOUT } from \"./constants\";\nvar block = bem(\"rmd-toast\");\n/**\n * This is a very low-level component that can be used to animate a new toast in\n * to a `Snackbar` as it is mainly just a wrapper of the `CSSTransition`\n * component. If you are using this component, it is generally recommended to\n * provide the `onEntered` callback as a function to start the hide visibility\n * timer and the `onExited` callback to remove the current toast from your\n * queue.\n */\nexport var Toast = forwardRef(function Toast(_a, nodeRef) {\n  var className = _a.className,\n    children = _a.children,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    _b = _a.timeout,\n    timeout = _b === void 0 ? DEFAULT_TOAST_TIMEOUT : _b,\n    _c = _a.classNames,\n    classNames = _c === void 0 ? DEFAULT_TOAST_CLASSNAMES : _c,\n    _d = _a.action,\n    action = _d === void 0 ? null : _d,\n    _e = _a.stacked,\n    stacked = _e === void 0 ? false : _e,\n    _f = _a.twoLines,\n    twoLines = _f === void 0 ? false : _f,\n    visible = _a.visible,\n    props = __rest(_a, [\"className\", \"children\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"timeout\", \"classNames\", \"action\", \"stacked\", \"twoLines\", \"visible\"]);\n  return _jsx(CSSTransition, __assign({\n    appear: true,\n    nodeRef: nodeRef,\n    temporary: true,\n    transitionIn: visible,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    timeout: timeout,\n    classNames: classNames\n  }, {\n    children: _jsxs(\"div\", __assign({}, props, {\n      className: cn(block({\n        stacked: stacked,\n        padded: !action || twoLines,\n        \"two-lines\": twoLines,\n        action: action,\n        \"action-2\": action && twoLines\n      }), className)\n    }, {\n      children: [_jsx(\"span\", __assign({\n        className: block(\"message\", {\n          action: action\n        })\n      }, {\n        children: children\n      })), action && _jsx(\"span\", __assign({\n        className: block(\"action\", {\n          stacked: stacked\n        })\n      }, {\n        children: action\n      }))]\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SAASC,wBAAwB,EAAEC,qBAAqB,QAAQ,aAAa;AA8B7E,IAAMC,KAAK,GAAGH,GAAG,CAAC,WAAW,CAAC;AAE9B;;;;;;;;AAQA,OAAO,IAAMI,KAAK,GAAGP,UAAU,CAA6B,SAASO,KAAK,CACxEC,EAgBC,EACDC,OAAO;EAhBL,aAAS;IACTC,QAAQ;IACRC,OAAO;IACPC,UAAU;IACVC,SAAS;IACTC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,eAA+B;IAA/BC,OAAO,mBAAGb,qBAAqB;IAC/Bc,kBAAqC;IAArCC,UAAU,mBAAGhB,wBAAwB;IACrCiB,cAAa;IAAbC,MAAM,mBAAG,IAAI;IACbC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,OAAO;IACJC,KAAK,cAfV,uKAgBC,CADS;EAIV,OACEC,KAAC3B,aAAa;IACZ4B,MAAM;IACNrB,OAAO,EAAEA,OAAO;IAChBsB,SAAS;IACTC,YAAY,EAAEL,OAAO;IACrBhB,OAAO,EAAEA,OAAO;IAChBC,UAAU,EAAEA,UAAU;IACtBC,SAAS,EAAEA,SAAS;IACpBC,MAAM,EAAEA,MAAM;IACdC,SAAS,EAAEA,SAAS;IACpBC,QAAQ,EAAEA,QAAQ;IAClBE,OAAO,EAAEA,OAAO;IAChBE,UAAU,EAAEA;EAAU;IAAAV,UAEtBuB,0BACML,KAAK;MACTM,SAAS,EAAEjC,EAAE,CACXK,KAAK,CAAC;QACJkB,OAAO;QACPW,MAAM,EAAE,CAACb,MAAM,IAAII,QAAQ;QAC3B,WAAW,EAAEA,QAAQ;QACrBJ,MAAM;QACN,UAAU,EAAEA,MAAM,IAAII;OACvB,CAAC,EACFQ,SAAS;IACV;MAAAxB,WAEDmB;QAAMK,SAAS,EAAE5B,KAAK,CAAC,SAAS,EAAE;UAAEgB,MAAM;QAAA,CAAE;MAAC;QAAAZ,UAAGA;MAAQ,GAAQ,EAC/DY,MAAM,IACLO;QAAMK,SAAS,EAAE5B,KAAK,CAAC,QAAQ,EAAE;UAAEkB,OAAO;QAAA,CAAE;MAAC;QAAAd,UAAGY;MAAM,GACvD;IAAA;EACG,GACQ;AAEpB,CAAC,CAAC","names":["forwardRef","cn","CSSTransition","bem","DEFAULT_TOAST_CLASSNAMES","DEFAULT_TOAST_TIMEOUT","block","Toast","_a","nodeRef","children","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_b","timeout","_c","classNames","_d","action","_e","stacked","_f","twoLines","visible","props","_jsx","appear","temporary","transitionIn","_jsxs","className","padded"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/alert/src/Toast.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { CSSTransitionComponentProps } from \"@react-md/transition\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\n\nimport { DEFAULT_TOAST_CLASSNAMES, DEFAULT_TOAST_TIMEOUT } from \"./constants\";\n\nexport interface ToastProps\n  extends HTMLAttributes<HTMLDivElement>,\n    Omit<CSSTransitionComponentProps, \"temporary\"> {\n  /**\n   * Boolean if the main message content should be stacked above the action\n   * button.  This prop is invalid if an `action` is not provided.\n   */\n  stacked?: boolean;\n\n  /**\n   * Boolean if the children is a two line message. This applies some additional\n   * styles and unfortunately needs to be known before the toast is created.\n   */\n  twoLines?: boolean;\n\n  /**\n   * An optional action button to display with the toast. This will be rendered\n   * to the right of the main toast's children if provided.\n   */\n  action?: ReactNode | null;\n\n  /**\n   * Boolean if the toast is currently visible. This should be enabled on mount\n   * and then set to false once the toast has finished its display timeout.\n   */\n  visible: boolean;\n}\n\nconst block = bem(\"rmd-toast\");\n\n/**\n * This is a very low-level component that can be used to animate a new toast in\n * to a `Snackbar` as it is mainly just a wrapper of the `CSSTransition`\n * component. If you are using this component, it is generally recommended to\n * provide the `onEntered` callback as a function to start the hide visibility\n * timer and the `onExited` callback to remove the current toast from your\n * queue.\n */\nexport const Toast = forwardRef<HTMLDivElement, ToastProps>(function Toast(\n  {\n    className,\n    children,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    timeout = DEFAULT_TOAST_TIMEOUT,\n    classNames = DEFAULT_TOAST_CLASSNAMES,\n    action = null,\n    stacked = false,\n    twoLines = false,\n    visible,\n    ...props\n  },\n  nodeRef\n) {\n  return (\n    <CSSTransition\n      appear\n      nodeRef={nodeRef}\n      temporary\n      transitionIn={visible}\n      onEnter={onEnter}\n      onEntering={onEntering}\n      onEntered={onEntered}\n      onExit={onExit}\n      onExiting={onExiting}\n      onExited={onExited}\n      timeout={timeout}\n      classNames={classNames}\n    >\n      <div\n        {...props}\n        className={cn(\n          block({\n            stacked,\n            padded: !action || twoLines,\n            \"two-lines\": twoLines,\n            action,\n            \"action-2\": action && twoLines,\n          }),\n          className\n        )}\n      >\n        <span className={block(\"message\", { action })}>{children}</span>\n        {action && (\n          <span className={block(\"action\", { stacked })}>{action}</span>\n        )}\n      </div>\n    </CSSTransition>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}