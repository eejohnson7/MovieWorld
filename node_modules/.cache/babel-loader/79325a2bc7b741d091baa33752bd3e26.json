{"ast":null,"code":"/**\n * This is a small util that is used to transform a search string with common\n * patterns.\n *\n * @param value - The string to transform\n * @param lowercase - Boolean if the value should be lowercased for\n * case-insensitive searches\n * @param trim - Boolean if the leading and trailing whitespace should be\n * trimmed\n * @param ignoreWhitespace - Boolean if all whitespace should be ignored. This\n * will take precedence over the `trim` parameter if set to true.\n * @returns The transformed search string\n * @internal\n */\nexport function getSearchString(value, lowercase, trim, ignoreWhitespace) {\n  if (lowercase === void 0) {\n    lowercase = false;\n  }\n  if (trim === void 0) {\n    trim = false;\n  }\n  if (ignoreWhitespace === void 0) {\n    ignoreWhitespace = false;\n  }\n  if (lowercase) {\n    value = value.toLowerCase();\n  }\n  if (ignoreWhitespace) {\n    value = value.replace(/\\s/g, \"\");\n  } else if (trim) {\n    value = value.trim();\n  }\n  return value;\n}\n/**\n * The default implementation of the getItemValue search option that will\n * attempt to \"stringify\" any unknown item as a string.\n *\n * @param item - The current item to transform\n * @param valueKey - The key to use that should hold the value if the item is an\n * object\n * @returns the item as a string\n * @internal\n */\nexport function getItemValue(item, valueKey) {\n  if (valueKey === void 0) {\n    valueKey = \"value\";\n  }\n  switch (typeof item) {\n    case \"string\":\n      return item;\n    case \"number\":\n      return Number.isNaN(item) ? \"\" : \"\".concat(item);\n    case \"function\":\n      return getItemValue(item(), valueKey);\n    case \"object\":\n      return item ? getItemValue(item[valueKey], valueKey) : \"\";\n    default:\n      return \"\";\n  }\n}\nexport var DEFAULT_GET_ITEM_VALUE = getItemValue;\nexport var DEFAULT_VALUE_KEY = \"value\";\nexport var DEFAULT_TRIM = true;\nexport var DEFAULT_IGNORE_WHITESPACE = false;\nexport var DEFAULT_SEARCH_RESET_TIME = 500;\nexport var DEFAULT_SEARCH_OPTIONS = {\n  getItemValue: DEFAULT_GET_ITEM_VALUE,\n  valueKey: DEFAULT_VALUE_KEY,\n  trim: DEFAULT_TRIM,\n  ignoreWhitespace: DEFAULT_IGNORE_WHITESPACE\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;AAcA,OAAM,SAAUA,eAAe,CAC7BC,KAAa,EACbC,SAAiB,EACjBC,IAAY,EACZC,gBAAwB;EAFxB;IAAAF,iBAAiB;EAAA;EACjB;IAAAC,YAAY;EAAA;EACZ;IAAAC,wBAAwB;EAAA;EAExB,IAAIF,SAAS,EAAE;IACbD,KAAK,GAAGA,KAAK,CAACI,WAAW,EAAE;;EAG7B,IAAID,gBAAgB,EAAE;IACpBH,KAAK,GAAGA,KAAK,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;GACjC,MAAM,IAAIH,IAAI,EAAE;IACfF,KAAK,GAAGA,KAAK,CAACE,IAAI,EAAE;;EAGtB,OAAOF,KAAK;AACd;AAEA;;;;;;;;;;AAUA,OAAM,SAAUM,YAAY,CAACC,IAAa,EAAEC,QAAkB;EAAlB;IAAAA,kBAAkB;EAAA;EAC5D,QAAQ,OAAOD,IAAI;IACjB,KAAK,QAAQ;MACX,OAAOA,IAAI;IACb,KAAK,QAAQ;MACX,OAAOE,MAAM,CAACC,KAAK,CAACH,IAAI,CAAC,GAAG,EAAE,GAAG,UAAGA,IAAI,CAAE;IAC5C,KAAK,UAAU;MACb,OAAOD,YAAY,CAACC,IAAI,EAAE,EAAEC,QAAQ,CAAC;IACvC,KAAK,QAAQ;MACX,OAAOD,IAAI,GACPD,YAAY,CAAEC,IAAgC,CAACC,QAAQ,CAAC,EAAEA,QAAQ,CAAC,GACnE,EAAE;IACR;MACE,OAAO,EAAE;EAAC;AAEhB;AAiDA,OAAO,IAAMG,sBAAsB,GAAGL,YAAY;AAClD,OAAO,IAAMM,iBAAiB,GAAG,OAAO;AACxC,OAAO,IAAMC,YAAY,GAAG,IAAI;AAChC,OAAO,IAAMC,yBAAyB,GAAG,KAAK;AAC9C,OAAO,IAAMC,yBAAyB,GAAG,GAAG;AAE5C,OAAO,IAAMC,sBAAsB,GAA4B;EAC7DV,YAAY,EAAEK,sBAAsB;EACpCH,QAAQ,EAAEI,iBAAiB;EAC3BV,IAAI,EAAEW,YAAY;EAClBV,gBAAgB,EAAEW;CACnB","names":["getSearchString","value","lowercase","trim","ignoreWhitespace","toLowerCase","replace","getItemValue","item","valueKey","Number","isNaN","DEFAULT_GET_ITEM_VALUE","DEFAULT_VALUE_KEY","DEFAULT_TRIM","DEFAULT_IGNORE_WHITESPACE","DEFAULT_SEARCH_RESET_TIME","DEFAULT_SEARCH_OPTIONS"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/search/utils.ts"],"sourcesContent":["/**\n * This is a small util that is used to transform a search string with common\n * patterns.\n *\n * @param value - The string to transform\n * @param lowercase - Boolean if the value should be lowercased for\n * case-insensitive searches\n * @param trim - Boolean if the leading and trailing whitespace should be\n * trimmed\n * @param ignoreWhitespace - Boolean if all whitespace should be ignored. This\n * will take precedence over the `trim` parameter if set to true.\n * @returns The transformed search string\n * @internal\n */\nexport function getSearchString(\n  value: string,\n  lowercase = false,\n  trim = false,\n  ignoreWhitespace = false\n): string {\n  if (lowercase) {\n    value = value.toLowerCase();\n  }\n\n  if (ignoreWhitespace) {\n    value = value.replace(/\\s/g, \"\");\n  } else if (trim) {\n    value = value.trim();\n  }\n\n  return value;\n}\n\n/**\n * The default implementation of the getItemValue search option that will\n * attempt to \"stringify\" any unknown item as a string.\n *\n * @param item - The current item to transform\n * @param valueKey - The key to use that should hold the value if the item is an\n * object\n * @returns the item as a string\n * @internal\n */\nexport function getItemValue(item: unknown, valueKey = \"value\"): string {\n  switch (typeof item) {\n    case \"string\":\n      return item;\n    case \"number\":\n      return Number.isNaN(item) ? \"\" : `${item}`;\n    case \"function\":\n      return getItemValue(item(), valueKey);\n    case \"object\":\n      return item\n        ? getItemValue((item as Record<string, unknown>)[valueKey], valueKey)\n        : \"\";\n    default:\n      return \"\";\n  }\n}\n\n/**\n * A function that will get a string value from each item. The default\n * implementation will:\n *\n * - return a number as a string\n * - return a string as itself\n * - return the result of item() if it is a function (this will also be used if\n *   the `valueKey` on an object is a function).\n * - return item[valueKey] if it's an object (this uses typeof item === \"object\")\n * - return the empty string for all other data types\n */\nexport type GetItemValue<T = unknown> = (item: T, valueKey: string) => string;\n\nexport interface BaseSearchOptions<T = unknown> {\n  /**\n   * The key to use to get a value string if the item is an object.\n   */\n  valueKey?: string;\n\n  /**\n   * A function that will get a string value from each item. The default\n   * implementation will:\n   *\n   * - return a number as a string\n   * - return a string as itself\n   * - return the result of item() if it is a function (this will also be used\n   *   if the `valueKey` on an object is a function).\n   * - return item[valueKey] if it's an object (this uses typeof item === \"object\")\n   * - return the empty string for all other data types\n   */\n  getItemValue?: GetItemValue<T>;\n}\n\nexport interface SearchOptions<T = unknown> extends BaseSearchOptions<T> {\n  /**\n   * Boolean if the query string and each item should have the leading and\n   * trailing spaces removed.\n   */\n  trim?: boolean;\n\n  /**\n   * Boolean if all the whitespace should be ignored in the query string and for\n   * each item.\n   */\n  ignoreWhitespace?: boolean;\n}\n\nexport const DEFAULT_GET_ITEM_VALUE = getItemValue;\nexport const DEFAULT_VALUE_KEY = \"value\";\nexport const DEFAULT_TRIM = true;\nexport const DEFAULT_IGNORE_WHITESPACE = false;\nexport const DEFAULT_SEARCH_RESET_TIME = 500;\n\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\n  getItemValue: DEFAULT_GET_ITEM_VALUE,\n  valueKey: DEFAULT_VALUE_KEY,\n  trim: DEFAULT_TRIM,\n  ignoreWhitespace: DEFAULT_IGNORE_WHITESPACE,\n};\n"]},"metadata":{},"sourceType":"module"}