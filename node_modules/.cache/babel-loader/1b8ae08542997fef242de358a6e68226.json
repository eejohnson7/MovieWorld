{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * A hook that implements the base functionality for selecting different tree\n * items.\n *\n * @param defaultSelectedIds - The default list of tree item ids that should be\n * expanded by default\n * @param multiSelect - Boolean if the tree can have multiple items selected or\n * not.\n * @returns an object containing props that can be passed to the `Tree`\n * component to handle the selection state within the tree\n */\nexport function useTreeItemSelection(defaultSelectedIds, multiSelect) {\n  if (multiSelect === void 0) {\n    multiSelect = false;\n  }\n  var _a = __read(useState(defaultSelectedIds), 2),\n    selectedIds = _a[0],\n    setSelectedIds = _a[1];\n  var onItemSelect = useCallback(function (itemId) {\n    setSelectedIds(function (selectedIds) {\n      if (!multiSelect) {\n        if (selectedIds[0] === itemId && selectedIds.length === 1) {\n          return selectedIds;\n        }\n        return [itemId];\n      }\n      var i = selectedIds.indexOf(itemId);\n      var nextSelectedIds = selectedIds.slice();\n      if (i === -1) {\n        nextSelectedIds.push(itemId);\n      } else {\n        nextSelectedIds.splice(i, 1);\n      }\n      return nextSelectedIds;\n    });\n  }, [multiSelect]);\n  var onMultiItemSelect = useCallback(function (itemIds) {\n    setSelectedIds(itemIds);\n  }, []);\n  return {\n    selectedIds: selectedIds,\n    multiSelect: multiSelect,\n    onItemSelect: onItemSelect,\n    onMultiItemSelect: onMultiItemSelect\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAI7C;;;;;;;;;;;AAWA,OAAM,SAAUC,oBAAoB,CAClCC,kBAAqD,EACrDC,WAAmB;EAAnB;IAAAA,mBAAmB;EAAA;EAEb,gBAAgCH,QAAQ,CAACE,kBAAkB,CAAC;IAA3DE,WAAW;IAAEC,cAAc,QAAgC;EAClE,IAAMC,YAAY,GAAGP,WAAW,CAC9B,UAACQ,MAAkB;IACjBF,cAAc,CAAC,UAACD,WAAW;MACzB,IAAI,CAACD,WAAW,EAAE;QAChB,IAAIC,WAAW,CAAC,CAAC,CAAC,KAAKG,MAAM,IAAIH,WAAW,CAACI,MAAM,KAAK,CAAC,EAAE;UACzD,OAAOJ,WAAW;;QAGpB,OAAO,CAACG,MAAM,CAAC;;MAGjB,IAAME,CAAC,GAAGL,WAAW,CAACM,OAAO,CAACH,MAAM,CAAC;MACrC,IAAMI,eAAe,GAAGP,WAAW,CAACQ,KAAK,EAAE;MAC3C,IAAIH,CAAC,KAAK,CAAC,CAAC,EAAE;QACZE,eAAe,CAACE,IAAI,CAACN,MAAM,CAAC;OAC7B,MAAM;QACLI,eAAe,CAACG,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;;MAG9B,OAAOE,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC,EACD,CAACR,WAAW,CAAC,CACd;EAED,IAAMY,iBAAiB,GAAGhB,WAAW,CAAC,UAACiB,OAAoB;IACzDX,cAAc,CAACW,OAAO,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLZ,WAAW;IACXD,WAAW;IACXG,YAAY;IACZS,iBAAiB;GAClB;AACH","names":["useCallback","useState","useTreeItemSelection","defaultSelectedIds","multiSelect","selectedIds","setSelectedIds","onItemSelect","itemId","length","i","indexOf","nextSelectedIds","slice","push","splice","onMultiItemSelect","itemIds"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tree/src/useTreeItemSelection.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport type { SelectedIds, TreeItemId, TreeItemSelection } from \"./types\";\n\n/**\n * A hook that implements the base functionality for selecting different tree\n * items.\n *\n * @param defaultSelectedIds - The default list of tree item ids that should be\n * expanded by default\n * @param multiSelect - Boolean if the tree can have multiple items selected or\n * not.\n * @returns an object containing props that can be passed to the `Tree`\n * component to handle the selection state within the tree\n */\nexport function useTreeItemSelection(\n  defaultSelectedIds: SelectedIds | (() => SelectedIds),\n  multiSelect = false\n): Required<TreeItemSelection> {\n  const [selectedIds, setSelectedIds] = useState(defaultSelectedIds);\n  const onItemSelect = useCallback(\n    (itemId: TreeItemId) => {\n      setSelectedIds((selectedIds) => {\n        if (!multiSelect) {\n          if (selectedIds[0] === itemId && selectedIds.length === 1) {\n            return selectedIds;\n          }\n\n          return [itemId];\n        }\n\n        const i = selectedIds.indexOf(itemId);\n        const nextSelectedIds = selectedIds.slice();\n        if (i === -1) {\n          nextSelectedIds.push(itemId);\n        } else {\n          nextSelectedIds.splice(i, 1);\n        }\n\n        return nextSelectedIds;\n      });\n    },\n    [multiSelect]\n  );\n\n  const onMultiItemSelect = useCallback((itemIds: SelectedIds) => {\n    setSelectedIds(itemIds);\n  }, []);\n\n  return {\n    selectedIds,\n    multiSelect,\n    onItemSelect,\n    onMultiItemSelect,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}