{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"../bem\";\nimport { useAppSize } from \"../sizing/useAppSize\";\nvar block = bem(\"rmd-grid\");\nexport var GridCell = forwardRef(function GridCell(_a, ref) {\n  var _b, _c, _d, _e, _f, _g, _h;\n  var style = _a.style,\n    className = _a.className,\n    clone = _a.clone,\n    children = _a.children,\n    propColSpan = _a.colSpan,\n    propColStart = _a.colStart,\n    propColEnd = _a.colEnd,\n    propRowSpan = _a.rowSpan,\n    propRowStart = _a.rowStart,\n    propRowEnd = _a.rowEnd,\n    phone = _a.phone,\n    tablet = _a.tablet,\n    desktop = _a.desktop,\n    largeDesktop = _a.largeDesktop,\n    props = __rest(_a, [\"style\", \"className\", \"clone\", \"children\", \"colSpan\", \"colStart\", \"colEnd\", \"rowSpan\", \"rowStart\", \"rowEnd\", \"phone\", \"tablet\", \"desktop\", \"largeDesktop\"]);\n  var _j = useAppSize(),\n    isPhone = _j.isPhone,\n    isTablet = _j.isTablet,\n    isDesktop = _j.isDesktop,\n    isLargeDesktop = _j.isLargeDesktop;\n  var colSpan = propColSpan;\n  var colStart = propColStart;\n  var colEnd = propColEnd;\n  var rowSpan = propRowSpan;\n  var rowStart = propRowStart;\n  var rowEnd = propRowEnd;\n  var media = isPhone && phone || isTablet && tablet || isLargeDesktop && largeDesktop || isDesktop && desktop;\n  if (media) {\n    _b = media.rowSpan, rowSpan = _b === void 0 ? propRowSpan : _b, _c = media.rowStart, rowStart = _c === void 0 ? propRowStart : _c, _d = media.rowEnd, rowEnd = _d === void 0 ? propRowEnd : _d, _e = media.colSpan, colSpan = _e === void 0 ? propColSpan : _e, _f = media.colStart, colStart = _f === void 0 ? propColStart : _f, _g = media.colEnd, colEnd = _g === void 0 ? propColEnd : _g;\n  }\n  var cellStyle = __assign({\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowSpan ? \"span \".concat(rowSpan) : rowEnd\n  }, style);\n  var cellClassName = cn(block(\"cell\", (_h = {}, _h[\"\".concat(colSpan)] = colSpan, _h)), className);\n  if (clone && isValidElement(children)) {\n    var child = Children.only(children);\n    return cloneElement(child, {\n      style: __assign(__assign({}, child.props.style), cellStyle),\n      className: cn(cellClassName, child.props.className)\n    });\n  }\n  return _jsx(\"div\", __assign({}, props, {\n    ref: ref,\n    style: cellStyle,\n    className: cellClassName\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAEC,cAAc,QAAQ,OAAO;AAC1E,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,UAAU,QAAQ,sBAAsB;AAyFjD,IAAMC,KAAK,GAAGF,GAAG,CAAC,UAAU,CAAC;AAE7B,OAAO,IAAMG,QAAQ,GAAGN,UAAU,CAChC,SAASM,QAAQ,CACfC,EAgBC,EACDC,GAAG;;EAhBD,SAAK;IACLC,SAAS;IACTC,KAAK;IACLC,QAAQ;IACCC,WAAW;IACVC,YAAY;IACdC,UAAU;IACTC,WAAW;IACVC,YAAY;IACdC,UAAU;IAClBC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC,YAAY;IACTC,KAAK,cAfV,2JAgBC,CADS;EAIJ,SAAmDlB,UAAU,EAAE;IAA7DmB,OAAO;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,cAAc,oBAAiB;EAErE,IAAIC,OAAO,GAAGf,WAAW;EACzB,IAAIgB,QAAQ,GAAGf,YAAY;EAC3B,IAAIgB,MAAM,GAAGf,UAAU;EACvB,IAAIgB,OAAO,GAAGf,WAAW;EACzB,IAAIgB,QAAQ,GAAGf,YAAY;EAC3B,IAAIgB,MAAM,GAAGf,UAAU;EACvB,IAAMgB,KAAK,GACRV,OAAO,IAAIL,KAAK,IAChBM,QAAQ,IAAIL,MAAO,IACnBO,cAAc,IAAIL,YAAa,IAC/BI,SAAS,IAAIL,OAAQ;EAExB,IAAIa,KAAK,EAAE;IAEPC,KAMED,KAAK,QANc,EAArBH,OAAO,mBAAGf,WAAW,OACrBoB,KAKEF,KAAK,SALgB,EAAvBF,QAAQ,mBAAGf,YAAY,OACvBoB,KAIEH,KAAK,OAJY,EAAnBD,MAAM,mBAAGf,UAAU,OACnBoB,KAGEJ,KAAK,QAHc,EAArBN,OAAO,mBAAGf,WAAW,OACrB0B,KAEEL,KAAK,SAFgB,EAAvBL,QAAQ,mBAAGf,YAAY,OACvB0B,KACEN,KAAK,OADY,EAAnBJ,MAAM,mBAAGf,UAAU;;EAIvB,IAAM0B,SAAS;IACbC,eAAe,EAAEb,QAAQ;IACzBc,aAAa,EAAEb,MAAM;IACrBc,YAAY,EAAEZ,QAAQ;IACtBa,UAAU,EAAEd,OAAO,GAAG,eAAQA,OAAO,CAAE,GAAGE;EAAM,GAC7Ca,KAAK,CACT;EACD,IAAMC,aAAa,GAAG5C,EAAE,CACtBG,KAAK,CAAC,MAAM,YACV0C,GAAC,UAAGpB,OAAO,CAAE,IAAGA,OAAO,MACvB,EACFlB,SAAS,CACV;EAED,IAAIC,KAAK,IAAIT,cAAc,CAACU,QAAQ,CAAC,EAAE;IACrC,IAAMqC,KAAK,GAAGlD,QAAQ,CAACmD,IAAI,CAACtC,QAAQ,CAAC;IACrC,OAAOZ,YAAY,CAACiD,KAAK,EAAE;MACzBH,KAAK,wBAAOG,KAAK,CAAC1B,KAAK,CAACuB,KAAK,GAAKL,SAAS,CAAE;MAC7C/B,SAAS,EAAEP,EAAE,CAAC4C,aAAa,EAAEE,KAAK,CAAC1B,KAAK,CAACb,SAAS;KACnD,CAAC;;EAGJ,OACEyC,yBAAS5B,KAAK;IAAEd,GAAG,EAAEA,GAAG;IAAEqC,KAAK,EAAEL,SAAS;IAAE/B,SAAS,EAAEqC;EAAa;IAAAnC,UACjEA;EAAQ,GACL;AAEV,CAAC,CACF","names":["Children","cloneElement","forwardRef","isValidElement","cn","bem","useAppSize","block","GridCell","_a","ref","className","clone","children","propColSpan","propColStart","propColEnd","propRowSpan","propRowStart","propRowEnd","phone","tablet","desktop","largeDesktop","props","isPhone","isTablet","isDesktop","isLargeDesktop","colSpan","colStart","colEnd","rowSpan","rowStart","rowEnd","media","_b","_c","_d","_e","_f","_g","cellStyle","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","style","cellClassName","_h","child","only","_jsx"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/layout/GridCell.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\n\nimport { bem } from \"../bem\";\nimport { useAppSize } from \"../sizing/useAppSize\";\n\nexport interface GridCSSProperties {\n  /**\n   * The number of rows that a cell should span. If this value is provided, it\n   * will be used instead of the `rowEnd` property. When this is `undefined`, it\n   * will span 1 row as normal.\n   */\n  rowSpan?: number;\n\n  /**\n   * The row that the cell should start at. This is a nice way to be able to\n   * reorder cells within your grid.\n   */\n  rowStart?: number | string;\n\n  /**\n   * The row that the cell should end at. This is a nice way to be able to\n   * reorder cells within your grid but will be ignored if the `rowSpan`\n   * property is provided.\n   */\n  rowEnd?: number | string;\n\n  /**\n   * The number of columns that the cell should span. If this value is provided,\n   * it will be used instead of the `colEnd` property.\n   *\n   * Note: If this value is larger than the number of columns allowed in the\n   * current grid, it will shrink all the other columns.\n   */\n  colSpan?: number;\n\n  /**\n   * The column that the cell should start at. When this is `undefined`, it will\n   * just appear in normal order within the grid.\n   */\n  colStart?: number | string;\n\n  /**\n   * The column that the cell should stop at. When this is `undefined`, it will\n   * just appear in normal order within the grid and span only 1 column. If the\n   * `colSpan` property was provided, this will be ignored.\n   */\n  colEnd?: number | string;\n}\n\nexport interface GridCellProps\n  extends HTMLAttributes<HTMLDivElement>,\n    GridCSSProperties {\n  /**\n   * Boolean if the className should be cloned into the child instead of\n   * wrapping in another div. This will only work if the `children` is a single\n   * ReactElement.\n   */\n  clone?: boolean;\n\n  /**\n   * The number of columns that the cell should span. If this value is provided,\n   * it will be used instead of the `colEnd` property.\n   *\n   * Note: If this value is larger than the number of columns allowed in the\n   * current grid, it will shrink all the other columns.\n   */\n  colSpan?: number;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on phones only.\n   */\n  phone?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on tablets and\n   * above.\n   */\n  tablet?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on desktop\n   * screens.\n   */\n  desktop?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on large\n   * desktops only.\n   */\n  largeDesktop?: GridCSSProperties;\n}\n\nconst block = bem(\"rmd-grid\");\n\nexport const GridCell = forwardRef<HTMLDivElement, GridCellProps>(\n  function GridCell(\n    {\n      style,\n      className,\n      clone,\n      children,\n      colSpan: propColSpan,\n      colStart: propColStart,\n      colEnd: propColEnd,\n      rowSpan: propRowSpan,\n      rowStart: propRowStart,\n      rowEnd: propRowEnd,\n      phone,\n      tablet,\n      desktop,\n      largeDesktop,\n      ...props\n    },\n    ref\n  ) {\n    const { isPhone, isTablet, isDesktop, isLargeDesktop } = useAppSize();\n\n    let colSpan = propColSpan;\n    let colStart = propColStart;\n    let colEnd = propColEnd;\n    let rowSpan = propRowSpan;\n    let rowStart = propRowStart;\n    let rowEnd = propRowEnd;\n    const media =\n      (isPhone && phone) ||\n      (isTablet && tablet) ||\n      (isLargeDesktop && largeDesktop) ||\n      (isDesktop && desktop);\n\n    if (media) {\n      ({\n        rowSpan = propRowSpan,\n        rowStart = propRowStart,\n        rowEnd = propRowEnd,\n        colSpan = propColSpan,\n        colStart = propColStart,\n        colEnd = propColEnd,\n      } = media);\n    }\n\n    const cellStyle = {\n      gridColumnStart: colStart,\n      gridColumnEnd: colEnd,\n      gridRowStart: rowStart,\n      gridRowEnd: rowSpan ? `span ${rowSpan}` : rowEnd,\n      ...style,\n    };\n    const cellClassName = cn(\n      block(\"cell\", {\n        [`${colSpan}`]: colSpan,\n      }),\n      className\n    );\n\n    if (clone && isValidElement(children)) {\n      const child = Children.only(children);\n      return cloneElement(child, {\n        style: { ...child.props.style, ...cellStyle },\n        className: cn(cellClassName, child.props.className),\n      });\n    }\n\n    return (\n      <div {...props} ref={ref} style={cellStyle} className={cellClassName}>\n        {children}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}