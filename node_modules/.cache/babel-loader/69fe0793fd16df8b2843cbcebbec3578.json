{"ast":null,"code":"// This is pretty much `react-transition-group` since I liked the API wanted a\n// hook implementation. I also had to redo most of the types for v4.0.0 due to\n// the new `nodeRef` stuff, so it made it easier to create the types and hooks\n// here.\nexport {};","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA","names":[],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/types.ts"],"sourcesContent":["// This is pretty much `react-transition-group` since I liked the API wanted a\n// hook implementation. I also had to redo most of the types for v4.0.0 due to\n// the new `nodeRef` stuff, so it made it easier to create the types and hooks\n// here.\n\nimport type { ReactElement, Ref, RefCallback } from \"react\";\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionActions {\n  /**\n   * Boolean if the transition should occur immediately once the component\n   * mounts if the {@link TransitionOptions.transitionIn} is `true`\n   *\n   * @defaultValue `false`\n   */\n  appear?: boolean;\n\n  /**\n   * Boolean if the transition should occur whenever the\n   * {@link TransitionOptions.transitionIn} is switch to `true` after the\n   * component has been rendered in the DOM.\n   *\n   * @defaultValue `true`\n   */\n  enter?: boolean;\n\n  /**\n   * Boolean if the transition should occur whenever the\n   * {@link TransitionOptions.transitionIn} is switch to `false` after the\n   * component has been rendered in the DOM.\n   *\n   * @defaultValue `true`\n   */\n  exit?: boolean;\n}\n\n/**\n * An object timeout values that would be used for each\n * {@link TransitionActions}. If a value is set to `0` or `undefined`, the\n * transition will not occur.\n *\n * @remarks \\@since 4.0.0\n */\nexport type TransitionTimeoutObject = {\n  [action in keyof TransitionActions]?: number;\n};\n\n/**\n * Either a single timeout duration in milliseconds to use for each of the\n * {@link TransitionActions} stages, or an object of transition durations.\n *\n * @see {@link TransitionTimeout}\n * @remarks \\@since 4.0.0\n */\nexport type TransitionTimeout = number | Readonly<TransitionTimeoutObject>;\n\n/**\n * The way the transition works is by flowing through the different stages and\n * assigning waiting for a timeout to occur. Setting the `stage` to `enter` will\n * begin the enter transition going from `enter -> entering -> entered` while\n * setting the stage to `exit` will transition from `exit -> exiting -> exited`.\n *\n * @remarks \\@since 4.0.0\n */\nexport type TransitionStage =\n  | \"enter\"\n  | \"entering\"\n  | \"entered\"\n  | \"exit\"\n  | \"exiting\"\n  | \"exited\";\n\n/**\n * This function is called at each `\"enter\"` {@link TransitionStage}. If a\n * {@link TransitionOptions.nodeRef} was provided, the DOM node should be\n * available in `nodeRef.current` by this point if the transition requires DOM\n * calculations.\n *\n * @param appearing - Boolean if this is the initial `appear` flow.\n * @remarks \\@since 4.0.0\n */\nexport type TransitionEnterHandler = (appearing: boolean) => void;\n\n/**\n * THis function is called at each `\"exit\"` {@link TransitionStage}. If a {@link\n * TransitionOptions.nodeRef} was provided, the DOM node should be available in\n * `nodeRef.current` by this point if the transition requires DOM calculations.\n *\n * @remarks \\@since 4.0.0\n */\nexport type TransitionExitHandler = () => void;\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionCallbacks {\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"enter\"`.\n   *\n   * @see {@link TransitionEnterHandler}\n   */\n  onEnter?: TransitionEnterHandler;\n\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"enter\"`.\n   *\n   * @see {@link TransitionEnterHandler}\n   */\n  onEntering?: TransitionEnterHandler;\n\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"entering\"`.\n   *\n   * @see {@link TransitionEnterHandler}\n   */\n  onEntered?: TransitionEnterHandler;\n\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"entered\"`.\n   *\n   * @see {@link TransitionEnterHandler}\n   */\n  onExit?: TransitionExitHandler;\n\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"exiting\"`.\n   *\n   * @see {@link TransitionExitHandler}\n   */\n  onExiting?: TransitionExitHandler;\n\n  /**\n   * This function will be called once the {@link TransitionStage} has been set\n   * to `\"exited\"`.\n   *\n   * @see {@link TransitionExitHandler}\n   */\n  onExited?: TransitionExitHandler;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface PreconfiguredTransitionInDefaultedOptions<\n  E extends HTMLElement\n> extends TransitionActions,\n    TransitionCallbacks {\n  /**\n   * An optional ref that will be merged with the\n   * {@link TransitionHookReturnValue.ref}\n   */\n  nodeRef?: Ref<E>;\n\n  /**\n   * Boolean if the element should mount and unmount based on the\n   * {@link transitionIn} value.\n   *\n   * @defaultValue `false`\n   */\n  temporary?: boolean;\n\n  /**\n   * This boolean controls the transition by activating flowing through the\n   * {@link TransitionStage}.\n   *\n   * @see {@link TransitionActions} for a description around the transitions.\n   */\n  transitionIn?: boolean;\n  /** {@inheritDoc TransitionTimeout} */\n  timeout?: TransitionTimeout;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface PreconfiguredTransitionOptions<E extends HTMLElement>\n  extends PreconfiguredTransitionInDefaultedOptions<E> {\n  /** {@inheritDoc PreconfiguredTransitionInDefaultedOptions.transitionIn} */\n  transitionIn: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionOptions<E extends HTMLElement>\n  extends PreconfiguredTransitionOptions<E> {\n  /** {@inheritDoc TransitionTimeout} */\n  timeout: TransitionTimeout;\n}\n\n/**\n * An object of classnames that will be applied based on the\n * {@link TransitionStage} where all the classes in the previous stages will\n * also be applied.\n *\n * @example\n * Explaining className application\n * ```ts\n * const { ref, className, stage, appearing } = useCSSTransition({\n *   appear: true,\n *   enter: true,\n *   exit: true,\n *   timeout: 300,\n *   classNames: {\n *     appear: \"appear\",\n *     appearEnter: \"appear--enter\",\n *     appearDone: \"appear--done appear--complete\",\n *     enter: \"enter\",\n *     enterEnter: \"\",\n *     enterDone: \"enter--done enter--complete\",\n *     exit: \"\",\n *     exitEnter: \"\",\n *     exitDone: \"exit--done exit--complete\",\n *   }\n * });\n *\n * // stage === \"enter\" && appearing\n * // className === \"appear\"\n * //\n * // stage === \"entering\" && appearing\n * // className === \"appear appear--enter\"\n * //\n * // stage === \"entered\" && appearing\n * // className === \"appear--done appear--complete\"\n * //\n * //\n * // stage === \"enter\" && !appearing\n * // className === \"enter\"\n * //\n * // stage === \"entering\" && !appearing\n * // className === \"enter\"\n * //\n * // stage === \"entered\" && !appearing\n * // className === \"enter--done enter--complete\"\n * //\n * //\n * // stage === \"exit\"\n * // className === \"\"\n * //\n * // stage === \"exiting\"\n * // className === \"\"\n * //\n * // stage === \"exited\"\n * // className === \"exit--done exit--complete\"\n * ```\n *\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionClassNamesObject {\n  /**\n   * The class name to apply starting at the `\"enter\"` {@link TransitionStage}\n   * while {@link TransitionState.appearing}.\n   *\n   * @defaultValue `\"\"`\n   */\n  appear?: string;\n\n  /**\n   * The class name to apply starting at the `\"entering\"` {@link TransitionStage}\n   * while {@link TransitionState.appearing}.\n   *\n   * @defaultValue `\"\"`\n   */\n  appearActive?: string;\n\n  /**\n   * The class name to apply starting at the `\"entered\"` {@link TransitionStage}\n   * while {@link TransitionState.appearing}.\n   *\n   * @defaultValue `\"\"`\n   */\n  appearDone?: string;\n\n  /**\n   * The class name to apply starting at the `\"enter\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  enter?: string;\n\n  /**\n   * The class name to apply starting at the `\"entering\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  enterActive?: string;\n\n  /**\n   * The class name to apply starting at the `\"entered\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  enterDone?: string;\n\n  /**\n   * The class name to apply starting at the `\"exit\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  exit?: string;\n\n  /**\n   * The class name to apply starting at the `\"exiting\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  exitActive?: string;\n\n  /**\n   * The class name to apply starting at the `\"exited\"` {@link TransitionStage}\n   *\n   * @defaultValue `\"\"`\n   */\n  exitDone?: string;\n}\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport type CSSTransitionClassNames =\n  | string\n  | Readonly<CSSTransitionClassNamesObject>;\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface PreconfiguredCSSTransitionInDefaultedOptions<\n  E extends HTMLElement\n> extends PreconfiguredTransitionInDefaultedOptions<E> {\n  /**\n   * An optional className to be merged with the transition classes.\n   */\n  className?: string;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface PreconfiguredCSSTransitionOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionInDefaultedOptions<E> {\n  /** {@inheritDoc PreconfiguredTransitionInDefaultedOptions.transitionIn} */\n  transitionIn: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionHookOptions<E extends HTMLElement>\n  extends TransitionOptions<E> {\n  /**\n   * Boolean if the DOM should forcefully be reflow each time a transition\n   * change occurs. This is generally required for any CSS transition and is\n   * set to `true` for the {@link useCSSTransition} hook.\n   *\n   * @defaultValue `false`\n   */\n  reflow?: boolean;\n}\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionState {\n  /** {@inheritDoc TransitionStage} */\n  stage: TransitionStage;\n\n  /**\n   * Boolean if the element should be rendered or not. This will always be\n   * `true` if the {@link TransitionOptions.temporary} is `false`. Otherwise, it\n   * will be `true` when not the `\"exited\"` {@link TransitionStage}.\n   */\n  rendered: boolean;\n\n  /**\n   * Boolean if this is the first {@link TransitionAction.appear} transition.\n   * This will be `true` during the first transition if\n   * {@link TransitionAction.appear} was also `true`. Otherwise it will be\n   * `false`.\n   */\n  appearing: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface TransitionHookReturnValue<E extends HTMLElement>\n  extends TransitionState {\n  /**\n   * A ref that is required for the transition to occur and should be passed to\n   * the element affected by the transition.\n   */\n  ref: RefCallback<E>;\n\n  /**\n   * A function that can be used to specifically set the transition to a\n   * specific stage. This shouldn't really be used too much and is really just\n   * useful for \"appear only transitions\" that do not unmount the child\n   * elements.\n   *\n   * @example\n   * Simple Example\n   * ```tsx\n   * import { ReactElement, useEffect, useRef } from \"react\";\n   * import { useCSSTransition } from \"@react-md/transition\";\n   * import { useRouter } from \"react-router-dom\";\n   *\n   * function Example(): ReactElement {\n   *   const { pathname } = useRouter();\n   *   const { elementProps, transitionTo } = useCSSTransition({\n   *     transitionIn: true,\n   *     timeout: 1000,\n   *     classNames: \"some-enter-transition\",\n   *   });\n   *\n   *   useEffect(() => {\n   *     // Do not trigger transition on first load.\n   *     if (prevPathname.current === pathname) {\n   *       return;\n   *     }\n   *\n   *     prevPathname.current = pathname;\n   *     transitionTo(\"enter\");\n   *   }, [pathname, transitionTo]);\n   *\n   *   return <div {...elementProps}>{content}</div>;\n   * }\n   * ```\n   *\n   * @param stage - The {@link TransitionStage} to set to\n   */\n  transitionTo(stage: TransitionStage): void;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionHookOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionOptions<E> {\n  /** {@inheritDoc TransitionTimeout} */\n  timeout: TransitionTimeout;\n  /** {@inheritDoc CSSTransitionClassNames} */\n  classNames: CSSTransitionClassNames;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionElementProps<E extends HTMLElement> {\n  /** {@inheritDoc TransitionHookReturnValue.ref} */\n  ref: RefCallback<E>;\n\n  /**\n   * The current transition class name or `undefined`.\n   */\n  className: string | undefined;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionHookReturnValue<E extends HTMLElement>\n  extends TransitionHookReturnValue<E>,\n    CSSTransitionElementProps<E> {\n  /**\n   * This can be used so that you don't need to destructure multiple props from\n   * the hook return value to pass to the transitioning component.\n   *\n   * @example\n   * Simple Example\n   * ```tsx\n   * import type { ReactElement } from \"react\";\n   * import { useCSSTransition } from \"@react-md/transition\";\n   *\n   * interface ExampleProps {\n   *   transitionIn: boolean;\n   *   children: ReactNode;\n   * }\n   *\n   * function Example({ transitionIn, children }: ExampleProps): ReactElement | null {\n   *   const { elementProps, rendered } = useCSSTransition({\n   *     timeout: 150,\n   *     classNames: \"example\",\n   *     transitionIn,\n   *   });\n   *\n   *   if (!rendered) {\n   *     return null;\n   *   }\n   *\n   *   return <div {...elementProps}>{children}</div>\n   * }\n   * ```\n   *\n   * @example\n   * Verbose Version\n   * ```tsx\n   * import type { ReactElement } from \"react\";\n   * import { useCSSTransition } from \"@react-md/transition\";\n   *\n   * interface ExampleProps {\n   *   transitionIn: boolean;\n   *   children: ReactNode;\n   * }\n   *\n   * function Example({ transitionIn, children }: ExampleProps): ReactElement | null {\n   *   const { ref, className, rendered } = useCSSTransition({\n   *     timeout: 150,\n   *     classNames: \"example\",\n   *     transitionIn,\n   *   });\n   *\n   *   if (!rendered) {\n   *     return null;\n   *   }\n   *\n   *   return <div ref={ref} className={className}>{children}</div>\n   * }\n   * ```\n   */\n  elementProps: CSSTransitionElementProps<E>;\n}\n\n/**\n * This is mostly an internal type that can be used to help with transitionable\n * components.\n *\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionComponentProps extends TransitionCallbacks {\n  /** {@inheritDoc CSSTransitionHookOptions.temporary} */\n  temporary?: boolean;\n  /** {@inheritDoc TransitionTimeout} */\n  timeout?: TransitionTimeout;\n  /** {@inheritDoc CSSTransitionClassNames} */\n  classNames?: CSSTransitionClassNames;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CSSTransitionComponentImplementation<E extends HTMLElement> {\n  /**\n   * The child element that should have a `ref` and `className` cloned into\n   * using the `cloneElement` API. If the child is a custom component, you\n   * **must** use `React.forwardRef` and pass both of these to a DOM element for\n   * the transition to work.\n   */\n  children: ReactElement<{ ref: Ref<E>; className: string | undefined }>;\n}\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport type FixedPositioningTransitionCallbacks = Pick<\n  TransitionCallbacks,\n  \"onEnter\" | \"onEntering\" | \"onEntered\" | \"onExited\"\n>;\n\n/**\n * This options should be passed to the {@link useCSSTransition} for the styling\n * and positioning to work correctly.\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface FixedPositioningTransitionOptions<E extends HTMLElement>\n  extends FixedPositioningTransitionCallbacks {\n  /** {@inheritDoc TransitionOptions.nodeRef} */\n  nodeRef?: Ref<E>;\n}\n\n/**\n * @typeParam FixedToElement - An HTMLElement type for the static element.\n * @typeParam FixedElement - An HTMLElement type for the fixed element.\n * @remarks \\@since 4.0.0\n */\nexport interface FixedPositioningScrollData<\n  FixedToElement extends HTMLElement,\n  FixedElement extends HTMLElement\n> {\n  fixedElement: FixedElement;\n  fixedToElement: FixedToElement;\n\n  /**\n   * Boolean if the {@link fixedToElement} is visible within the viewport.\n   */\n  visible: boolean;\n}\n\n/**\n * This function is called when the page is scrolled while the fixed element is\n * visible. This is generally used to reposition the fixed element or hide it if\n * it is no longer visible within the viewport.\n *\n * @typeParam FixedToElement - An HTMLElement type for the static element.\n * @typeParam FixedElement - An HTMLElement type for the fixed element.\n * @param event - The scroll event\n * @param data - The {@link FixedPositioningScrollData} that can be used for\n * custom scroll behavior.\n * @remarks \\@since 4.0.0\n */\nexport type TransitionScrollCallback<\n  FixedToElement extends HTMLElement,\n  FixedElement extends HTMLElement\n> = (\n  event: Event,\n  data: Readonly<FixedPositioningScrollData<FixedToElement, FixedElement>>\n) => void;\n"]},"metadata":{},"sourceType":"module"}