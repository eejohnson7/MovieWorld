{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, isValidElement, useCallback, useContext, useMemo, useState } from \"react\";\nvar context = createContext({\n  tabsId: \"tabs\",\n  activeIndex: 0,\n  onActiveIndexChange: function () {\n    // do nothing\n  },\n  tabs: []\n});\n/**\n * This hook returns the current \"state\" for the tabs which can be useful if you\n * need additional control or access to the tabs behavior.\n */\nexport function useTabs() {\n  return useContext(context);\n}\nvar Provider = context.Provider;\n/**\n * The `TabsManager` is used to configure your `Tabs` component and handle some\n * of the default behavior such as:\n *\n * - controlling the `activeIndex`\n * - general tab configuration\n * - callbacks when the tab has changed\n * - providing an `id` prefix for all tabs for simplicity\n */\nexport function TabsManager(_a) {\n  var tabsId = _a.tabsId,\n    _b = _a.defaultActiveIndex,\n    defaultActiveIndex = _b === void 0 ? 0 : _b,\n    propActiveIndex = _a.activeIndex,\n    onActiveIndexChange = _a.onActiveIndexChange,\n    tabs = _a.tabs,\n    _c = _a.stacked,\n    stacked = _c === void 0 ? false : _c,\n    _d = _a.iconAfter,\n    iconAfter = _d === void 0 ? false : _d,\n    children = _a.children;\n  var _e = __read(useState(defaultActiveIndex), 2),\n    localActiveIndex = _e[0],\n    setActiveIndex = _e[1];\n  var handleActiveIndexChange = useCallback(function (activeIndex) {\n    if (onActiveIndexChange) {\n      onActiveIndexChange(activeIndex);\n    }\n    setActiveIndex(activeIndex);\n  }, [onActiveIndexChange]);\n  var activeIndex = typeof propActiveIndex === \"number\" ? propActiveIndex : localActiveIndex;\n  var updateActiveIndex = typeof propActiveIndex === \"number\" ? onActiveIndexChange : handleActiveIndexChange;\n  var value = useMemo(function () {\n    return {\n      activeIndex: activeIndex,\n      onActiveIndexChange: updateActiveIndex,\n      tabs: tabs.map(function (config, i) {\n        var tab;\n        if (typeof config === \"string\" || isValidElement(config)) {\n          tab = {\n            children: config\n          };\n        } else {\n          tab = config;\n        }\n        return __assign(__assign({}, tab), {\n          id: tab.id || \"\".concat(tabsId, \"-tab-\").concat(i + 1),\n          panelId: activeIndex === i ? \"\".concat(tabsId, \"-panel-\").concat(activeIndex + 1) : undefined,\n          stacked: typeof tab.stacked === \"boolean\" ? tab.stacked : stacked,\n          iconAfter: typeof tab.iconAfter === \"boolean\" ? tab.iconAfter : iconAfter\n        });\n      }),\n      tabsId: tabsId\n    };\n  }, [activeIndex, iconAfter, stacked, tabs, tabsId, updateActiveIndex]);\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SACEA,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,QAAQ,QACH,OAAO;AA2Cd,IAAMC,OAAO,GAAGN,aAAa,CAAgC;EAC3DO,MAAM,EAAE,MAAM;EACdC,WAAW,EAAE,CAAC;EACdC,mBAAmB,EAAE;IACnB;EACF,CAAC;EACDC,IAAI,EAAE;CACP,CAAC;AAEF;;;;AAIA,OAAM,SAAUC,OAAO;EACrB,OAAOR,UAAU,CAACG,OAAO,CAAC;AAC5B;AAEQ,YAAQ,GAAKA,OAAO,SAAZ;AAsEhB;;;;;;;;;AASA,OAAM,SAAUM,WAAW,CAACC,EAST;MARjBN,MAAM;IACNO,0BAAsB;IAAtBC,kBAAkB,mBAAG,CAAC;IACTC,eAAe;IAC5BP,mBAAmB;IACnBC,IAAI;IACJO,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACjBC,QAAQ;EAEF,gBAAqChB,QAAQ,CAACU,kBAAkB,CAAC;IAAhEO,gBAAgB;IAAEC,cAAc,QAAgC;EACvE,IAAMC,uBAAuB,GAAGtB,WAAW,CACzC,UAACM,WAAmB;IAClB,IAAIC,mBAAmB,EAAE;MACvBA,mBAAmB,CAACD,WAAW,CAAC;;IAGlCe,cAAc,CAACf,WAAW,CAAC;EAC7B,CAAC,EACD,CAACC,mBAAmB,CAAC,CACtB;EAED,IAAMD,WAAW,GACf,OAAOQ,eAAe,KAAK,QAAQ,GAAGA,eAAe,GAAGM,gBAAgB;EAC1E,IAAMG,iBAAiB,GACrB,OAAOT,eAAe,KAAK,QAAQ,GAC9BP,mBAAiE,GAClEe,uBAAuB;EAE7B,IAAME,KAAK,GAAGtB,OAAO,CACnB;IAAM,OAAC;MACLI,WAAW;MACXC,mBAAmB,EAAEgB,iBAAiB;MACtCf,IAAI,EAAEA,IAAI,CAACiB,GAAG,CAAC,UAACC,MAAM,EAAEC,CAAC;QACvB,IAAIC,GAAc;QAClB,IAAI,OAAOF,MAAM,KAAK,QAAQ,IAAI3B,cAAc,CAAC2B,MAAM,CAAC,EAAE;UACxDE,GAAG,GAAG;YAAET,QAAQ,EAAEO;UAAM,CAAE;SAC3B,MAAM;UACLE,GAAG,GAAGF,MAAM;;QAGd,6BACKE,GAAG;UACNC,EAAE,EAAED,GAAG,CAACC,EAAE,IAAI,UAAGxB,MAAM,kBAAQsB,CAAC,GAAG,CAAC,CAAE;UACtCG,OAAO,EACLxB,WAAW,KAAKqB,CAAC,GACb,UAAGtB,MAAM,oBAAUC,WAAW,GAAG,CAAC,CAAE,GACpCyB,SAAS;UACff,OAAO,EAAE,OAAOY,GAAG,CAACZ,OAAO,KAAK,SAAS,GAAGY,GAAG,CAACZ,OAAO,GAAGA,OAAO;UACjEE,SAAS,EACP,OAAOU,GAAG,CAACV,SAAS,KAAK,SAAS,GAAGU,GAAG,CAACV,SAAS,GAAGA;QAAS;MAEpE,CAAC,CAAC;MACFb,MAAM;KACP;EAxBK,CAwBJ,EACF,CAACC,WAAW,EAAEY,SAAS,EAAEF,OAAO,EAAER,IAAI,EAAEH,MAAM,EAAEkB,iBAAiB,CAAC,CACnE;EAED,OAAOS,KAACC,QAAQ;IAACT,KAAK,EAAEA;EAAK;IAAAL,UAAGA;EAAQ,GAAY;AACtD","names":["createContext","isValidElement","useCallback","useContext","useMemo","useState","context","tabsId","activeIndex","onActiveIndexChange","tabs","useTabs","TabsManager","_a","_b","defaultActiveIndex","propActiveIndex","_c","stacked","_d","iconAfter","children","localActiveIndex","setActiveIndex","handleActiveIndexChange","updateActiveIndex","value","map","config","i","tab","id","panelId","undefined","_jsx","Provider"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tabs/src/TabsManager.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport {\n  createContext,\n  isValidElement,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nimport type { TabConfig } from \"./types\";\n\nexport type InitializedTabConfig = TabConfig & Required<Pick<TabConfig, \"id\">>;\n\nexport interface TabsManagerContext {\n  /**\n   * This is an id prefix to use for all the child Tab, TabList, and TabPanel\n   * components.\n   *\n   * @example\n   * id behavior\n   * ```\n   * - `Tabs` -> id={id}\n   * - `Tab` ->\n   *    - id={`${id}-tab-${index + 1}`}\n   *    - panelId={active && `${id}-panel-${index + 1}`}\n   * - `TabPanel` -> id={`${id}-panel-${index + 1}`}\n   * ```\n   */\n  tabsId: string;\n\n  /**\n   * The current active tab index to determine which tabs to animate in and out\n   * of view.\n   */\n  activeIndex: number;\n\n  /**\n   * A function to call when the `activeIndex` should change due to keyboard\n   * movement or clicking on a tab.\n   */\n  onActiveIndexChange(activeIndex: number): void;\n\n  /**\n   * The list of tabs that should be controlled by the tabs manager.\n   */\n  tabs: readonly InitializedTabConfig[];\n}\n\nexport type InitializedTabsManagerContext = Required<TabsManagerContext>;\n\nconst context = createContext<InitializedTabsManagerContext>({\n  tabsId: \"tabs\",\n  activeIndex: 0,\n  onActiveIndexChange: () => {\n    // do nothing\n  },\n  tabs: [],\n});\n\n/**\n * This hook returns the current \"state\" for the tabs which can be useful if you\n * need additional control or access to the tabs behavior.\n */\nexport function useTabs(): InitializedTabsManagerContext {\n  return useContext(context);\n}\n\nconst { Provider } = context;\n\nexport interface TabsManagerProps\n  extends Omit<\n    TabsManagerContext,\n    \"activeIndex\" | \"onActiveIndexChange\" | \"tabs\"\n  > {\n  /**\n   * The index of the tab that should be active by default. This is ignored if\n   * the `activeIndex` prop is defined.\n   *\n   * @defaultValue `0`\n   */\n  defaultActiveIndex?: number;\n\n  /**\n   * If you want to control the current active index instead of relying on the\n   * built in behavior, you can provide an `activeIndex` prop which will be used\n   * instead.  If this prop is defined, you **must** also provide the\n   * `onActiveIndexChange` so that keyboard functionality and tab changing\n   * behavior can still be used.\n   */\n  activeIndex?: number;\n\n  /**\n   * An optional function to call when the active index changes when the\n   * `activeIndex` prop is not provided. If the `activeIndex` prop is provided,\n   * this is **required** for keyboard accessibility.\n   */\n  onActiveIndexChange?: TabsManagerContext[\"onActiveIndexChange\"];\n\n  /**\n   * The list of tabs that should be controlled by the tabs manager.\n   */\n  tabs: readonly (TabConfig | ReactElement | string)[];\n\n  /**\n   * The children to render that should eventually have the `Tabs` component and\n   * the `TabContent` for matching specific tabs.\n   */\n  children: ReactNode;\n\n  /**\n   * Boolean if all the `tabs` that have icons should be stacked instead of\n   * rendered inline.\n   *\n   * This is mostly a convenience prop so that you don't manually need to enable\n   * it for each tab in the `tabs` list and if a `tab` in the `tabs` list has\n   * the `stacked` attribute enabled defined, it will be used instead of this\n   * value.\n   *\n   * @defaultValue `false`\n   */\n  stacked?: boolean;\n\n  /**\n   * Boolean if the icon should appear after the text instead of before for all\n   * the `tabs` that have an icon. When the `stacked` prop is also enabled, it\n   * will cause the icon to appear below the text instead of above.\n   *\n   * This is mostly a convenience prop so that you don't manually need to enable\n   * it for each tab in the `tabs` list and if a `tab` in the `tabs` list has\n   * the `stacked` attribute enabled defined, it will be used instead of this\n   * value.\n   *\n   * @defaultValue `false`\n   */\n  iconAfter?: boolean;\n}\n\n/**\n * The `TabsManager` is used to configure your `Tabs` component and handle some\n * of the default behavior such as:\n *\n * - controlling the `activeIndex`\n * - general tab configuration\n * - callbacks when the tab has changed\n * - providing an `id` prefix for all tabs for simplicity\n */\nexport function TabsManager({\n  tabsId,\n  defaultActiveIndex = 0,\n  activeIndex: propActiveIndex,\n  onActiveIndexChange,\n  tabs,\n  stacked = false,\n  iconAfter = false,\n  children,\n}: TabsManagerProps): ReactElement {\n  const [localActiveIndex, setActiveIndex] = useState(defaultActiveIndex);\n  const handleActiveIndexChange = useCallback(\n    (activeIndex: number) => {\n      if (onActiveIndexChange) {\n        onActiveIndexChange(activeIndex);\n      }\n\n      setActiveIndex(activeIndex);\n    },\n    [onActiveIndexChange]\n  );\n\n  const activeIndex =\n    typeof propActiveIndex === \"number\" ? propActiveIndex : localActiveIndex;\n  const updateActiveIndex =\n    typeof propActiveIndex === \"number\"\n      ? (onActiveIndexChange as TabsManagerContext[\"onActiveIndexChange\"])\n      : handleActiveIndexChange;\n\n  const value = useMemo(\n    () => ({\n      activeIndex,\n      onActiveIndexChange: updateActiveIndex,\n      tabs: tabs.map((config, i) => {\n        let tab: TabConfig;\n        if (typeof config === \"string\" || isValidElement(config)) {\n          tab = { children: config };\n        } else {\n          tab = config;\n        }\n\n        return {\n          ...tab,\n          id: tab.id || `${tabsId}-tab-${i + 1}`,\n          panelId:\n            activeIndex === i\n              ? `${tabsId}-panel-${activeIndex + 1}`\n              : undefined,\n          stacked: typeof tab.stacked === \"boolean\" ? tab.stacked : stacked,\n          iconAfter:\n            typeof tab.iconAfter === \"boolean\" ? tab.iconAfter : iconAfter,\n        };\n      }),\n      tabsId,\n    }),\n    [activeIndex, iconAfter, stacked, tabs, tabsId, updateActiveIndex]\n  );\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}