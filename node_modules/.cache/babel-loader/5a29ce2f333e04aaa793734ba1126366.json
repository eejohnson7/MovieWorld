{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is used to create a title for your application. If your app is\n * not using the `AppBarNav` component, you can enable the `keyline` prop to\n * ensure that your title aligns with the keyline of your navigation element.\n */\nexport var AppBarTitle = forwardRef(function AppBarTitle(_a, ref) {\n  var _b = _a.noWrap,\n    noWrap = _b === void 0 ? true : _b,\n    _c = _a.keyline,\n    keyline = _c === void 0 ? false : _c,\n    className = _a.className,\n    children = _a.children,\n    inheritColor = _a.inheritColor,\n    props = __rest(_a, [\"noWrap\", \"keyline\", \"className\", \"children\", \"inheritColor\"]);\n  return _jsx(\"h6\", __assign({}, props, {\n    ref: ref,\n    className: cn(block(\"title\", {\n      \"no-wrap\": noWrap,\n      keyline: keyline,\n      inherit: useInheritContext(inheritColor)\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAGrC,SAASC,iBAAiB,QAAQ,qBAAqB;AAkBvD,IAAMC,KAAK,GAAGF,GAAG,CAAC,aAAa,CAAC;AAEhC;;;;;AAKA,OAAO,IAAMG,WAAW,GAAGL,UAAU,CACnC,SAASK,WAAW,CAClBC,EAOC,EACDC,GAAG;EAPD,kBAAa;IAAbC,MAAM,mBAAG,IAAI;IACbC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,SAAS;IACTC,QAAQ;IACRC,YAAY;IACTC,KAAK,cANV,8DAOC,CADS;EAIV,OACEC,wBACMD,KAAK;IACTP,GAAG,EAAEA,GAAG;IACRI,SAAS,EAAEV,EAAE,CACXG,KAAK,CAAC,OAAO,EAAE;MACb,SAAS,EAAEI,MAAM;MACjBE,OAAO;MACPM,OAAO,EAAEb,iBAAiB,CAACU,YAAY;KACxC,CAAC,EACFF,SAAS;EACV;IAAAC,UAEAA;EAAQ,GACN;AAET,CAAC,CACF","names":["forwardRef","cn","bem","useInheritContext","block","AppBarTitle","_a","ref","noWrap","_c","keyline","className","children","inheritColor","props","_jsx","inherit"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/app-bar/src/AppBarTitle.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { AppBarColorInherit } from \"./useInheritContext\";\nimport { useInheritContext } from \"./useInheritContext\";\n\nexport interface AppBarTitleProps\n  extends HTMLAttributes<HTMLHeadingElement>,\n    AppBarColorInherit {\n  /**\n   * Boolean if the title should be placed at the `$rmd-app-bar-title-keyline`.\n   */\n  keyline?: boolean;\n\n  /**\n   * Boolean if the title should not automatically try to wrap the content and\n   * span two lines if it is too big. This will automatically add trailing\n   * ellipsis for the text overflow as well.\n   */\n  noWrap?: boolean;\n}\n\nconst block = bem(\"rmd-app-bar\");\n\n/**\n * This component is used to create a title for your application. If your app is\n * not using the `AppBarNav` component, you can enable the `keyline` prop to\n * ensure that your title aligns with the keyline of your navigation element.\n */\nexport const AppBarTitle = forwardRef<HTMLHeadingElement, AppBarTitleProps>(\n  function AppBarTitle(\n    {\n      noWrap = true,\n      keyline = false,\n      className,\n      children,\n      inheritColor,\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <h6\n        {...props}\n        ref={ref}\n        className={cn(\n          block(\"title\", {\n            \"no-wrap\": noWrap,\n            keyline,\n            inherit: useInheritContext(inheritColor),\n          }),\n          className\n        )}\n      >\n        {children}\n      </h6>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}