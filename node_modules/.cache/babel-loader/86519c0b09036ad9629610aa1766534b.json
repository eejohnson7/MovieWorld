{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport { MenuItem } from \"@react-md/menu\";\n/**\n * A wrapper for the `<input type=\"file\">` element that works within menus.\n *\n * @remarks \\@since 5.0.0\n */\nexport var MenuItemFileInput = forwardRef(function MenuItemFileInput(_a, ref) {\n  var id = _a.id,\n    onClick = _a.onClick,\n    onChange = _a.onChange,\n    accept = _a.accept,\n    _b = _a.multiple,\n    multiple = _b === void 0 ? false : _b,\n    children = _a.children,\n    inputProps = _a.inputProps,\n    _c = _a.disableRepeatableFiles,\n    disableRepeatableFiles = _c === void 0 ? false : _c,\n    propLeftAddon = _a.leftAddon,\n    _d = _a.inputLabel,\n    inputLabel = _d === void 0 ? \"Upload\" : _d,\n    props = __rest(_a, [\"id\", \"onClick\", \"onChange\", \"accept\", \"multiple\", \"children\", \"inputProps\", \"disableRepeatableFiles\", \"leftAddon\", \"inputLabel\"]);\n  var inputRef = useRef(null);\n  var leftAddon = useIcon(\"upload\", propLeftAddon);\n  return _jsxs(MenuItem, __assign({}, props, {\n    id: \"\".concat(id, \"-menuitem\"),\n    ref: ref,\n    onClick: function (event) {\n      var _a;\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n      // prevent the menu from closing since you need access to the\n      // `<input type=\"file\">` to select a file and the menu unmounts when\n      // hidden.\n      event.stopPropagation();\n      /* istanbul-ignore-next */\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n    },\n    leftAddon: leftAddon\n  }, {\n    children: [children, _jsx(\"input\", __assign({\n      \"aria-label\": inputLabel,\n      id: id,\n      ref: inputRef,\n      type: \"file\",\n      accept: accept,\n      multiple: multiple,\n      value: disableRepeatableFiles ? undefined : \"\",\n      onChange: onChange\n    }, inputProps, {\n      onClick: function (event) {\n        var _a;\n        (_a = inputProps === null || inputProps === void 0 ? void 0 : inputProps.onClick) === null || _a === void 0 ? void 0 : _a.call(inputProps, event);\n        // prevent double click events since the MenuItem clicks this input\n        event.stopPropagation();\n      },\n      className: cn(\"rmd-file-input\", inputProps === null || inputProps === void 0 ? void 0 : inputProps.className)\n    }))]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC1C,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,OAAO,QAAQ,gBAAgB;AAExC,SAASC,QAAQ,QAAQ,gBAAgB;AAmCzC;;;;;AAKA,OAAO,IAAMC,iBAAiB,GAAGL,UAAU,CAGzC,SAASK,iBAAiB,CAC1BC,EAYC,EACDC,GAAG;EAZD,MAAE;IACFC,OAAO;IACPC,QAAQ;IACRC,MAAM;IACNC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,QAAQ;IACRC,UAAU;IACVC,8BAA8B;IAA9BC,sBAAsB,mBAAG,KAAK;IACnBC,aAAa;IACxBC,kBAAqB;IAArBC,UAAU,mBAAG,QAAQ;IAClBC,KAAK,cAXV,kIAYC,CADS;EAIV,IAAMC,QAAQ,GAAGpB,MAAM,CAAmB,IAAI,CAAC;EAC/C,IAAMqB,SAAS,GAAGnB,OAAO,CAAC,QAAQ,EAAEc,aAAa,CAAC;EAElD,OACEM,MAACnB,QAAQ,eACHgB,KAAK;IACTI,EAAE,EAAE,UAAGA,EAAE,cAAW;IACpBjB,GAAG,EAAEA,GAAG;IACRC,OAAO,EAAE,UAACiB,KAAK;;MACbjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGiB,KAAK,CAAC;MAChB;MACA;MACA;MACAA,KAAK,CAACC,eAAe,EAAE;MACvB;MACA,cAAQ,CAACC,OAAO,0CAAEC,KAAK,EAAE;IAC3B,CAAC;IACDN,SAAS,EAAEA;EAAS;IAAAT,WAEnBA,QAAQ,EACTgB;MAAA,cACcV,UAAU;MACtBK,EAAE,EAAEA,EAAE;MACNjB,GAAG,EAAEc,QAAQ;MACbS,IAAI,EAAC,MAAM;MACXpB,MAAM,EAAEA,MAAM;MACdE,QAAQ,EAAEA,QAAQ;MAClBmB,KAAK,EAAEf,sBAAsB,GAAGgB,SAAS,GAAG,EAAE;MAC9CvB,QAAQ,EAAEA;IAAQ,GACdK,UAAU;MACdN,OAAO,EAAE,UAACiB,KAAK;;QACb,gBAAU,aAAVX,UAAU,uBAAVA,UAAU,CAAEN,OAAO,2DAAGiB,KAAK,CAAC;QAC5B;QACAA,KAAK,CAACC,eAAe,EAAE;MACzB,CAAC;MACDO,SAAS,EAAE/B,EAAE,CAAC,gBAAgB,EAAEY,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEmB,SAAS;IAAC,GACtD;EAAA,GACO;AAEf,CAAC,CAAC","names":["forwardRef","useRef","cn","useIcon","MenuItem","MenuItemFileInput","_a","ref","onClick","onChange","accept","_b","multiple","children","inputProps","_c","disableRepeatableFiles","propLeftAddon","_d","inputLabel","props","inputRef","leftAddon","_jsxs","id","event","stopPropagation","current","click","_jsx","type","value","undefined","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/menu/MenuItemFileInput.tsx"],"sourcesContent":["import type { InputHTMLAttributes } from \"react\";\nimport { forwardRef, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport type { MenuItemProps } from \"@react-md/menu\";\nimport { MenuItem } from \"@react-md/menu\";\n\nimport type { FileInputProps } from \"../file-input/FileInput\";\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport type MenuItemAllowedFileInputProps = Pick<\n  FileInputProps,\n  \"id\" | \"onChange\" | \"accept\" | \"multiple\" | \"disableRepeatableFiles\"\n>;\n\n/** @remarks \\@since 5.0.0 */\nexport interface MenuItemFileInputProps\n  extends Omit<MenuItemProps, \"id\" | \"onChange\">,\n    MenuItemAllowedFileInputProps {\n  /**\n   * An `aria-label` to apply to the `<input type=\"file\">`.\n   *\n   * @defaultValue `\"Upload\"`\n   */\n  inputLabel?: string;\n\n  /**\n   * Any additional props that should be passed to the `<input type=\"file\">`\n   * element. You probably won't ever need to use this.\n   */\n  inputProps?: Readonly<\n    Omit<\n      InputHTMLAttributes<HTMLInputElement>,\n      \"type\" | keyof MenuItemAllowedFileInputProps\n    >\n  >;\n}\n\n/**\n * A wrapper for the `<input type=\"file\">` element that works within menus.\n *\n * @remarks \\@since 5.0.0\n */\nexport const MenuItemFileInput = forwardRef<\n  HTMLLIElement,\n  MenuItemFileInputProps\n>(function MenuItemFileInput(\n  {\n    id,\n    onClick,\n    onChange,\n    accept,\n    multiple = false,\n    children,\n    inputProps,\n    disableRepeatableFiles = false,\n    leftAddon: propLeftAddon,\n    inputLabel = \"Upload\",\n    ...props\n  },\n  ref\n) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const leftAddon = useIcon(\"upload\", propLeftAddon);\n\n  return (\n    <MenuItem\n      {...props}\n      id={`${id}-menuitem`}\n      ref={ref}\n      onClick={(event) => {\n        onClick?.(event);\n        // prevent the menu from closing since you need access to the\n        // `<input type=\"file\">` to select a file and the menu unmounts when\n        // hidden.\n        event.stopPropagation();\n        /* istanbul-ignore-next */\n        inputRef.current?.click();\n      }}\n      leftAddon={leftAddon}\n    >\n      {children}\n      <input\n        aria-label={inputLabel}\n        id={id}\n        ref={inputRef}\n        type=\"file\"\n        accept={accept}\n        multiple={multiple}\n        value={disableRepeatableFiles ? undefined : \"\"}\n        onChange={onChange}\n        {...inputProps}\n        onClick={(event) => {\n          inputProps?.onClick?.(event);\n          // prevent double click events since the MenuItem clicks this input\n          event.stopPropagation();\n        }}\n        className={cn(\"rmd-file-input\", inputProps?.className)}\n      />\n    </MenuItem>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}