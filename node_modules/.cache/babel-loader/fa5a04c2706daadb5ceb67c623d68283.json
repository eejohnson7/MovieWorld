{"ast":null,"code":"import { useCallback, useRef } from \"react\";\nimport { getFocusableElements } from \"./getFocusableElements\";\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The keydown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\nexport function useTabFocusWrap(_a) {\n  var _b = _a.disabled,\n    disabled = _b === void 0 ? false : _b,\n    _c = _a.disableFocusCache,\n    disableFocusCache = _c === void 0 ? false : _c,\n    onKeyDown = _a.onKeyDown;\n  var focusables = useRef([]);\n  var handleKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n    if (event.key !== \"Tab\") {\n      return;\n    }\n    if (disableFocusCache || !focusables.current.length) {\n      focusables.current = getFocusableElements(event.currentTarget);\n    }\n    var elements = focusables.current;\n    var l = elements.length;\n    if (l === 0) {\n      return;\n    }\n    if (l === 1) {\n      event.preventDefault();\n      elements[0].focus();\n    } else if (elements[0] === event.target && event.shiftKey) {\n      event.preventDefault();\n      elements[l - 1].focus();\n    } else if (elements[l - 1] === event.target && !event.shiftKey) {\n      event.preventDefault();\n      elements[0].focus();\n    }\n  }, [onKeyDown, disableFocusCache]);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAE3C,SAASC,oBAAoB,QAAQ,wBAAwB;AAqB7D;;;;;;;;;;AAUA,OAAM,SAAUC,eAAe,CAAwBC,EAI1C;MAHXC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,yBAAyB;IAAzBC,iBAAiB,mBAAG,KAAK;IACzBC,SAAS;EAET,IAAMC,UAAU,GAAGT,MAAM,CAAyB,EAAE,CAAC;EAErD,IAAMU,aAAa,GAAGX,WAAW,CAC/B,UAACY,KAAK;IACJ,IAAIH,SAAS,EAAE;MACbA,SAAS,CAACG,KAAK,CAAC;;IAGlB,IAAIA,KAAK,CAACC,GAAG,KAAK,KAAK,EAAE;MACvB;;IAGF,IAAIL,iBAAiB,IAAI,CAACE,UAAU,CAACI,OAAO,CAACC,MAAM,EAAE;MACnDL,UAAU,CAACI,OAAO,GAAGZ,oBAAoB,CAACU,KAAK,CAACI,aAAa,CAAC;;IAGhE,IAAMC,QAAQ,GAAGP,UAAU,CAACI,OAAO;IACnC,IAAMI,CAAC,GAAGD,QAAQ,CAACF,MAAM;IACzB,IAAIG,CAAC,KAAK,CAAC,EAAE;MACX;;IAGF,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXN,KAAK,CAACO,cAAc,EAAE;MACtBF,QAAQ,CAAC,CAAC,CAAC,CAACG,KAAK,EAAE;KACpB,MAAM,IAAIH,QAAQ,CAAC,CAAC,CAAC,KAAKL,KAAK,CAACS,MAAM,IAAIT,KAAK,CAACU,QAAQ,EAAE;MACzDV,KAAK,CAACO,cAAc,EAAE;MACtBF,QAAQ,CAACC,CAAC,GAAG,CAAC,CAAC,CAACE,KAAK,EAAE;KACxB,MAAM,IAAIH,QAAQ,CAACC,CAAC,GAAG,CAAC,CAAC,KAAKN,KAAK,CAACS,MAAM,IAAI,CAACT,KAAK,CAACU,QAAQ,EAAE;MAC9DV,KAAK,CAACO,cAAc,EAAE;MACtBF,QAAQ,CAAC,CAAC,CAAC,CAACG,KAAK,EAAE;;EAEvB,CAAC,EACD,CAACX,SAAS,EAAED,iBAAiB,CAAC,CAC/B;EAED,OAAOF,QAAQ,GAAGG,SAAS,GAAGE,aAAa;AAC7C","names":["useCallback","useRef","getFocusableElements","useTabFocusWrap","_a","_b","disabled","_c","disableFocusCache","onKeyDown","focusables","handleKeyDown","event","key","current","length","currentTarget","elements","l","preventDefault","focus","target","shiftKey"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/wia-aria/useTabFocusWrap.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\";\n\nimport { getFocusableElements } from \"./getFocusableElements\";\n\ninterface Options<E extends HTMLElement> {\n  /**\n   * Boolean if the focus wrap behavior should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the list of focusable elements should not be cached after the\n   * first tab key press. This should only be set to `true` if you have a lot of\n   * dynamic content whin your element and the first and last elements change.\n   */\n  disableFocusCache?: boolean;\n\n  /**\n   * An optional keydown event handler to merge with the focus wrap behavior.\n   */\n  onKeyDown?: React.KeyboardEventHandler<E>;\n}\n\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The keydown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\nexport function useTabFocusWrap<E extends HTMLElement>({\n  disabled = false,\n  disableFocusCache = false,\n  onKeyDown,\n}: Options<E>): React.KeyboardEventHandler<E> | undefined {\n  const focusables = useRef<readonly HTMLElement[]>([]);\n\n  const handleKeyDown = useCallback<React.KeyboardEventHandler<E>>(\n    (event): void => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      if (event.key !== \"Tab\") {\n        return;\n      }\n\n      if (disableFocusCache || !focusables.current.length) {\n        focusables.current = getFocusableElements(event.currentTarget);\n      }\n\n      const elements = focusables.current;\n      const l = elements.length;\n      if (l === 0) {\n        return;\n      }\n\n      if (l === 1) {\n        event.preventDefault();\n        elements[0].focus();\n      } else if (elements[0] === event.target && event.shiftKey) {\n        event.preventDefault();\n        elements[l - 1].focus();\n      } else if (elements[l - 1] === event.target && !event.shiftKey) {\n        event.preventDefault();\n        elements[0].focus();\n      }\n    },\n    [onKeyDown, disableFocusCache]\n  );\n\n  return disabled ? onKeyDown : handleKeyDown;\n}\n"]},"metadata":{},"sourceType":"module"}