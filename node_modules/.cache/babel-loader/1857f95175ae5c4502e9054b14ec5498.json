{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-media-container\");\n/**\n * The `MediaContainer` component is used to make responsive images and videos\n * within your app. This component also allows for forcing a specific aspect\n * ratio for these elements with both the `height` and `width` props are\n * provided.\n */\nexport var MediaContainer = forwardRef(function MediaContainer(_a, ref) {\n  var className = _a.className,\n    height = _a.height,\n    width = _a.width,\n    children = _a.children,\n    _b = _a.auto,\n    auto = _b === void 0 ? true : _b,\n    _c = _a.fullWidth,\n    fullWidth = _c === void 0 ? false : _c,\n    props = __rest(_a, [\"className\", \"height\", \"width\", \"children\", \"auto\", \"fullWidth\"]);\n  var aspectRatio = height && width ? \"rmd-media-container--\".concat(width, \"-\").concat(height) : \"\";\n  return _jsx(\"div\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      auto: auto,\n      \"aspect-ratio\": aspectRatio,\n      \"full-width\": fullWidth\n    }), aspectRatio, className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAgCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,qBAAqB,CAAC;AAExC;;;;;;AAMA,OAAO,IAAME,cAAc,GAAGJ,UAAU,CAGtC,SAASI,cAAc,CACvBC,EAQC,EACDC,GAAG;EARD,aAAS;IACTC,MAAM;IACNC,KAAK;IACLC,QAAQ;IACRC,YAAW;IAAXC,IAAI,mBAAG,IAAI;IACXC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACdC,KAAK,cAPV,iEAQC,CADS;EAIV,IAAMC,WAAW,GACfR,MAAM,IAAIC,KAAK,GAAG,+BAAwBA,KAAK,cAAID,MAAM,CAAE,GAAG,EAAE;EAElE,OACES,yBACMF,KAAK;IACTR,GAAG,EAAEA,GAAG;IACRW,SAAS,EAAEhB,EAAE,CACXE,KAAK,CAAC;MACJQ,IAAI;MACJ,cAAc,EAAEI,WAAW;MAC3B,YAAY,EAAEF;KACf,CAAC,EACFE,WAAW,EACXE,SAAS;EACV;IAAAR,UAEAA;EAAQ,GACL;AAEV,CAAC,CAAC","names":["forwardRef","cn","bem","block","MediaContainer","_a","ref","height","width","children","_b","auto","_c","fullWidth","props","aspectRatio","_jsx","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/media/src/MediaContainer.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface MediaContainerProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * An optional aspect ratio height to enforce. This **must** be used alongside\n   * the `width` prop.\n   */\n  height?: number;\n\n  /**\n   * An optional aspect ratio width to enforce. This **must** be used alongside\n   * the `height` prop.\n   */\n  width?: number;\n\n  /**\n   * Boolean if any media element children should be updated to be responsive.\n   */\n  auto?: boolean;\n\n  /**\n   * Boolean if the media container should have a `width: 100%;` applied.\n   */\n  fullWidth?: boolean;\n}\n\nexport interface MediaContainerWithAspectRatioProps\n  extends MediaContainerProps {\n  height: number;\n  width: number;\n}\n\nconst block = bem(\"rmd-media-container\");\n\n/**\n * The `MediaContainer` component is used to make responsive images and videos\n * within your app. This component also allows for forcing a specific aspect\n * ratio for these elements with both the `height` and `width` props are\n * provided.\n */\nexport const MediaContainer = forwardRef<\n  HTMLDivElement,\n  MediaContainerProps | MediaContainerWithAspectRatioProps\n>(function MediaContainer(\n  {\n    className,\n    height,\n    width,\n    children,\n    auto = true,\n    fullWidth = false,\n    ...props\n  },\n  ref\n) {\n  const aspectRatio =\n    height && width ? `rmd-media-container--${width}-${height}` : \"\";\n\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={cn(\n        block({\n          auto,\n          \"aspect-ratio\": aspectRatio,\n          \"full-width\": fullWidth,\n        }),\n        aspectRatio,\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}