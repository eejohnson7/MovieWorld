{"ast":null,"code":"import { createContext, useContext } from \"react\";\n/**\n * Boolean if the child components should inherit the color of the app bar.\n * @internal\n */\nexport var InheritContext = createContext(false);\n/**\n * This is probably a bit overkill... but this is used so that all the AppBar\n * child components can automatically inherit the base color as needed within an\n * AppBar. If the `inheritColor` prop was provided to the component, that value\n * will be used instead.\n *\n * @param inheritColor - The prop inheritColor for the component\n * @returns true if the color should be inherited.\n * @internal\n */\nexport function useInheritContext(inheritColor) {\n  var inheritContext = useContext(InheritContext);\n  return typeof inheritColor === \"boolean\" ? inheritColor : inheritContext;\n}\n/**\n * Boolean if there is a parent app bar. The theme colors will be inherited from\n * the parent app bar instead of the current app bar for these cases since\n * nested app bars usually happen with prominent toolbars and the root app bar\n * defines the theme.\n *\n * @internal\n */\nexport var ParentContext = createContext(false);\n/**\n *\n * @internal\n */\nexport function useParentContext() {\n  return useContext(ParentContext);\n}\nif (process.env.NODE_ENV !== \"production\") {\n  InheritContext.displayName = \"InheritColorContext\";\n  ParentContext.displayName = \"ParentContext\";\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAEjD;;;;AAIA,OAAO,IAAMC,cAAc,GAAGF,aAAa,CAAC,KAAK,CAAC;AAWlD;;;;;;;;;;AAUA,OAAM,SAAUG,iBAAiB,CAACC,YAAiC;EACjE,IAAMC,cAAc,GAAGJ,UAAU,CAACC,cAAc,CAAC;EACjD,OAAO,OAAOE,YAAY,KAAK,SAAS,GAAGA,YAAY,GAAGC,cAAc;AAC1E;AAEA;;;;;;;;AAQA,OAAO,IAAMC,aAAa,GAAGN,aAAa,CAAC,KAAK,CAAC;AAEjD;;;;AAIA,OAAM,SAAUO,gBAAgB;EAC9B,OAAON,UAAU,CAACK,aAAa,CAAC;AAClC;AAEA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCR,cAAc,CAACS,WAAW,GAAG,qBAAqB;EAClDL,aAAa,CAACK,WAAW,GAAG,eAAe","names":["createContext","useContext","InheritContext","useInheritContext","inheritColor","inheritContext","ParentContext","useParentContext","process","env","NODE_ENV","displayName"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/app-bar/src/useInheritContext.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\n/**\n * Boolean if the child components should inherit the color of the app bar.\n * @internal\n */\nexport const InheritContext = createContext(false);\n\nexport interface AppBarColorInherit {\n  /**\n   * Boolean if this component should inherit the base color provided by the\n   * `AppBar`.  When this value is omitted, this will be enabled when the theme\n   * is not `\"clear\"` and not `\"default\"`\n   */\n  inheritColor?: boolean;\n}\n\n/**\n * This is probably a bit overkill... but this is used so that all the AppBar\n * child components can automatically inherit the base color as needed within an\n * AppBar. If the `inheritColor` prop was provided to the component, that value\n * will be used instead.\n *\n * @param inheritColor - The prop inheritColor for the component\n * @returns true if the color should be inherited.\n * @internal\n */\nexport function useInheritContext(inheritColor: boolean | undefined): boolean {\n  const inheritContext = useContext(InheritContext);\n  return typeof inheritColor === \"boolean\" ? inheritColor : inheritContext;\n}\n\n/**\n * Boolean if there is a parent app bar. The theme colors will be inherited from\n * the parent app bar instead of the current app bar for these cases since\n * nested app bars usually happen with prominent toolbars and the root app bar\n * defines the theme.\n *\n * @internal\n */\nexport const ParentContext = createContext(false);\n\n/**\n *\n * @internal\n */\nexport function useParentContext(): boolean {\n  return useContext(ParentContext);\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  InheritContext.displayName = \"InheritColorContext\";\n  ParentContext.displayName = \"ParentContext\";\n}\n"]},"metadata":{},"sourceType":"module"}