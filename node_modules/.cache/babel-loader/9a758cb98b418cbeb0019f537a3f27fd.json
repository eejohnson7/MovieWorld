{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nvar block = bem(\"rmd-textarea\");\nvar container = bem(\"rmd-textarea-container\");\nvar PADDING_VARIABLES = \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\";\n// this is the default of 1.5rem line-height in the styles\nvar DEFAULT_LINE_HEIGHT = \"24\";\nexport var TextArea = forwardRef(function TextArea(_a, forwardedRef) {\n  var style = _a.style,\n    className = _a.className,\n    areaStyle = _a.areaStyle,\n    areaClassName = _a.areaClassName,\n    containerRef = _a.containerRef,\n    containerProps = _a.containerProps,\n    label = _a.label,\n    labelStyle = _a.labelStyle,\n    labelClassName = _a.labelClassName,\n    _b = _a.rows,\n    rows = _b === void 0 ? 2 : _b,\n    _c = _a.maxRows,\n    maxRows = _c === void 0 ? -1 : _c,\n    _d = _a.resize,\n    resize = _d === void 0 ? \"auto\" : _d,\n    propTheme = _a.theme,\n    _e = _a.dense,\n    dense = _e === void 0 ? false : _e,\n    _f = _a.inline,\n    propInline = _f === void 0 ? false : _f,\n    _g = _a.error,\n    error = _g === void 0 ? false : _g,\n    _h = _a.stretch,\n    stretch = _h === void 0 ? false : _h,\n    _j = _a.disabled,\n    disabled = _j === void 0 ? false : _j,\n    _k = _a.animate,\n    animate = _k === void 0 ? true : _k,\n    _l = _a.isLeftAddon,\n    isLeftAddon = _l === void 0 ? true : _l,\n    _m = _a.isRightAddon,\n    isRightAddon = _m === void 0 ? true : _m,\n    propUnderlineDirection = _a.underlineDirection,\n    propOnBlur = _a.onBlur,\n    propOnFocus = _a.onFocus,\n    propOnChange = _a.onChange,\n    leftChildren = _a.leftChildren,\n    rightChildren = _a.rightChildren,\n    props = __rest(_a, [\"style\", \"className\", \"areaStyle\", \"areaClassName\", \"containerRef\", \"containerProps\", \"label\", \"labelStyle\", \"labelClassName\", \"rows\", \"maxRows\", \"resize\", \"theme\", \"dense\", \"inline\", \"error\", \"stretch\", \"disabled\", \"animate\", \"isLeftAddon\", \"isRightAddon\", \"underlineDirection\", \"onBlur\", \"onFocus\", \"onChange\", \"leftChildren\", \"rightChildren\"]);\n  var id = props.id,\n    value = props.value,\n    defaultValue = props.defaultValue;\n  var _o = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection\n    }),\n    theme = _o.theme,\n    underlineDirection = _o.underlineDirection;\n  var _p = __read(useState(), 2),\n    height = _p[0],\n    setHeight = _p[1];\n  useEffect(function () {\n    if (resize !== \"auto\" && typeof height === \"number\") {\n      setHeight(undefined);\n    }\n  }, [resize, height]);\n  var maskRef = useRef(null);\n  var _q = __read(useState(false), 2),\n    scrollable = _q[0],\n    setScrollable = _q[1];\n  var updateHeight = useCallback(function () {\n    var mask = maskRef.current;\n    /* istanbul ignore if */\n    if (!mask) {\n      return;\n    }\n    var nextHeight = mask.scrollHeight;\n    /* istanbul ignore if */\n    if (maxRows > 0) {\n      var lineHeight = parseFloat(window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT);\n      var maxHeight = maxRows * lineHeight;\n      nextHeight = Math.min(maxHeight, nextHeight);\n      // only want the textarea to be scrollable if there's a limit on the rows\n      // since it'll flash the scrollbar on most OS during the height transition\n      if (nextHeight === maxHeight && !scrollable) {\n        setScrollable(true);\n      } else if (nextHeight !== maxHeight && scrollable) {\n        setScrollable(false);\n      }\n    }\n    if (height !== nextHeight) {\n      setHeight(nextHeight);\n    }\n  }, [height, maxRows, scrollable]);\n  // the window can be resized while there is text inside the textarea so need to\n  // recalculate the height when the width changes as well.\n  var _r = __read(useResizeObserver(updateHeight, {\n      ref: maskRef,\n      disableHeight: true\n    }), 2),\n    maskRefHandler = _r[1];\n  var _s = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: function (event) {\n        var mask = maskRef.current;\n        if (propOnChange) {\n          propOnChange(event);\n        }\n        /* istanbul ignore if */\n        if (!mask || resize !== \"auto\") {\n          return;\n        }\n        // to get the height transition to work, you have to set the height on:\n        // - the main container element (including padding) that has the height\n        //    transition enabled\n        // - a child div wrapper (without padding) that has the height transition\n        //    enabled\n        // - the textarea element (without padding) and without a height transition\n        //\n        // if it isn't done this way, the height transition will look weird since\n        // the text will be fixed to the bottom of the area and more text at the top\n        // will become visible as the height transition completes. applying the\n        // transition on the two parent elements work because:\n        // - the height is set immediately on the text field so it expands to show all\n        //    the text\n        // - the height is correctly applied to both parent elements, but their height\n        //    haven't fully been adjusted due to the animation\n        // - the parent divs have overflow visible by default, so the textarea's text\n        //    will expand past the boundaries of the divs and not cause the upwards\n        //    animation weirdness.\n        mask.value = event.currentTarget.value;\n        updateHeight();\n      },\n      value: value,\n      defaultValue: defaultValue\n    }),\n    valued = _s.valued,\n    focused = _s.focused,\n    onBlur = _s.onBlur,\n    onFocus = _s.onFocus,\n    onChange = _s.onChange;\n  var _t = __read(useEnsuredRef(forwardedRef), 2),\n    ref = _t[0],\n    refHandler = _t[1];\n  // the container element adds some padding so that the content can scroll and\n  // not be covered by the floating label. unfortunately, this means that the entire\n  // container is no longer clickable to focus the input. This is used to add that\n  // functionality back.\n  var handleClick = useCallback(function (event) {\n    if (ref.current && event.target === event.currentTarget) {\n      ref.current.focus();\n    }\n  }, [ref]);\n  var area = _jsx(\"textarea\", __assign({}, props, {\n    ref: refHandler,\n    rows: rows,\n    disabled: disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    style: __assign(__assign({}, areaStyle), {\n      height: height !== null && height !== void 0 ? height : areaStyle === null || areaStyle === void 0 ? void 0 : areaStyle.height\n    }),\n    className: cn(block({\n      scrollable: scrollable || resize === \"none\",\n      floating: label && theme !== \"none\",\n      rh: resize === \"horizontal\",\n      rv: resize === \"vertical\",\n      rn: resize === \"auto\" || resize === \"none\"\n    }), areaClassName)\n  }));\n  var children = area;\n  if (resize === \"auto\") {\n    children = _jsxs(\"div\", __assign({\n      style: {\n        height: height\n      },\n      className: container(\"inner\", {\n        animate: animate\n      })\n    }, {\n      children: [area, _jsx(\"textarea\", {\n        \"aria-hidden\": true,\n        defaultValue: value || defaultValue,\n        id: \"\".concat(id, \"-mask\"),\n        ref: maskRefHandler,\n        readOnly: true,\n        rows: rows,\n        tabIndex: -1,\n        style: areaStyle,\n        className: cn(block({\n          rn: true,\n          mask: true,\n          floating: label && theme !== \"none\"\n        }), areaClassName)\n      })]\n    }));\n  }\n  var inline = propInline;\n  if (resize === \"horizontal\" || resize === \"both\") {\n    // have to force it inline or else you won't be able to resize\n    // it horizontally.\n    inline = true;\n  }\n  return _jsxs(TextFieldContainer, __assign({}, containerProps, {\n    style: __assign(__assign({}, style), {\n      height: height ? \"calc(\".concat(PADDING_VARIABLES, \" + \").concat(height, \"px)\") : style === null || style === void 0 ? void 0 : style.height\n    }),\n    className: cn(container({\n      animate: animate && resize === \"auto\",\n      cursor: !disabled\n    }), className),\n    ref: containerRef,\n    theme: theme,\n    error: error,\n    active: focused,\n    label: !!label,\n    dense: dense,\n    inline: inline,\n    stretch: stretch,\n    disabled: disabled,\n    isLeftAddon: isLeftAddon,\n    isRightAddon: isRightAddon,\n    leftChildren: leftChildren,\n    rightChildren: rightChildren,\n    underlineDirection: underlineDirection,\n    onClick: !disabled ? handleClick : undefined\n  }, {\n    children: [_jsx(FloatingLabel, __assign({\n      style: labelStyle,\n      className: labelClassName,\n      htmlFor: id,\n      error: error,\n      active: focused,\n      floating: focused || valued,\n      valued: valued,\n      dense: dense,\n      disabled: disabled\n    }, {\n      children: label\n    })), children]\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useCallback","useEffect","useRef","useState","cn","bem","useEnsuredRef","useResizeObserver","useFormTheme","FloatingLabel","useFieldStates","TextFieldContainer","block","container","PADDING_VARIABLES","DEFAULT_LINE_HEIGHT","TextArea","_a","forwardedRef","className","areaStyle","areaClassName","containerRef","containerProps","label","labelStyle","labelClassName","_b","rows","_c","maxRows","_d","resize","propTheme","_e","dense","_f","propInline","_g","error","_h","stretch","_j","disabled","_k","animate","_l","isLeftAddon","_m","isRightAddon","propUnderlineDirection","propOnBlur","propOnFocus","propOnChange","leftChildren","rightChildren","props","value","defaultValue","theme","underlineDirection","height","setHeight","undefined","maskRef","scrollable","setScrollable","updateHeight","mask","current","nextHeight","scrollHeight","lineHeight","parseFloat","window","getComputedStyle","maxHeight","Math","min","ref","disableHeight","maskRefHandler","onBlur","onFocus","onChange","event","currentTarget","valued","focused","refHandler","handleClick","target","focus","area","_jsx","style","floating","rh","rv","rn","children","_jsxs","id","readOnly","tabIndex","inline","cursor","active","onClick","htmlFor"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/text-field/TextArea.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  Ref,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\n\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport type { TextFieldContainerOptions } from \"./TextFieldContainer\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\n\nexport type TextAreaResize =\n  | \"none\"\n  | \"auto\"\n  | \"horizontal\"\n  | \"vertical\"\n  | \"both\";\n\nexport interface TextAreaProps\n  extends TextareaHTMLAttributes<HTMLTextAreaElement>,\n    TextFieldContainerOptions {\n  /**\n   * An id to apply to the text area. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * The value to use for the text field. This will make the component\n   * controlled and require the `onChange` prop to be provided as well otherwise\n   * this will act as a read only text field.\n   */\n  value?: string;\n\n  /**\n   * The default value for the text field which will make it uncontrolled.  If\n   * you manually change the `defaultValue` prop, the input's value **will not\n   * change** unless you provide a different `key` as well. Use the `value` prop\n   * instead for a controlled input.\n   */\n  defaultValue?: string;\n\n  /**\n   * An optional floating label to use for the text field. This should really\n   * only be used when the `theme` prop is not set to `\"none\"`. This will be\n   * wrapped in the `<Label>` component itself and automatically apply the\n   * `htmlFor` prop for this text field.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the label wrapper.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the label wrapper.\n   */\n  labelClassName?: string;\n\n  /**\n   * An optional style to apply to the textarea element. The base `style` prop\n   * is applied to the surrounding `div` instead.\n   */\n  areaStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the textarea element. The base `style`\n   * prop is applied to the surrounding `div` instead.\n   */\n  areaClassName?: string;\n\n  /**\n   * The number of rows to display by default. The textarea will automatically\n   * update and animate its height when the users types if the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  rows?: number;\n\n  /**\n   * The maximum number of rows that are allowed. When this is set to `-1`, it\n   * will infinitely expand based on the text content.\n   */\n  maxRows?: number;\n\n  /**\n   * Updates the resize ability for the textarea. Native textareas are resizable\n   * both horizontally and vertically, but this component will prevent resizing\n   * by default and instead animate height changes as the user types.\n   */\n  resize?: TextAreaResize;\n\n  /**\n   * Boolean if the height changes should be animated when the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  animate?: boolean;\n\n  /**\n   * An optional ref to apply to the text field's container div element. The\n   * default ref is forwarded on to the `input` element.\n   */\n  containerRef?: Ref<HTMLDivElement>;\n\n  /**\n   * Any additional html attributes that should be applied to the main container\n   * div. This is probably only going to be used internally so that additional\n   * accessibility can be added to text fields for more complex widgets.\n   *\n   * @remarks \\@since 2.5.2\n   */\n  containerProps?: Omit<HTMLAttributes<HTMLDivElement>, \"style\" | \"className\">;\n}\n\nconst block = bem(\"rmd-textarea\");\nconst container = bem(\"rmd-textarea-container\");\nconst PADDING_VARIABLES =\n  \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\";\n\n// this is the default of 1.5rem line-height in the styles\nconst DEFAULT_LINE_HEIGHT = \"24\";\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  function TextArea(\n    {\n      style,\n      className,\n      areaStyle,\n      areaClassName,\n      containerRef,\n      containerProps,\n      label,\n      labelStyle,\n      labelClassName,\n      rows = 2,\n      maxRows = -1,\n      resize = \"auto\",\n      theme: propTheme,\n      dense = false,\n      inline: propInline = false,\n      error = false,\n      stretch = false,\n      disabled = false,\n      animate = true,\n      isLeftAddon = true,\n      isRightAddon = true,\n      underlineDirection: propUnderlineDirection,\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      leftChildren,\n      rightChildren,\n      ...props\n    },\n    forwardedRef\n  ): ReactElement {\n    const { id, value, defaultValue } = props;\n    const { theme, underlineDirection } = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection,\n    });\n\n    const [height, setHeight] = useState<number>();\n    useEffect(() => {\n      if (resize !== \"auto\" && typeof height === \"number\") {\n        setHeight(undefined);\n      }\n    }, [resize, height]);\n\n    const maskRef = useRef<HTMLTextAreaElement | null>(null);\n    const [scrollable, setScrollable] = useState(false);\n    const updateHeight = useCallback(() => {\n      const mask = maskRef.current;\n      /* istanbul ignore if */\n      if (!mask) {\n        return;\n      }\n\n      let nextHeight = mask.scrollHeight;\n      /* istanbul ignore if */\n      if (maxRows > 0) {\n        const lineHeight = parseFloat(\n          window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT\n        );\n        const maxHeight = maxRows * lineHeight;\n        nextHeight = Math.min(maxHeight, nextHeight);\n\n        // only want the textarea to be scrollable if there's a limit on the rows\n        // since it'll flash the scrollbar on most OS during the height transition\n        if (nextHeight === maxHeight && !scrollable) {\n          setScrollable(true);\n        } else if (nextHeight !== maxHeight && scrollable) {\n          setScrollable(false);\n        }\n      }\n\n      if (height !== nextHeight) {\n        setHeight(nextHeight);\n      }\n    }, [height, maxRows, scrollable]);\n\n    // the window can be resized while there is text inside the textarea so need to\n    // recalculate the height when the width changes as well.\n    const [, maskRefHandler] = useResizeObserver(updateHeight, {\n      ref: maskRef,\n      disableHeight: true,\n    });\n    const { valued, focused, onBlur, onFocus, onChange } = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: (event) => {\n        const mask = maskRef.current;\n        if (propOnChange) {\n          propOnChange(event);\n        }\n\n        /* istanbul ignore if */\n        if (!mask || resize !== \"auto\") {\n          return;\n        }\n\n        // to get the height transition to work, you have to set the height on:\n        // - the main container element (including padding) that has the height\n        //    transition enabled\n        // - a child div wrapper (without padding) that has the height transition\n        //    enabled\n        // - the textarea element (without padding) and without a height transition\n        //\n        // if it isn't done this way, the height transition will look weird since\n        // the text will be fixed to the bottom of the area and more text at the top\n        // will become visible as the height transition completes. applying the\n        // transition on the two parent elements work because:\n        // - the height is set immediately on the text field so it expands to show all\n        //    the text\n        // - the height is correctly applied to both parent elements, but their height\n        //    haven't fully been adjusted due to the animation\n        // - the parent divs have overflow visible by default, so the textarea's text\n        //    will expand past the boundaries of the divs and not cause the upwards\n        //    animation weirdness.\n        mask.value = event.currentTarget.value;\n        updateHeight();\n      },\n      value,\n      defaultValue,\n    });\n\n    const [ref, refHandler] = useEnsuredRef(forwardedRef);\n\n    // the container element adds some padding so that the content can scroll and\n    // not be covered by the floating label. unfortunately, this means that the entire\n    // container is no longer clickable to focus the input. This is used to add that\n    // functionality back.\n    const handleClick = useCallback(\n      (event: React.MouseEvent<HTMLDivElement>) => {\n        if (ref.current && event.target === event.currentTarget) {\n          ref.current.focus();\n        }\n      },\n      [ref]\n    );\n\n    const area = (\n      <textarea\n        {...props}\n        ref={refHandler}\n        rows={rows}\n        disabled={disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={onChange}\n        style={{ ...areaStyle, height: height ?? areaStyle?.height }}\n        className={cn(\n          block({\n            scrollable: scrollable || resize === \"none\",\n            floating: label && theme !== \"none\",\n            rh: resize === \"horizontal\",\n            rv: resize === \"vertical\",\n            rn: resize === \"auto\" || resize === \"none\",\n          }),\n          areaClassName\n        )}\n      />\n    );\n\n    let children = area;\n    if (resize === \"auto\") {\n      children = (\n        <div style={{ height }} className={container(\"inner\", { animate })}>\n          {area}\n          <textarea\n            aria-hidden\n            defaultValue={value || defaultValue}\n            id={`${id}-mask`}\n            ref={maskRefHandler}\n            readOnly\n            rows={rows}\n            tabIndex={-1}\n            style={areaStyle}\n            className={cn(\n              block({\n                rn: true,\n                mask: true,\n                floating: label && theme !== \"none\",\n              }),\n              areaClassName\n            )}\n          />\n        </div>\n      );\n    }\n\n    let inline = propInline;\n    if (resize === \"horizontal\" || resize === \"both\") {\n      // have to force it inline or else you won't be able to resize\n      // it horizontally.\n      inline = true;\n    }\n\n    return (\n      <TextFieldContainer\n        {...containerProps}\n        style={{\n          ...style,\n          height: height\n            ? `calc(${PADDING_VARIABLES} + ${height}px)`\n            : style?.height,\n        }}\n        className={cn(\n          container({\n            animate: animate && resize === \"auto\",\n            cursor: !disabled,\n          }),\n          className\n        )}\n        ref={containerRef}\n        theme={theme}\n        error={error}\n        active={focused}\n        label={!!label}\n        dense={dense}\n        inline={inline}\n        stretch={stretch}\n        disabled={disabled}\n        isLeftAddon={isLeftAddon}\n        isRightAddon={isRightAddon}\n        leftChildren={leftChildren}\n        rightChildren={rightChildren}\n        underlineDirection={underlineDirection}\n        onClick={!disabled ? handleClick : undefined}\n      >\n        <FloatingLabel\n          style={labelStyle}\n          className={labelClassName}\n          htmlFor={id}\n          error={error}\n          active={focused}\n          floating={focused || valued}\n          valued={valued}\n          dense={dense}\n          disabled={disabled}\n        >\n          {label}\n        </FloatingLabel>\n        {children}\n      </TextFieldContainer>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}