{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { Divider } from \"./Divider\";\nimport { useVerticalDividerHeight } from \"./useVerticalDividerHeight\";\n/**\n * This component is used to create a vertical divider based on a parent\n * element's height. This is really only needed when the parent element **has no\n * defined height**.  If there is a defined height, this component is not worth\n * much as the height can be computed in css as normal. This really just fixes\n * the issue that the height would be set to `auto` (which computes to 0 most of\n * the time) when it is not set on a parent element.\n */\nexport var VerticalDivider = forwardRef(function VerticalDivider(_a, ref) {\n  var style = _a.style,\n    _b = _a.maxHeight,\n    maxHeight = _b === void 0 ? 1 : _b,\n    props = __rest(_a, [\"style\", \"maxHeight\"]);\n  var heightProps = useVerticalDividerHeight({\n    ref: ref,\n    style: style,\n    maxHeight: maxHeight\n  });\n  return _jsx(Divider, __assign({}, props, heightProps, {\n    vertical: true\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,wBAAwB,QAAQ,4BAA4B;AAOrE;;;;;;;;AAQA,OAAO,IAAMC,eAAe,GAAGH,UAAU,CACvC,SAASG,eAAe,CAACC,EAAkC,EAAEC,GAAG;EAArC,SAAK;IAAEC,iBAAa;IAAbC,SAAS,mBAAG,CAAC;IAAKC,KAAK,cAAhC,sBAAkC,CAAF;EACvD,IAAMC,WAAW,GAAGP,wBAAwB,CAAC;IAC3CG,GAAG;IACHK,KAAK;IACLH,SAAS;GACV,CAAC;EAEF,OAAOI,KAACV,OAAO,eAAKO,KAAK,EAAMC,WAAW;IAAEG,QAAQ;EAAA,GAAG;AACzD,CAAC,CACF","names":["forwardRef","Divider","useVerticalDividerHeight","VerticalDivider","_a","ref","_b","maxHeight","props","heightProps","style","_jsx","vertical"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/divider/src/VerticalDivider.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\n\nimport { Divider } from \"./Divider\";\nimport { useVerticalDividerHeight } from \"./useVerticalDividerHeight\";\n\nexport interface VerticalDividerProps extends HTMLAttributes<HTMLDivElement> {\n  /** {@inheritDoc VerticalDividerHookOptions.maxHeight} */\n  maxHeight?: number;\n}\n\n/**\n * This component is used to create a vertical divider based on a parent\n * element's height. This is really only needed when the parent element **has no\n * defined height**.  If there is a defined height, this component is not worth\n * much as the height can be computed in css as normal. This really just fixes\n * the issue that the height would be set to `auto` (which computes to 0 most of\n * the time) when it is not set on a parent element.\n */\nexport const VerticalDivider = forwardRef<HTMLDivElement, VerticalDividerProps>(\n  function VerticalDivider({ style, maxHeight = 1, ...props }, ref) {\n    const heightProps = useVerticalDividerHeight({\n      ref,\n      style,\n      maxHeight,\n    });\n\n    return <Divider {...props} {...heightProps} vertical />;\n  }\n);\n"]},"metadata":{},"sourceType":"module"}