{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { TreeItem } from \"./TreeItem\";\nfunction isElementType(contentComponent) {\n  return typeof contentComponent !== \"undefined\";\n}\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps - The provided tree item props that should be passed down\n * for keyboard functionality, accessibility, and a `key` for the item.\n * @param item - The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps - The props for the Tree this item is being rendered in.\n * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem\n * itself.\n * @returns a `TreeItem` or a custom `ReactElement`\n */\nexport function defaultTreeItemRenderer(itemProps, item, treeProps) {\n  var treeItem = item;\n  var focused = itemProps.focused,\n    selected = itemProps.selected,\n    expanded = itemProps.expanded;\n  var expanderLeft = treeProps.expanderLeft,\n    expanderIcon = treeProps.expanderIcon,\n    labelKey = treeProps.labelKey,\n    getItemLabel = treeProps.getItemLabel,\n    getItemProps = treeProps.getItemProps,\n    linkComponent = treeProps.linkComponent;\n  var leftAddon = treeItem.leftAddon,\n    leftAddonType = treeItem.leftAddonType,\n    leftAddonPosition = treeItem.leftAddonPosition,\n    rightAddon = treeItem.rightAddon,\n    rightAddonType = treeItem.rightAddonType,\n    rightAddonPosition = treeItem.rightAddonPosition,\n    as = treeItem.as,\n    to = treeItem.to,\n    href = treeItem.href;\n  var isLink;\n  var readOnly;\n  var disabled;\n  var className;\n  var liClassName;\n  if (typeof treeItem.isLink === \"boolean\") {\n    isLink = treeItem.isLink;\n  }\n  if (typeof treeItem.readOnly === \"boolean\") {\n    readOnly = treeItem.readOnly;\n  }\n  if (typeof treeItem.disabled === \"boolean\") {\n    disabled = treeItem.disabled;\n  }\n  if (typeof treeItem.className === \"string\") {\n    className = treeItem.className;\n  }\n  if (typeof treeItem.liClassName === \"string\") {\n    liClassName = treeItem.liClassName;\n  }\n  var overrides = getItemProps(__assign(__assign({}, treeItem), {\n    focused: focused,\n    selected: selected,\n    expanded: expanded\n  }));\n  var children = overrides && overrides.children || undefined;\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(treeItem, labelKey);\n  }\n  var contentComponent;\n  if (isElementType(treeItem.contentComponent)) {\n    contentComponent = treeItem.contentComponent;\n  }\n  if (isLink !== false && (to || href || isLink)) {\n    contentComponent = contentComponent || linkComponent;\n  }\n  return _jsx(TreeItem, __assign({}, itemProps, {\n    as: as,\n    to: to,\n    href: href,\n    isLink: isLink,\n    contentComponent: contentComponent,\n    readOnly: readOnly,\n    disabled: disabled,\n    leftAddon: leftAddon,\n    leftAddonType: leftAddonType,\n    leftAddonPosition: leftAddonPosition,\n    rightAddon: rightAddon,\n    rightAddonType: rightAddonType,\n    rightAddonPosition: rightAddonPosition,\n    expanderLeft: expanderLeft,\n    expanderIcon: expanderIcon,\n    className: className,\n    liClassName: liClassName\n  }, overrides, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":"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","names":["TreeItem","isElementType","contentComponent","defaultTreeItemRenderer","itemProps","item","treeProps","treeItem","selected","expanded","expanderIcon","labelKey","getItemLabel","getItemProps","linkComponent","leftAddonType","leftAddonPosition","rightAddon","rightAddonType","rightAddonPosition","as","to","href","isLink","readOnly","disabled","className","liClassName","overrides","focused","children","undefined","_jsx","leftAddon","expanderLeft"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tree/src/defaultTreeItemRenderer.tsx"],"sourcesContent":["import type { ElementType, ReactElement, ReactNode } from \"react\";\n\nimport { TreeItem } from \"./TreeItem\";\nimport type {\n  BaseTreeItem,\n  ProvidedTreeItemProps,\n  ProvidedTreeProps,\n  UnknownTreeItem,\n} from \"./types\";\n\nfunction isElementType(\n  contentComponent: unknown\n): contentComponent is ElementType {\n  return typeof contentComponent !== \"undefined\";\n}\n\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps - The provided tree item props that should be passed down\n * for keyboard functionality, accessibility, and a `key` for the item.\n * @param item - The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps - The props for the Tree this item is being rendered in.\n * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem\n * itself.\n * @returns a `TreeItem` or a custom `ReactElement`\n */\nexport function defaultTreeItemRenderer(\n  itemProps: ProvidedTreeItemProps,\n  item: BaseTreeItem & { visibleIndex: number },\n  treeProps: ProvidedTreeProps\n): ReactElement {\n  const treeItem = item as UnknownTreeItem & { visibleIndex: number };\n  const { focused, selected, expanded } = itemProps;\n  const {\n    expanderLeft,\n    expanderIcon,\n    labelKey,\n    getItemLabel,\n    getItemProps,\n    linkComponent,\n  } = treeProps;\n  const {\n    leftAddon,\n    leftAddonType,\n    leftAddonPosition,\n    rightAddon,\n    rightAddonType,\n    rightAddonPosition,\n    as,\n    to,\n    href,\n  } = treeItem;\n  let isLink: boolean | undefined;\n  let readOnly: boolean | undefined;\n  let disabled: boolean | undefined;\n  let className: string | undefined;\n  let liClassName: string | undefined;\n  if (typeof treeItem.isLink === \"boolean\") {\n    ({ isLink } = treeItem);\n  }\n\n  if (typeof treeItem.readOnly === \"boolean\") {\n    ({ readOnly } = treeItem);\n  }\n\n  if (typeof treeItem.disabled === \"boolean\") {\n    ({ disabled } = treeItem);\n  }\n\n  if (typeof treeItem.className === \"string\") {\n    ({ className } = treeItem);\n  }\n\n  if (typeof treeItem.liClassName === \"string\") {\n    ({ liClassName } = treeItem);\n  }\n\n  const overrides = getItemProps({\n    ...treeItem,\n    focused,\n    selected,\n    expanded,\n  });\n\n  let children: ReactNode = (overrides && overrides.children) || undefined;\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(treeItem, labelKey);\n  }\n\n  let contentComponent: ElementType | undefined;\n  if (isElementType(treeItem.contentComponent)) {\n    ({ contentComponent } = treeItem);\n  }\n\n  if (isLink !== false && (to || href || isLink)) {\n    contentComponent = contentComponent || linkComponent;\n  }\n\n  return (\n    <TreeItem\n      {...itemProps}\n      as={as}\n      to={to}\n      href={href}\n      isLink={isLink}\n      contentComponent={contentComponent}\n      readOnly={readOnly}\n      disabled={disabled}\n      leftAddon={leftAddon}\n      leftAddonType={leftAddonType}\n      leftAddonPosition={leftAddonPosition}\n      rightAddon={rightAddon}\n      rightAddonType={rightAddonType}\n      rightAddonPosition={rightAddonPosition}\n      expanderLeft={expanderLeft}\n      expanderIcon={expanderIcon}\n      className={className}\n      liClassName={liClassName}\n      {...overrides}\n    >\n      {children}\n    </TreeItem>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}