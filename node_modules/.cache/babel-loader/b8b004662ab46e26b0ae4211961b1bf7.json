{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_CLASSNAMES, DEFAULT_TOOLTIP_POSITION, DEFAULT_TOOLTIP_TIMEOUT } from \"./constants\";\nvar block = bem(\"rmd-tooltip\");\n/**\n * This is the base tooltip component that can only be used to render a tooltip\n * with an animation when the visibility changes. If this component is used, you\n * will need to manually add all the event listeners and triggers to change the\n * `visible` prop.\n *\n * @example\n * Simple Usage\n * ```tsx\n * import { Button } from \"@react-md/button\";\n * import { useTooltip, Tooltip } from \"@react-md/tooltip\";\n *\n * function Example() {\n *   const { tooltipProps, elementProps } = useTooltip({\n *     baseId: 'my-element',\n *   });\n *\n *   return (\n *     <>\n *       <Button {...elementProps}>Button</Button>\n *       <Tooltip {...tooltipProps}>\n *         Tooltip Content\n *       </Tooltip>\n *     </>\n *   );\n * }\n * ```\n */\nexport var Tooltip = forwardRef(function Tooltip(_a, nodeRef) {\n  var _b;\n  var className = _a.className,\n    _c = _a.classNames,\n    classNames = _c === void 0 ? DEFAULT_TOOLTIP_CLASSNAMES : _c,\n    visible = _a.visible,\n    _d = _a.timeout,\n    timeout = _d === void 0 ? DEFAULT_TOOLTIP_TIMEOUT : _d,\n    _e = _a.dense,\n    dense = _e === void 0 ? false : _e,\n    _f = _a.lineWrap,\n    lineWrap = _f === void 0 ? true : _f,\n    _g = _a.position,\n    position = _g === void 0 ? DEFAULT_TOOLTIP_POSITION : _g,\n    children = _a.children,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    _h = _a.portal,\n    portal = _h === void 0 ? true : _h,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    _j = _a.temporary,\n    temporary = _j === void 0 ? true : _j,\n    props = __rest(_a, [\"className\", \"classNames\", \"visible\", \"timeout\", \"dense\", \"lineWrap\", \"position\", \"children\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"portal\", \"portalInto\", \"portalIntoId\", \"temporary\"]);\n  var _k = useCSSTransition({\n      nodeRef: nodeRef,\n      timeout: timeout,\n      className: cn(block((_b = {\n        dense: dense,\n        \"line-wrap\": lineWrap,\n        \"dense-line-wrap\": dense && lineWrap\n      }, _b[position] = true, _b)), className),\n      classNames: classNames,\n      transitionIn: visible,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      temporary: temporary\n    }),\n    elementProps = _k.elementProps,\n    rendered = _k.rendered;\n  return _jsx(ConditionalPortal, __assign({\n    portal: portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: rendered && _jsx(\"span\", __assign({}, props, elementProps, {\n      role: \"tooltip\"\n    }, {\n      children: children\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,iBAAiB,QAAQ,kBAAkB;AAMpD,SAASC,gBAAgB,QAAQ,sBAAsB;AAEvD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SACEC,0BAA0B,EAC1BC,wBAAwB,EACxBC,uBAAuB,QAClB,aAAa;AAmFpB,IAAMC,KAAK,GAAGJ,GAAG,CAAC,aAAa,CAAC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,IAAMK,OAAO,GAAGT,UAAU,CAC/B,SAASS,OAAO,CACdC,EAoBC,EACDC,OAAO;;EApBL,aAAS;IACTC,kBAAuC;IAAvCC,UAAU,mBAAGR,0BAA0B;IACvCS,OAAO;IACPC,eAAiC;IAAjCC,OAAO,mBAAGT,uBAAuB;IACjCU,aAAa;IAAbC,KAAK,mBAAG,KAAK;IACbC,gBAAe;IAAfC,QAAQ,mBAAG,IAAI;IACfC,gBAAmC;IAAnCC,QAAQ,mBAAGhB,wBAAwB;IACnCiB,QAAQ;IACRC,OAAO;IACPC,UAAU;IACVC,SAAS;IACTC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,cAAa;IAAbC,MAAM,mBAAG,IAAI;IACbC,UAAU;IACVC,YAAY;IACZC,iBAAgB;IAAhBC,SAAS,mBAAG,IAAI;IACbC,KAAK,cAnBV,4NAoBC,CADS;EAIJ,SAA6BjC,gBAAgB,CAAC;MAClDQ,OAAO;MACPK,OAAO;MACPqB,SAAS,EAAEpC,EAAE,CACXO,KAAK;QACHU,KAAK;QACL,WAAW,EAAEE,QAAQ;QACrB,iBAAiB,EAAEF,KAAK,IAAIE;SAC5BkB,GAAChB,QAAQ,IAAG,IAAI,MAChB,EACFe,SAAS,CACV;MACDxB,UAAU;MACV0B,YAAY,EAAEzB,OAAO;MACrBU,OAAO;MACPC,UAAU;MACVC,SAAS;MACTC,MAAM;MACNC,SAAS;MACTC,QAAQ;MACRM,SAAS;KACV,CAAC;IArBMK,YAAY;IAAEC,QAAQ,cAqB5B;EAEF,OACEC,KAACxC,iBAAiB;IAChB6B,MAAM,EAAEA,MAAM;IACdC,UAAU,EAAEA,UAAU;IACtBC,YAAY,EAAEA;EAAY;IAAAV,UAEzBkB,QAAQ,IACPC,0BAAUN,KAAK,EAAMI,YAAY;MAAEG,IAAI,EAAC;IAAS;MAAApB,UAC9CA;IAAQ;EAEZ,GACiB;AAExB,CAAC,CACF","names":["forwardRef","cn","ConditionalPortal","useCSSTransition","bem","DEFAULT_TOOLTIP_CLASSNAMES","DEFAULT_TOOLTIP_POSITION","DEFAULT_TOOLTIP_TIMEOUT","block","Tooltip","_a","nodeRef","_c","classNames","visible","_d","timeout","_e","dense","_f","lineWrap","_g","position","children","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_h","portal","portalInto","portalIntoId","_j","temporary","props","className","_b","transitionIn","elementProps","rendered","_jsx","role"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tooltip/src/Tooltip.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type {\n  CSSTransitionClassNames,\n  CSSTransitionComponentProps,\n  TransitionTimeout,\n} from \"@react-md/transition\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport type { SimplePosition } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_TOOLTIP_CLASSNAMES,\n  DEFAULT_TOOLTIP_POSITION,\n  DEFAULT_TOOLTIP_TIMEOUT,\n} from \"./constants\";\n\n/**\n * The base props for the `Tooltip` component. This can be extended when\n * creating custom tooltip implementations.\n *\n * @remarks \\@since 2.8.0 Supports the {@link RenderConditionalPortalProps}\n */\nexport interface TooltipProps\n  extends HTMLAttributes<HTMLSpanElement>,\n    RenderConditionalPortalProps,\n    CSSTransitionComponentProps {\n  /**\n   * An id for the tooltip. This is required for accessibility and finding an\n   * element to attach event listeners to show and hide the tooltip.\n   */\n  id: string;\n\n  /**\n   * An optional style to apply to the tooltip.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional class name to apply to the tooltip.\n   */\n  className?: string;\n\n  /**\n   * The contents of the tooltip to display. This can be any renderable element,\n   * but this is normally just text.\n   *\n   * If this is placed within a `<button>` element, make sure that there are no\n   * `<div>` since it is invalid html to have a `<div>` as a child of a\n   * `<button>`.\n   */\n  children?: ReactNode;\n\n  /**\n   * Boolean if the tooltip is using the dense spec. This will reduce the\n   * padding, margin and font size for the tooltip and is usually used for\n   * desktop displays.\n   */\n  dense?: boolean;\n\n  /**\n   * Boolean if the tooltip should allow line wrapping. This is disabled by\n   * default since the tooltip will display weirdly when its container element\n   * is small in size. It is advised to only enable line wrapping when there are\n   * long tooltips or the tooltips are bigger than the container element.\n   *\n   * Once line wrapping is enabled, you will most likely need to set some\n   * additional padding and widths.\n   */\n  lineWrap?: boolean;\n\n  /**\n   * This ties directly into the CSSTransition `classNames` prop and is used to\n   * generate and apply the correct class names during the tooltip's transition.\n   */\n  classNames?: CSSTransitionClassNames;\n\n  /**\n   * The enter duration in milliseconds for the tooltip to fully animate into\n   * view. This should match whatever value is set for\n   * `$rmd-tooltip-enter-duration`. A manual timeout is used instead of\n   * `onTransitionEnd` to handle cancel animations easier.\n   */\n  timeout?: TransitionTimeout;\n\n  /**\n   * This is the position that the tooltip should appear related to its\n   * container element as well as updating the animation direction.\n   */\n  position?: SimplePosition;\n\n  /**\n   * Boolean if the tooltip is visible. This value changing will trigger the\n   * different animations.\n   */\n  visible: boolean;\n}\n\nconst block = bem(\"rmd-tooltip\");\n\n/**\n * This is the base tooltip component that can only be used to render a tooltip\n * with an animation when the visibility changes. If this component is used, you\n * will need to manually add all the event listeners and triggers to change the\n * `visible` prop.\n *\n * @example\n * Simple Usage\n * ```tsx\n * import { Button } from \"@react-md/button\";\n * import { useTooltip, Tooltip } from \"@react-md/tooltip\";\n *\n * function Example() {\n *   const { tooltipProps, elementProps } = useTooltip({\n *     baseId: 'my-element',\n *   });\n *\n *   return (\n *     <>\n *       <Button {...elementProps}>Button</Button>\n *       <Tooltip {...tooltipProps}>\n *         Tooltip Content\n *       </Tooltip>\n *     </>\n *   );\n * }\n * ```\n */\nexport const Tooltip = forwardRef<HTMLSpanElement, TooltipProps>(\n  function Tooltip(\n    {\n      className,\n      classNames = DEFAULT_TOOLTIP_CLASSNAMES,\n      visible,\n      timeout = DEFAULT_TOOLTIP_TIMEOUT,\n      dense = false,\n      lineWrap = true,\n      position = DEFAULT_TOOLTIP_POSITION,\n      children,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      portal = true,\n      portalInto,\n      portalIntoId,\n      temporary = true,\n      ...props\n    },\n    nodeRef\n  ) {\n    const { elementProps, rendered } = useCSSTransition({\n      nodeRef,\n      timeout,\n      className: cn(\n        block({\n          dense,\n          \"line-wrap\": lineWrap,\n          \"dense-line-wrap\": dense && lineWrap,\n          [position]: true,\n        }),\n        className\n      ),\n      classNames,\n      transitionIn: visible,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      temporary,\n    });\n\n    return (\n      <ConditionalPortal\n        portal={portal}\n        portalInto={portalInto}\n        portalIntoId={portalIntoId}\n      >\n        {rendered && (\n          <span {...props} {...elementProps} role=\"tooltip\">\n            {children}\n          </span>\n        )}\n      </ConditionalPortal>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}