{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { useActionClassName } from \"./useActionClassName\";\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds a few additional styles to prevent the button from shrinking when\n * an `AppBar` has a lot of content.  It also will automatically add spacing\n * either before or after this button when the `first` or `last` props are\n * provided.\n */\nexport var AppBarAction = forwardRef(function AppBarAction(_a, ref) {\n  var className = _a.className,\n    _b = _a.first,\n    first = _b === void 0 ? false : _b,\n    _c = _a.last,\n    last = _c === void 0 ? false : _c,\n    children = _a.children,\n    inheritColor = _a.inheritColor,\n    floating = _a.floating,\n    _d = _a.theme,\n    theme = _d === void 0 ? floating ? \"secondary\" : \"clear\" : _d,\n    _e = _a.buttonType,\n    buttonType = _e === void 0 ? \"icon\" : _e,\n    props = __rest(_a, [\"className\", \"first\", \"last\", \"children\", \"inheritColor\", \"floating\", \"theme\", \"buttonType\"]);\n  return _jsx(Button, __assign({}, props, {\n    theme: theme,\n    buttonType: buttonType,\n    floating: floating,\n    ref: ref,\n    className: useActionClassName({\n      first: first,\n      last: last,\n      inheritColor: inheritColor,\n      className: className\n    })\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,MAAM,QAAQ,kBAAkB;AAGzC,SAASC,kBAAkB,QAAQ,sBAAsB;AAMzD;;;;;;;AAOA,OAAO,IAAMC,YAAY,GAAGH,UAAU,CACpC,SAASG,YAAY,CACnBC,EAUC,EACDC,GAAG;EAVD,aAAS;IACTC,aAAa;IAAbC,KAAK,mBAAG,KAAK;IACbC,YAAY;IAAZC,IAAI,mBAAG,KAAK;IACZC,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,aAAwC;IAAxCC,KAAK,mBAAGF,QAAQ,GAAG,WAAW,GAAG,OAAO;IACxCG,kBAAmB;IAAnBC,UAAU,mBAAG,MAAM;IAChBC,KAAK,cATV,6FAUC,CADS;EAIV,OACEC,KAACjB,MAAM,eACDgB,KAAK;IACTH,KAAK,EAAEA,KAAK;IACZE,UAAU,EAAEA,UAAU;IACtBJ,QAAQ,EAAEA,QAAQ;IAClBP,GAAG,EAAEA,GAAG;IACRc,SAAS,EAAEjB,kBAAkB,CAAC;MAAEK,KAAK;MAAEE,IAAI;MAAEE,YAAY;MAAEQ,SAAS;IAAA,CAAE;EAAC;IAAAT,UAEtEA;EAAQ,GACF;AAEb,CAAC,CACF","names":["forwardRef","Button","useActionClassName","AppBarAction","_a","ref","_b","first","_c","last","children","inheritColor","floating","_d","theme","_e","buttonType","props","_jsx","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/app-bar/src/AppBarAction.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport type { ButtonProps } from \"@react-md/button\";\nimport { Button } from \"@react-md/button\";\n\nimport type { AppBarActionClassNameProps } from \"./useActionClassName\";\nimport { useActionClassName } from \"./useActionClassName\";\n\nexport interface AppBarActionProps\n  extends ButtonProps,\n    AppBarActionClassNameProps {}\n\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds a few additional styles to prevent the button from shrinking when\n * an `AppBar` has a lot of content.  It also will automatically add spacing\n * either before or after this button when the `first` or `last` props are\n * provided.\n */\nexport const AppBarAction = forwardRef<HTMLButtonElement, AppBarActionProps>(\n  function AppBarAction(\n    {\n      className,\n      first = false,\n      last = false,\n      children,\n      inheritColor,\n      floating,\n      theme = floating ? \"secondary\" : \"clear\",\n      buttonType = \"icon\",\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <Button\n        {...props}\n        theme={theme}\n        buttonType={buttonType}\n        floating={floating}\n        ref={ref}\n        className={useActionClassName({ first, last, inheritColor, className })}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}