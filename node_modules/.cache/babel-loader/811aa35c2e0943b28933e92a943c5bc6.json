{"ast":null,"code":"import { useMemo } from \"react\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\nexport var toWidthPart = function (v, prefix) {\n  var type = typeof v;\n  if (type === \"undefined\") {\n    return \"\";\n  }\n  var value = type === \"number\" ? \"\".concat(v, \"px\") : v;\n  return \"(\".concat(prefix, \"-width: \").concat(value, \")\");\n};\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\nexport function useWidthMediaQuery(_a) {\n  var min = _a.min,\n    max = _a.max;\n  var query = useMemo(function () {\n    var parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")].filter(Boolean).join(\" and \");\n    return \"screen and \".concat(parts);\n  }, [min, max]);\n  return useMediaQuery(query);\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAG/B,SAASC,aAAa,QAAQ,iBAAiB;AAE/C;;;;AAIA,OAAO,IAAMC,WAAW,GAAG,UACzBC,CAAwB,EACxBC,MAAqB;EAErB,IAAMC,IAAI,GAAG,OAAOF,CAAC;EACrB,IAAIE,IAAI,KAAK,WAAW,EAAE;IACxB,OAAO,EAAE;;EAGX,IAAMC,KAAK,GAAGD,IAAI,KAAK,QAAQ,GAAG,UAAGF,CAAC,OAAI,GAAGA,CAAC;EAC9C,OAAO,WAAIC,MAAM,qBAAWE,KAAK,MAAG;AACtC,CAAC;AAYD;;;;;;;;AAQA,OAAM,SAAUC,kBAAkB,CAACC,EAGE;MAFnCC,GAAG;IACHC,GAAG;EAEH,IAAMC,KAAK,GAAGX,OAAO,CAAC;IACpB,IAAMY,KAAK,GAAG,CAACV,WAAW,CAACO,GAAG,EAAE,KAAK,CAAC,EAAEP,WAAW,CAACQ,GAAG,EAAE,KAAK,CAAC,CAAC,CAC7DG,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,OAAO,CAAC;IAEhB,OAAO,qBAAcH,KAAK,CAAE;EAC9B,CAAC,EAAE,CAACH,GAAG,EAAEC,GAAG,CAAC,CAAC;EAEd,OAAOT,aAAa,CAACU,KAAK,CAAC;AAC7B","names":["useMemo","useMediaQuery","toWidthPart","v","prefix","type","value","useWidthMediaQuery","_a","min","max","query","parts","filter","Boolean","join"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/sizing/useWidthMediaQuery.ts"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport type { QuerySize } from \"./constants\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\nexport const toWidthPart = (\n  v: QuerySize | undefined,\n  prefix: \"min\" | \"max\"\n): string => {\n  const type = typeof v;\n  if (type === \"undefined\") {\n    return \"\";\n  }\n\n  const value = type === \"number\" ? `${v}px` : v;\n  return `(${prefix}-width: ${value})`;\n};\n\ninterface WidthMediaQuery {\n  min?: QuerySize;\n  max?: QuerySize;\n}\n\ntype WidthMediaQuerys =\n  | { min: QuerySize }\n  | { max: QuerySize }\n  | { min: QuerySize; max: QuerySize };\n\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\nexport function useWidthMediaQuery({\n  min,\n  max,\n}: WidthMediaQuery & WidthMediaQuerys): boolean {\n  const query = useMemo(() => {\n    const parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")]\n      .filter(Boolean)\n      .join(\" and \");\n\n    return `screen and ${parts}`;\n  }, [min, max]);\n\n  return useMediaQuery(query);\n}\n"]},"metadata":{},"sourceType":"module"}