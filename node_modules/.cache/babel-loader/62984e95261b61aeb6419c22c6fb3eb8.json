{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\n/**\n * Creates a `<tbody>` element that also allows for overriding all the child\n * `TableCell` components with additional styling behavior.\n */\nexport var TableBody = forwardRef(function TableBody(_a, ref) {\n  var className = _a.className,\n    children = _a.children,\n    propHAlign = _a.hAlign,\n    propVAlign = _a.vAlign,\n    propLineWrap = _a.lineWrap,\n    propDisableHover = _a.disableHover,\n    propDisableBorders = _a.disableBorders,\n    props = __rest(_a, [\"className\", \"children\", \"hAlign\", \"vAlign\", \"lineWrap\", \"disableHover\", \"disableBorders\"]);\n  // update the table configuration with the custom overrides for the `<thead>`\n  var _b = useTableConfig({\n      hAlign: propHAlign,\n      vAlign: propVAlign,\n      lineWrap: propLineWrap,\n      disableHover: propDisableHover,\n      disableBorders: propDisableBorders\n    }),\n    hAlign = _b.hAlign,\n    vAlign = _b.vAlign,\n    lineWrap = _b.lineWrap,\n    disableHover = _b.disableHover,\n    disableBorders = _b.disableBorders;\n  var configuration = useMemo(function () {\n    return {\n      header: false,\n      hAlign: hAlign,\n      vAlign: vAlign,\n      lineWrap: lineWrap,\n      disableBorders: disableBorders,\n      disableHover: disableHover\n    };\n  }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);\n  return _jsx(TableConfigProvider, __assign({\n    value: configuration\n  }, {\n    children: _jsx(\"tbody\", __assign({}, props, {\n      ref: ref,\n      className: cn(\"rmd-tbody\", className)\n    }, {\n      children: children\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,YAAY;AAG3B,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,UAAU;AAM9D;;;;AAIA,OAAO,IAAMC,SAAS,GAAGL,UAAU,CACjC,SAASK,SAAS,CAChBC,EASC,EACDC,GAAG;EATD,aAAS;IACTC,QAAQ;IACAC,UAAU;IACVC,UAAU;IACRC,YAAY;IACRC,gBAAgB;IACdC,kBAAkB;IAC/BC,KAAK,cARV,2FASC,CADS;EAIV;EACM,SACJV,cAAc,CAAC;MACbW,MAAM,EAAEN,UAAU;MAClBO,MAAM,EAAEN,UAAU;MAClBO,QAAQ,EAAEN,YAAY;MACtBO,YAAY,EAAEN,gBAAgB;MAC9BO,cAAc,EAAEN;KACjB,CAAC;IAPIE,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,cAAc,oBAO1D;EAEJ,IAAMC,aAAa,GAAGnB,OAAO,CAC3B;IAAM,OAAC;MACLoB,MAAM,EAAE,KAAK;MACbN,MAAM;MACNC,MAAM;MACNC,QAAQ;MACRE,cAAc;MACdD,YAAY;KACb;EAPK,CAOJ,EACF,CAACH,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEE,cAAc,EAAED,YAAY,CAAC,CACzD;EAED,OACEI,KAACnB,mBAAmB;IAACoB,KAAK,EAAEH;EAAa;IAAAZ,UACvCc,2BAAWR,KAAK;MAAEP,GAAG,EAAEA,GAAG;MAAEiB,SAAS,EAAEtB,EAAE,CAAC,WAAW,EAAEsB,SAAS;IAAC;MAAAhB,UAC9DA;IAAQ;EACH,GACY;AAE1B,CAAC,CACF","names":["forwardRef","useMemo","cn","TableConfigProvider","useTableConfig","TableBody","_a","ref","children","propHAlign","propVAlign","propLineWrap","propDisableHover","propDisableBorders","props","hAlign","vAlign","lineWrap","disableHover","disableBorders","configuration","header","_jsx","value","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/table/src/TableBody.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport type { TableConfig } from \"./config\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\n\nexport interface TableBodyProps\n  extends HTMLAttributes<HTMLTableSectionElement>,\n    Omit<TableConfig, \"header\"> {}\n\n/**\n * Creates a `<tbody>` element that also allows for overriding all the child\n * `TableCell` components with additional styling behavior.\n */\nexport const TableBody = forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  function TableBody(\n    {\n      className,\n      children,\n      hAlign: propHAlign,\n      vAlign: propVAlign,\n      lineWrap: propLineWrap,\n      disableHover: propDisableHover,\n      disableBorders: propDisableBorders,\n      ...props\n    },\n    ref\n  ) {\n    // update the table configuration with the custom overrides for the `<thead>`\n    const { hAlign, vAlign, lineWrap, disableHover, disableBorders } =\n      useTableConfig({\n        hAlign: propHAlign,\n        vAlign: propVAlign,\n        lineWrap: propLineWrap,\n        disableHover: propDisableHover,\n        disableBorders: propDisableBorders,\n      });\n\n    const configuration = useMemo(\n      () => ({\n        header: false,\n        hAlign,\n        vAlign,\n        lineWrap,\n        disableBorders,\n        disableHover,\n      }),\n      [hAlign, vAlign, lineWrap, disableBorders, disableHover]\n    );\n\n    return (\n      <TableConfigProvider value={configuration}>\n        <tbody {...props} ref={ref} className={cn(\"rmd-tbody\", className)}>\n          {children}\n        </tbody>\n      </TableConfigProvider>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}