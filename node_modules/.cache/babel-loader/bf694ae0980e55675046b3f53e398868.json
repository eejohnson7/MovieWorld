{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport { ListItemChildren } from \"@react-md/list\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\nimport { TreeGroup } from \"./TreeGroup\";\nimport { TreeItemExpanderIcon } from \"./TreeItemExpanderIcon\";\nvar block = bem(\"rmd-tree-item\");\n/**\n * This component renders an item within a tree with optional child items. This\n * should almost always be used from the `itemRenderer` prop from the `Tree`\n * component as it provides a lot of the required a11y props for you.\n */\nexport var TreeItem = forwardRef(function TreeItem(_a, ref) {\n  var _b;\n  var id = _a.id,\n    propClassName = _a.className,\n    liStyle = _a.liStyle,\n    liClassName = _a.liClassName,\n    liRef = _a.liRef,\n    depth = _a.depth,\n    listSize = _a.listSize,\n    itemIndex = _a.itemIndex,\n    renderChildItems = _a.renderChildItems,\n    expanded = _a.expanded,\n    selected = _a.selected,\n    focused = _a.focused,\n    propExpanderIcon = _a.expanderIcon,\n    _c = _a.expanderLeft,\n    expanderLeft = _c === void 0 ? false : _c,\n    textClassName = _a.textClassName,\n    secondaryTextClassName = _a.secondaryTextClassName,\n    _d = _a.textChildren,\n    textChildren = _d === void 0 ? true : _d,\n    primaryText = _a.primaryText,\n    secondaryText = _a.secondaryText,\n    propLeftAddon = _a.leftAddon,\n    _e = _a.leftAddonType,\n    leftAddonType = _e === void 0 ? \"icon\" : _e,\n    _f = _a.leftAddonPosition,\n    leftAddonPosition = _f === void 0 ? \"middle\" : _f,\n    propRightAddon = _a.rightAddon,\n    _g = _a.rightAddonType,\n    rightAddonType = _g === void 0 ? \"icon\" : _g,\n    _h = _a.rightAddonPosition,\n    rightAddonPosition = _h === void 0 ? \"middle\" : _h,\n    forceAddonWrap = _a.forceAddonWrap,\n    _j = _a.height,\n    height = _j === void 0 ? \"auto\" : _j,\n    _k = _a.threeLines,\n    threeLines = _k === void 0 ? false : _k,\n    children = _a.children,\n    _l = _a.contentComponent,\n    Content = _l === void 0 ? \"span\" : _l,\n    propIsLink = _a.isLink,\n    _m = _a.disabled,\n    disabled = _m === void 0 ? false : _m,\n    readOnly = _a.readOnly,\n    onFocus = _a.onFocus,\n    onKeyUp = _a.onKeyUp,\n    onKeyDown = _a.onKeyDown,\n    onClick = _a.onClick,\n    onMouseUp = _a.onMouseUp,\n    onMouseDown = _a.onMouseDown,\n    onMouseLeave = _a.onMouseLeave,\n    onTouchMove = _a.onTouchMove,\n    onTouchEnd = _a.onTouchEnd,\n    onTouchStart = _a.onTouchStart,\n    props = __rest(_a, [\"id\", \"className\", \"liStyle\", \"liClassName\", \"liRef\", \"depth\", \"listSize\", \"itemIndex\", \"renderChildItems\", \"expanded\", \"selected\", \"focused\", \"expanderIcon\", \"expanderLeft\", \"textClassName\", \"secondaryTextClassName\", \"textChildren\", \"primaryText\", \"secondaryText\", \"leftAddon\", \"leftAddonType\", \"leftAddonPosition\", \"rightAddon\", \"rightAddonType\", \"rightAddonPosition\", \"forceAddonWrap\", \"height\", \"threeLines\", \"children\", \"contentComponent\", \"isLink\", \"disabled\", \"readOnly\", \"onFocus\", \"onKeyUp\", \"onKeyDown\", \"onClick\", \"onMouseUp\", \"onMouseDown\", \"onMouseLeave\", \"onTouchMove\", \"onTouchEnd\", \"onTouchStart\"]);\n  var expanderIcon = useIcon(\"expander\", propExpanderIcon);\n  var isLink = typeof propIsLink === \"boolean\" ? propIsLink : typeof Content !== \"string\" || Content === \"a\";\n  var _o = useInteractionStates({\n      disabled: disabled,\n      className: propClassName,\n      handlers: {\n        onKeyUp: onKeyUp,\n        onKeyDown: onKeyDown,\n        onClick: onClick,\n        onMouseUp: onMouseUp,\n        onMouseDown: onMouseDown,\n        onMouseLeave: onMouseLeave,\n        onTouchMove: onTouchMove,\n        onTouchEnd: onTouchEnd,\n        onTouchStart: onTouchStart\n      },\n      disableSpacebarClick: isLink\n    }),\n    ripples = _o.ripples,\n    className = _o.className,\n    handlers = _o.handlers;\n  var group;\n  var leftAddon = propLeftAddon;\n  var rightAddon = propRightAddon;\n  if (renderChildItems) {\n    var icon = _jsx(TreeItemExpanderIcon, __assign({\n      rotated: expanded\n    }, {\n      children: expanderIcon\n    }));\n    if (expanderLeft) {\n      leftAddon = icon;\n    } else {\n      rightAddon = icon;\n    }\n    group = _jsx(TreeGroup, __assign({\n      collapsed: !expanded\n    }, {\n      children: renderChildItems()\n    }));\n  }\n  var handleFocus = useCallback(function (event) {\n    var _a;\n    if (onFocus) {\n      onFocus(event);\n    }\n    event.preventDefault();\n    (_a = event.currentTarget.closest('[role=\"tree\"]')) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [onFocus]);\n  var a11y = __assign(__assign({\n    \"aria-expanded\": renderChildItems ? expanded : undefined,\n    \"aria-selected\": selected,\n    \"aria-level\": depth + 1,\n    \"aria-setsize\": listSize,\n    \"aria-posinset\": itemIndex + 1,\n    \"aria-disabled\": disabled || undefined,\n    id: id,\n    role: \"treeitem\",\n    tabIndex: -1\n  }, handlers), {\n    onFocus: handleFocus\n  });\n  var noA11y = {\n    role: \"none\"\n  };\n  return _jsxs(\"li\", __assign({}, isLink ? noA11y : a11y, {\n    ref: liRef,\n    style: liStyle,\n    className: cn(block(), liClassName)\n  }, {\n    children: [_jsxs(Content, __assign({}, props, isLink ? a11y : undefined, {\n      ref: ref,\n      className: cn(block(\"content\", (_b = {\n        link: isLink,\n        clickable: !disabled && !readOnly\n      }, _b[height] = height !== \"auto\" && height !== \"normal\", _b[\"three-lines\"] = !!secondaryText && threeLines, _b.selected = selected, _b.focused = focused, _b)), className)\n    }, {\n      children: [_jsx(ListItemChildren, __assign({\n        textClassName: textClassName,\n        secondaryTextClassName: secondaryTextClassName,\n        textChildren: textChildren,\n        primaryText: primaryText,\n        secondaryText: secondaryText,\n        leftAddon: leftAddon,\n        leftAddonType: leftAddonType,\n        leftAddonPosition: leftAddonPosition,\n        rightAddon: rightAddon,\n        rightAddonType: rightAddonType,\n        rightAddonPosition: rightAddonPosition,\n        forceAddonWrap: forceAddonWrap\n      }, {\n        children: children\n      })), ripples]\n    })), group]\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useCallback","cn","useIcon","ListItemChildren","useInteractionStates","bem","TreeGroup","TreeItemExpanderIcon","block","TreeItem","_a","ref","propClassName","liStyle","liClassName","liRef","depth","listSize","itemIndex","renderChildItems","expanded","selected","focused","propExpanderIcon","_c","expanderLeft","textClassName","secondaryTextClassName","_d","textChildren","primaryText","secondaryText","propLeftAddon","_e","leftAddonType","_f","leftAddonPosition","propRightAddon","_g","rightAddonType","_h","rightAddonPosition","forceAddonWrap","_j","height","_k","threeLines","children","_l","Content","propIsLink","_m","disabled","readOnly","onFocus","onKeyUp","onKeyDown","onClick","onMouseUp","onMouseDown","onMouseLeave","onTouchMove","onTouchEnd","onTouchStart","props","expanderIcon","isLink","className","handlers","disableSpacebarClick","ripples","group","leftAddon","rightAddon","icon","_jsx","rotated","collapsed","handleFocus","event","preventDefault","currentTarget","closest","focus","a11y","__assign","undefined","id","role","tabIndex","noA11y","_jsxs","style","link","clickable","_b"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tree/src/TreeItem.tsx"],"sourcesContent":["import { forwardRef, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { useIcon } from \"@react-md/icon\";\nimport type { ListElement } from \"@react-md/list\";\nimport { ListItemChildren } from \"@react-md/list\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\n\nimport { TreeGroup } from \"./TreeGroup\";\nimport { TreeItemExpanderIcon } from \"./TreeItemExpanderIcon\";\nimport type { TreeItemProps, TreeItemWithContentComponentProps } from \"./types\";\n\nconst block = bem(\"rmd-tree-item\");\n\n/**\n * This component renders an item within a tree with optional child items. This\n * should almost always be used from the `itemRenderer` prop from the `Tree`\n * component as it provides a lot of the required a11y props for you.\n */\nexport const TreeItem = forwardRef<\n  HTMLLIElement,\n  TreeItemProps | TreeItemWithContentComponentProps\n>(function TreeItem(\n  {\n    id,\n    className: propClassName,\n    liStyle,\n    liClassName,\n    liRef,\n    depth,\n    listSize,\n    itemIndex,\n    renderChildItems,\n    expanded,\n    selected,\n    focused,\n    expanderIcon: propExpanderIcon,\n    expanderLeft = false,\n    textClassName,\n    secondaryTextClassName,\n    textChildren = true,\n    primaryText,\n    secondaryText,\n    leftAddon: propLeftAddon,\n    leftAddonType = \"icon\",\n    leftAddonPosition = \"middle\",\n    rightAddon: propRightAddon,\n    rightAddonType = \"icon\",\n    rightAddonPosition = \"middle\",\n    forceAddonWrap,\n    height = \"auto\",\n    threeLines = false,\n    children,\n    contentComponent: Content = \"span\",\n    isLink: propIsLink,\n    disabled = false,\n    readOnly,\n    onFocus,\n    onKeyUp,\n    onKeyDown,\n    onClick,\n    onMouseUp,\n    onMouseDown,\n    onMouseLeave,\n    onTouchMove,\n    onTouchEnd,\n    onTouchStart,\n    ...props\n  },\n  ref\n) {\n  const expanderIcon = useIcon(\"expander\", propExpanderIcon);\n\n  const isLink =\n    typeof propIsLink === \"boolean\"\n      ? propIsLink\n      : typeof Content !== \"string\" || Content === \"a\";\n\n  const { ripples, className, handlers } = useInteractionStates({\n    disabled,\n    className: propClassName,\n    handlers: {\n      onKeyUp,\n      onKeyDown,\n      onClick,\n      onMouseUp,\n      onMouseDown,\n      onMouseLeave,\n      onTouchMove,\n      onTouchEnd,\n      onTouchStart,\n    },\n    disableSpacebarClick: isLink,\n  });\n\n  let group;\n  let leftAddon = propLeftAddon;\n  let rightAddon = propRightAddon;\n  if (renderChildItems) {\n    const icon = (\n      <TreeItemExpanderIcon rotated={expanded}>\n        {expanderIcon}\n      </TreeItemExpanderIcon>\n    );\n    if (expanderLeft) {\n      leftAddon = icon;\n    } else {\n      rightAddon = icon;\n    }\n\n    group = <TreeGroup collapsed={!expanded}>{renderChildItems()}</TreeGroup>;\n  }\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLLIElement>) => {\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      event.preventDefault();\n      event.currentTarget.closest<ListElement>('[role=\"tree\"]')?.focus();\n    },\n    [onFocus]\n  );\n\n  const a11y = {\n    \"aria-expanded\": renderChildItems ? expanded : undefined,\n    \"aria-selected\": selected,\n    \"aria-level\": depth + 1,\n    \"aria-setsize\": listSize,\n    \"aria-posinset\": itemIndex + 1,\n    \"aria-disabled\": disabled || undefined,\n    id,\n    role: \"treeitem\",\n    tabIndex: -1,\n    ...handlers,\n    onFocus: handleFocus,\n  } as const;\n  const noA11y = { role: \"none\" } as const;\n\n  return (\n    <li\n      {...(isLink ? noA11y : a11y)}\n      ref={liRef}\n      style={liStyle}\n      className={cn(block(), liClassName)}\n    >\n      <Content\n        {...props}\n        {...(isLink ? a11y : undefined)}\n        ref={ref}\n        className={cn(\n          block(\"content\", {\n            link: isLink,\n            clickable: !disabled && !readOnly,\n            [height]: height !== \"auto\" && height !== \"normal\",\n            \"three-lines\": !!secondaryText && threeLines,\n            selected,\n            focused,\n          }),\n          className\n        )}\n      >\n        <ListItemChildren\n          textClassName={textClassName}\n          secondaryTextClassName={secondaryTextClassName}\n          textChildren={textChildren}\n          primaryText={primaryText}\n          secondaryText={secondaryText}\n          leftAddon={leftAddon}\n          leftAddonType={leftAddonType}\n          leftAddonPosition={leftAddonPosition}\n          rightAddon={rightAddon}\n          rightAddonType={rightAddonType}\n          rightAddonPosition={rightAddonPosition}\n          forceAddonWrap={forceAddonWrap}\n        >\n          {children}\n        </ListItemChildren>\n        {ripples}\n      </Content>\n      {group}\n    </li>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}