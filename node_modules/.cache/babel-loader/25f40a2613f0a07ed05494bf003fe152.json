{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT } from \"./constants\";\nimport { LayoutChildren } from \"./LayoutChildren\";\nimport { LayoutProvider } from \"./LayoutProvider\";\n/**\n * The layout to use for your app. There are 9 different types of layouts\n * supported out of the box that work for a decent amount of apps out of the\n * box.\n *\n * Note: You will need to ensure that the base `Configuration` component is a\n * parent of this `Layout` component to work since it relies on the\n * `AppSizeContext` for automatically updating the layout based on media\n * queries.\n */\nexport function Layout(_a) {\n  var _b, _c;\n  var _d = _a.id,\n    id = _d === void 0 ? \"layout\" : _d,\n    _e = _a.phoneLayout,\n    phoneLayout = _e === void 0 ? DEFAULT_PHONE_LAYOUT : _e,\n    _f = _a.tabletLayout,\n    tabletLayout = _f === void 0 ? DEFAULT_TABLET_LAYOUT : _f,\n    _g = _a.landscapeTabletLayout,\n    landscapeTabletLayout = _g === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _g,\n    _h = _a.desktopLayout,\n    desktopLayout = _h === void 0 ? DEFAULT_DESKTOP_LAYOUT : _h,\n    largeDesktopLayout = _a.largeDesktopLayout,\n    _j = _a.defaultToggleableVisible,\n    defaultToggleableVisible = _j === void 0 ? false : _j,\n    props = __rest(_a, [\"id\", \"phoneLayout\", \"tabletLayout\", \"landscapeTabletLayout\", \"desktopLayout\", \"largeDesktopLayout\", \"defaultToggleableVisible\"]);\n  return _jsx(LayoutProvider, __assign({\n    baseId: id,\n    fixedAppBar: (_c = (_b = props.appBarProps) === null || _b === void 0 ? void 0 : _b.fixed) !== null && _c !== void 0 ? _c : typeof props.appBar === \"undefined\",\n    phoneLayout: phoneLayout,\n    tabletLayout: tabletLayout,\n    landscapeTabletLayout: landscapeTabletLayout,\n    desktopLayout: desktopLayout,\n    largeDesktopLayout: largeDesktopLayout,\n    defaultToggleableVisible: defaultToggleableVisible\n  }, {\n    children: _jsx(LayoutChildren, __assign({\n      id: id\n    }, props))\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAIA,SACEA,sBAAsB,EACtBC,+BAA+B,EAC/BC,oBAAoB,EACpBC,qBAAqB,QAChB,aAAa;AAEpB,SAASC,cAAc,QAAQ,kBAAkB;AAIjD,SAASC,cAAc,QAAQ,kBAAkB;AAsNjD;;;;;;;;;;AAUA,OAAM,SAAUC,MAAM,CAACC,EAST;;EARZ,cAAa;IAAbC,EAAE,mBAAG,QAAQ;IACbC,mBAAkC;IAAlCC,WAAW,mBAAGR,oBAAoB;IAClCS,oBAAoC;IAApCC,YAAY,mBAAGT,qBAAqB;IACpCU,6BAAuD;IAAvDC,qBAAqB,mBAAGb,+BAA+B;IACvDc,qBAAsC;IAAtCC,aAAa,mBAAGhB,sBAAsB;IACtCiB,kBAAkB;IAClBC,gCAAgC;IAAhCC,wBAAwB,mBAAG,KAAK;IAC7BC,KAAK,cARa,iIAStB,CADS;EAER,OACEC,KAAChB,cAAc;IACbiB,MAAM,EAAEd,EAAE;IACVe,WAAW,EACT,iBAAK,CAACC,WAAW,0CAAEC,KAAK,mCAAI,OAAOL,KAAK,CAACM,MAAM,KAAK,WAAW;IAEjEhB,WAAW,EAAEA,WAAW;IACxBE,YAAY,EAAEA,YAAY;IAC1BE,qBAAqB,EAAEA,qBAAqB;IAC5CE,aAAa,EAAEA,aAAa;IAC5BC,kBAAkB,EAAEA,kBAAkB;IACtCE,wBAAwB,EAAEA;EAAwB;IAAAQ,UAElDN,KAACjB,cAAc;MAACI,EAAE,EAAEA;IAAE,GAAMY,KAAK;EAAI,GACtB;AAErB","names":["DEFAULT_DESKTOP_LAYOUT","DEFAULT_LANDSCAPE_TABLET_LAYOUT","DEFAULT_PHONE_LAYOUT","DEFAULT_TABLET_LAYOUT","LayoutChildren","LayoutProvider","Layout","_a","id","_e","phoneLayout","_f","tabletLayout","_g","landscapeTabletLayout","_h","desktopLayout","largeDesktopLayout","_j","defaultToggleableVisible","props","_jsx","baseId","fixedAppBar","appBarProps","fixed","appBar","children"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/layout/src/Layout.tsx"],"sourcesContent":["import type { ReactNode, ReactElement } from \"react\";\nimport type { BaseTreeItem } from \"@react-md/tree\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_DESKTOP_LAYOUT,\n  DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  DEFAULT_PHONE_LAYOUT,\n  DEFAULT_TABLET_LAYOUT,\n} from \"./constants\";\nimport type { LayoutChildrenProps } from \"./LayoutChildren\";\nimport { LayoutChildren } from \"./LayoutChildren\";\nimport type { LayoutAppBarProps } from \"./LayoutAppBar\";\nimport type { LayoutNavigationProps } from \"./LayoutNavigation\";\nimport type { LayoutWithNavToggle } from \"./LayoutNavToggle\";\nimport { LayoutProvider } from \"./LayoutProvider\";\nimport type { LayoutTreeProps } from \"./LayoutTree\";\nimport type {\n  LayoutConfiguration,\n  LayoutNavigationItem,\n  LayoutWithTitle,\n} from \"./types\";\n\n/**\n * Since the layout is a combination of multiple nested configurable components,\n * it can be annoying to have to apply multiple levels of prop configurations to\n * this root component. The main `Layout` flattens some of these props and\n * components if this is preferable.\n *\n * Example:\n *\n * ```tsx\n * <Layout\n *   appBarProps={{\n *     title: \"Current Page Title\",\n *     navToggleProps: {\n *       \"aria-label\": \"A custom label\"\n *     }\n *   }}\n *   navProps={{\n *     navHeaderProps: {\n *       title: \"Company Name\"\n *       closeNavProps: {\n *         disabled: true,\n *       },\n *       treeProps: useLayoutNavigation(navItems, window.location.pathname),\n *     },\n *   }}\n *   {...props}\n * />\n *\n *\n * // can also be written as\n * <Layout\n *   title=\"Current Page Title\"\n *   navToggleProps={{\n *     \"aria-label\": \"A custom label\"\n *   }}\n *   navHeaderTitle=\"Current Page Title\"\n *   closeNavProps={{ disabled: true }}\n *   treeProps={useLayoutNavigation(navItems, window.location.pathname)}\n *   {...props}\n * />\n * ```\n */\nexport interface FlattenedLayoutComponentConfiguration<\n  T extends BaseTreeItem = LayoutNavigationItem\n> extends LayoutWithTitle,\n    LayoutWithNavToggle {\n  /**\n   * A custom implementation for the main `AppBar` within the `Layout` that will\n   * be used instead of the default `LayoutAppBar` if it is not `undefined`.\n   * This means that if you don't want to use an `AppBar` at all in your\n   * application, set this value to `null`.\n   *\n   * Using this prop will make the following props do nothing:\n   *\n   * - `appBarProps`\n   * - `customTitle`\n   * - `title`\n   * - `titleProps`\n   */\n  appBar?: ReactNode;\n\n  /**\n   * Any additional props to provide to the default `LayoutAppBar`\n   */\n  appBarProps?: PropsWithRef<LayoutAppBarProps, HTMLDivElement>;\n\n  /**\n   * A custom implementation for the main navigation component within the\n   * `Layout`. If this is not `undefined`, it will be used instead of the\n   * default implementation.\n   *\n   * Using this prop will make the following props do nothing:\n   *\n   * - `navProps`\n   * - `navHeader`\n   * - `navHeaderProps`\n   * - `navHeaderTitle`\n   * - `navHeaderTitleProps`\n   * - `closeNav`\n   * - `closeNavProps`\n   * - `treeProps`\n   */\n  nav?: ReactNode;\n\n  /**\n   * A custom implementation for the main mini navigation component within the\n   * `Layout`. If this is not `undefined`, it will be used instead of the\n   * default implementation.\n   *\n   * Using this prop will make the following props do nothing for the mini nav:\n   *\n   * - `navProps`\n   * - `navHeader`\n   * - `navHeaderProps`\n   * - `navHeaderTitle`\n   * - `navHeaderTitleProps`\n   * - `closeNav`\n   * - `closeNavProps`\n   * - `treeProps`\n   *\n   * @remarks \\@since.2.7.0\n   */\n  miniNav?: ReactNode;\n\n  /**\n   * Any additional props to provide to the default `LayoutNavigation`.\n   */\n  navProps?: PropsWithRef<LayoutNavigationProps<T>, HTMLDivElement>;\n\n  /**\n   * A custom implementation for the main navigation component's header element\n   * within the `Layout`. If this is not `undefined`, it will be used instead of\n   * the default implementation.\n   *\n   * Using this prop will make the following props do nothing:\n   *\n   * - `navHeaderProps`\n   * - `navHeaderTitle`\n   * - `navHeaderTitleProps`\n   * - `closeNav`\n   * - `closeNavProps`\n   */\n  navHeader?: LayoutNavigationProps[\"header\"];\n\n  /**\n   * Any additional props to provide to the default `LayoutNavigation`\n   * component.\n   */\n  navHeaderProps?: PropsWithRef<\n    Required<LayoutNavigationProps<T>>[\"headerProps\"],\n    HTMLDivElement\n  >;\n\n  /**\n   * An optional title to display within the `LayoutNavigation`'s header\n   * component. This will be defaulted to being wrapped with an `AppBarTitle`\n   * component for additional styling.\n   */\n  navHeaderTitle?: LayoutNavigationProps[\"headerTitle\"];\n\n  /**\n   * Any additional props to provide to the `AppBarTitle` surrounding the\n   * `navHeaderTitle`.\n   */\n  navHeaderTitleProps?: PropsWithRef<\n    Required<LayoutNavigationProps>[\"headerTitleProps\"],\n    HTMLDivElement\n  >;\n\n  /**\n   * A custom implementation for the button that closes the toggleable layouts.\n   * If this is not `undefined`, it will be used instead of the default\n   * implementation.\n   *\n   * The default implementation for this component will be to only render for\n   * toggleable layouts and close the navigation panel once clicked.\n   *\n   * Using this prop will make the `closeNavProps` do nothing.\n   */\n  closeNav?: LayoutNavigationProps[\"closeNav\"];\n\n  /**\n   * Any additional props to provide to the default\n   * `LayoutCloseNavigationButton` component.\n   */\n  closeNavProps?: PropsWithRef<\n    Required<LayoutNavigationProps>[\"closeNavProps\"],\n    HTMLButtonElement\n  >;\n\n  /**\n   * This is the most important prop within the `Layout` if you want to have a\n   * navigation tree. This prop should normally be created by using the\n   * `useLayoutNavigation` hook but you can always provide any additional props\n   * that are required to style or customize your tree.\n   *\n   * Example:\n   *\n   * ```tsx\n   * <Layout\n   *   treeProps={useLayoutNavigation(navItems, window.location.pathname)}\n   *   {...props}\n   * />\n   * ```\n   *\n   * or with additional props:\n   *\n   * ```tsx\n   * <Layout\n   *   treeProps={{\n   *     ...useLayoutNavigation(navItems, window.location.pathname),\n   *     ...otherTreeProps\n   *   }}\n   *   {...props}\n   * />\n   * ```\n   *\n   * Please see the `useLayoutNavigation` hook for additional documentation.\n   */\n  treeProps?: PropsWithRef<LayoutTreeProps<T>, HTMLUListElement>;\n}\n\nexport interface LayoutProps<T extends BaseTreeItem = LayoutNavigationItem>\n  extends LayoutConfiguration,\n    LayoutChildrenProps<T> {}\n\n/**\n * The layout to use for your app. There are 9 different types of layouts\n * supported out of the box that work for a decent amount of apps out of the\n * box.\n *\n * Note: You will need to ensure that the base `Configuration` component is a\n * parent of this `Layout` component to work since it relies on the\n * `AppSizeContext` for automatically updating the layout based on media\n * queries.\n */\nexport function Layout({\n  id = \"layout\",\n  phoneLayout = DEFAULT_PHONE_LAYOUT,\n  tabletLayout = DEFAULT_TABLET_LAYOUT,\n  landscapeTabletLayout = DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  desktopLayout = DEFAULT_DESKTOP_LAYOUT,\n  largeDesktopLayout,\n  defaultToggleableVisible = false,\n  ...props\n}: LayoutProps): ReactElement {\n  return (\n    <LayoutProvider\n      baseId={id}\n      fixedAppBar={\n        props.appBarProps?.fixed ?? typeof props.appBar === \"undefined\"\n      }\n      phoneLayout={phoneLayout}\n      tabletLayout={tabletLayout}\n      landscapeTabletLayout={landscapeTabletLayout}\n      desktopLayout={desktopLayout}\n      largeDesktopLayout={largeDesktopLayout}\n      defaultToggleableVisible={defaultToggleableVisible}\n    >\n      <LayoutChildren id={id} {...props} />\n    </LayoutProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}