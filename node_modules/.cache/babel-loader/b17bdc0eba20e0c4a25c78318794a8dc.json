{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { StickyTableProvider } from \"./sticky\";\nvar block = bem(\"rmd-thead\");\n/**\n * Creates a `<thead>` element with some basic styles. This component will also\n * update the table configuration so that all the `TableCell` children will\n * automatically become `<th>` elements instead of the normal `<td>` as well as\n * disabling the hover effect and line wrapping. The hover effect and\n * line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\nexport var TableHeader = forwardRef(function TableHeader(_a, ref) {\n  var className = _a.className,\n    _b = _a.hoverable,\n    hoverable = _b === void 0 ? false : _b,\n    propLineWrap = _a.lineWrap,\n    children = _a.children,\n    _c = _a.sticky,\n    sticky = _c === void 0 ? false : _c,\n    props = __rest(_a, [\"className\", \"hoverable\", \"lineWrap\", \"children\", \"sticky\"]);\n  // update the table configuration with the custom overrides for the `<thead>`\n  var _d = useTableConfig({\n      lineWrap: propLineWrap,\n      disableHover: !hoverable\n    }),\n    hAlign = _d.hAlign,\n    vAlign = _d.vAlign,\n    lineWrap = _d.lineWrap,\n    disableHover = _d.disableHover,\n    disableBorders = _d.disableBorders;\n  var configuration = useMemo(function () {\n    return {\n      header: true,\n      hAlign: hAlign,\n      vAlign: vAlign,\n      lineWrap: lineWrap,\n      disableBorders: disableBorders,\n      disableHover: disableHover\n    };\n  }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);\n  return _jsx(TableConfigProvider, __assign({\n    value: configuration\n  }, {\n    children: _jsx(\"thead\", __assign({}, props, {\n      ref: ref,\n      className: cn(block(), className)\n    }, {\n      children: _jsx(StickyTableProvider, __assign({\n        value: sticky\n      }, {\n        children: children\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAGrC,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,UAAU;AAC9D,SAASC,mBAAmB,QAAQ,UAAU;AAmB9C,IAAMC,KAAK,GAAGJ,GAAG,CAAC,WAAW,CAAC;AAE9B;;;;;;;;AAQA,OAAO,IAAMK,WAAW,GAAGR,UAAU,CAGnC,SAASQ,WAAW,CACpBC,EAOC,EACDC,GAAG;EAPD,aAAS;IACTC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACPC,YAAY;IACtBC,QAAQ;IACRC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACXC,KAAK,cANV,4DAOC,CADS;EAIV;EACM,SACJZ,cAAc,CAAC;MACba,QAAQ,EAAEL,YAAY;MACtBM,YAAY,EAAE,CAACP;KAChB,CAAC;IAJIQ,MAAM;IAAEC,MAAM;IAAEH,QAAQ;IAAEC,YAAY;IAAEG,cAAc,oBAI1D;EAEJ,IAAMC,aAAa,GAAGtB,OAAO,CAC3B;IAAM,OAAC;MACLuB,MAAM,EAAE,IAAI;MACZJ,MAAM;MACNC,MAAM;MACNH,QAAQ;MACRI,cAAc;MACdH,YAAY;KACb;EAPK,CAOJ,EACF,CAACC,MAAM,EAAEC,MAAM,EAAEH,QAAQ,EAAEI,cAAc,EAAEH,YAAY,CAAC,CACzD;EAED,OACEM,KAACrB,mBAAmB;IAACsB,KAAK,EAAEH;EAAa;IAAAT,UACvCW,2BAAWR,KAAK;MAAEP,GAAG,EAAEA,GAAG;MAAEiB,SAAS,EAAEzB,EAAE,CAACK,KAAK,EAAE,EAAEoB,SAAS;IAAC;MAAAb,UAC3DW,KAACnB,mBAAmB;QAACoB,KAAK,EAAEV;MAAM;QAAAF,UAAGA;MAAQ;IAAuB;EAC9D,GACY;AAE1B,CAAC,CAAC","names":["forwardRef","useMemo","cn","bem","TableConfigProvider","useTableConfig","StickyTableProvider","block","TableHeader","_a","ref","_b","hoverable","propLineWrap","children","_c","sticky","props","lineWrap","disableHover","hAlign","vAlign","disableBorders","configuration","header","_jsx","value","className"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/table/src/TableHeader.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TableCellConfig } from \"./config\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { StickyTableProvider } from \"./sticky\";\n\nexport interface TableHeaderProps\n  extends HTMLAttributes<HTMLTableSectionElement>,\n    Pick<TableCellConfig, \"lineWrap\"> {\n  /**\n   * This is a rename of the `disableHover` of the `TableConfig` since table\n   * headers are not hoverable by default. This prop can be enabled to add the\n   * row hover color within table headers, but it is not really recommended.\n   */\n  hoverable?: boolean;\n\n  /**\n   * Boolean if the header should be rendered as a sticky header that will cover\n   * the table contents as the page or `TableContainer` is scrolled.\n   */\n  sticky?: boolean;\n}\n\nconst block = bem(\"rmd-thead\");\n\n/**\n * Creates a `<thead>` element with some basic styles. This component will also\n * update the table configuration so that all the `TableCell` children will\n * automatically become `<th>` elements instead of the normal `<td>` as well as\n * disabling the hover effect and line wrapping. The hover effect and\n * line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\nexport const TableHeader = forwardRef<\n  HTMLTableSectionElement,\n  TableHeaderProps\n>(function TableHeader(\n  {\n    className,\n    hoverable = false,\n    lineWrap: propLineWrap,\n    children,\n    sticky = false,\n    ...props\n  },\n  ref\n) {\n  // update the table configuration with the custom overrides for the `<thead>`\n  const { hAlign, vAlign, lineWrap, disableHover, disableBorders } =\n    useTableConfig({\n      lineWrap: propLineWrap,\n      disableHover: !hoverable,\n    });\n\n  const configuration = useMemo(\n    () => ({\n      header: true,\n      hAlign,\n      vAlign,\n      lineWrap,\n      disableBorders,\n      disableHover,\n    }),\n    [hAlign, vAlign, lineWrap, disableBorders, disableHover]\n  );\n\n  return (\n    <TableConfigProvider value={configuration}>\n      <thead {...props} ref={ref} className={cn(block(), className)}>\n        <StickyTableProvider value={sticky}>{children}</StickyTableProvider>\n      </thead>\n    </TableConfigProvider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}