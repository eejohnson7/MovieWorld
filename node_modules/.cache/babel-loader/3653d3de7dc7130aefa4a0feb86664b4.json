{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-table-cell\");\n/**\n * This is mostly an internal component since it is automatically used within\n * the `TableCell` component but this will conditionally wrap the `children`\n * within an `UnstyledButton` to make a clickable cell. This is really to help\n * with sort behavior within headers.\n */\nexport var TableCellContent = forwardRef(function TableCellContent(_a, ref) {\n  var _b;\n  var id = _a.id,\n    propIcon = _a.icon,\n    style = _a.style,\n    className = _a.className,\n    sortOrder = _a.sortOrder,\n    children = _a.children,\n    propRotated = _a.rotated,\n    _c = _a.hAlign,\n    hAlign = _c === void 0 ? \"left\" : _c,\n    props = __rest(_a, [\"id\", \"icon\", \"style\", \"className\", \"sortOrder\", \"children\", \"rotated\", \"hAlign\"]);\n  if (!sortOrder || propIcon === null) {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n  var icon = null;\n  if (sortOrder !== \"none\") {\n    var rotated = propRotated !== null && propRotated !== void 0 ? propRotated : sortOrder === \"descending\";\n    icon = _jsx(IconRotator, __assign({\n      rotated: rotated\n    }, {\n      children: propIcon\n    }));\n  }\n  return _jsx(UnstyledButton, __assign({\n    id: id,\n    ref: ref,\n    style: style,\n    className: cn(block(\"child\", (_b = {}, _b[hAlign] = hAlign !== \"left\", _b)), className)\n  }, {\n    children: _jsx(TextIconSpacing, __assign({}, props, {\n      icon: icon\n    }, {\n      children: children\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,WAAW,EAAEC,eAAe,QAAQ,gBAAgB;AAC7D,SAASC,GAAG,QAAQ,iBAAiB;AAmCrC,IAAMC,KAAK,GAAGD,GAAG,CAAC,gBAAgB,CAAC;AAEnC;;;;;;AAMA,OAAO,IAAME,gBAAgB,GAAGP,UAAU,CAGxC,SAASO,gBAAgB,CACzBC,EAUC,EACDC,GAAG;;EAVD,MAAE;IACIC,QAAQ;IACdC,KAAK;IACLC,SAAS;IACTC,SAAS;IACTC,QAAQ;IACCC,WAAW;IACpBC,cAAe;IAAfC,MAAM,mBAAG,MAAM;IACZC,KAAK,cATV,kFAUC,CADS;EAIV,IAAI,CAACL,SAAS,IAAIH,QAAQ,KAAK,IAAI,EAAE;IACnC,OAAOS;MAAAL,UAAGA;IAAQ,EAAI;;EAGxB,IAAIM,IAAI,GAAc,IAAI;EAC1B,IAAIP,SAAS,KAAK,MAAM,EAAE;IACxB,IAAMQ,OAAO,GAAGN,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIF,SAAS,KAAK,YAAY;IAEzDO,IAAI,GAAGD,KAAChB,WAAW;MAACkB,OAAO,EAAEA;IAAO;MAAAP,UAAGJ;IAAQ,GAAe;;EAGhE,OACES,KAACjB,cAAc;IACboB,EAAE,EAAEA,EAAE;IACNb,GAAG,EAAEA,GAAG;IACRE,KAAK,EAAEA,KAAK;IACZC,SAAS,EAAEX,EAAE,CACXK,KAAK,CAAC,OAAO,YACXiB,GAACN,MAAM,IAAGA,MAAM,KAAK,MAAM,MAC3B,EACFL,SAAS;EACV;IAAAE,UAEDK,KAACf,eAAe,eAAKc,KAAK;MAAEE,IAAI,EAAEA;IAAI;MAAAN,UACnCA;IAAQ;EACO,GACH;AAErB,CAAC,CAAC","names":["forwardRef","cn","UnstyledButton","IconRotator","TextIconSpacing","bem","block","TableCellContent","_a","ref","propIcon","style","className","sortOrder","children","propRotated","_c","hAlign","props","_jsx","icon","rotated","id","_b"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/table/src/TableCellContent.tsx"],"sourcesContent":["import type { CSSProperties, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport type { TextIconSpacingProps } from \"@react-md/icon\";\nimport { IconRotator, TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TableCellHorizontalAlignment } from \"./config\";\n\nexport type SortOrder = \"ascending\" | \"descending\" | \"none\" | \"other\";\n\nexport interface TableCellContentProps extends TextIconSpacingProps {\n  /**\n   * An optional id for the sort order button.\n   */\n  id?: string;\n\n  /**\n   * An optional style for the sort order button.\n   */\n  style?: CSSProperties;\n\n  /**\n   * The current sort order for this cell. Setting this to `null` will prevent\n   * the button from being rendered.\n   */\n  sortOrder?: SortOrder;\n\n  /**\n   * Boolean if the icon should be rotated.\n   */\n  rotated?: boolean;\n\n  /**\n   * @remarks \\@since 4.0.3\n   * @see {@link TableCellHorizontalAlignment}\n   */\n  hAlign?: TableCellHorizontalAlignment;\n}\n\nconst block = bem(\"rmd-table-cell\");\n\n/**\n * This is mostly an internal component since it is automatically used within\n * the `TableCell` component but this will conditionally wrap the `children`\n * within an `UnstyledButton` to make a clickable cell. This is really to help\n * with sort behavior within headers.\n */\nexport const TableCellContent = forwardRef<\n  HTMLButtonElement,\n  TableCellContentProps\n>(function TableCellContent(\n  {\n    id,\n    icon: propIcon,\n    style,\n    className,\n    sortOrder,\n    children,\n    rotated: propRotated,\n    hAlign = \"left\",\n    ...props\n  },\n  ref\n) {\n  if (!sortOrder || propIcon === null) {\n    return <>{children}</>;\n  }\n\n  let icon: ReactNode = null;\n  if (sortOrder !== \"none\") {\n    const rotated = propRotated ?? sortOrder === \"descending\";\n\n    icon = <IconRotator rotated={rotated}>{propIcon}</IconRotator>;\n  }\n\n  return (\n    <UnstyledButton\n      id={id}\n      ref={ref}\n      style={style}\n      className={cn(\n        block(\"child\", {\n          [hAlign]: hAlign !== \"left\",\n        }),\n        className\n      )}\n    >\n      <TextIconSpacing {...props} icon={icon}>\n        {children}\n      </TextIconSpacing>\n    </UnstyledButton>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}