{"ast":null,"code":"import { useEffect } from \"react\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport { getInstance } from \"./getInstance\";\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programmatic - Boolean if programmatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\nexport function useFocusOnMount(refOrInstance, defaultFocus, preventScroll, programmatic, disabled) {\n  if (preventScroll === void 0) {\n    preventScroll = false;\n  }\n  if (programmatic === void 0) {\n    programmatic = false;\n  }\n  if (disabled === void 0) {\n    disabled = false;\n  }\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n    var frame = window.requestAnimationFrame(function () {\n      var instance = getInstance(refOrInstance);\n      if (!instance) {\n        return;\n      }\n      instance.focus({\n        preventScroll: preventScroll\n      });\n      focusElementWithin(instance, defaultFocus, programmatic, preventScroll);\n    });\n    return function () {\n      window.cancelAnimationFrame(frame);\n    };\n  }, [defaultFocus, disabled, refOrInstance, programmatic, preventScroll]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAGjC,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUC,eAAe,CAC7BC,aAA4B,EAC5BC,YAAmB,EACnBC,aAAqB,EACrBC,YAAoB,EACpBC,QAAgB;EAFhB;IAAAF,qBAAqB;EAAA;EACrB;IAAAC,oBAAoB;EAAA;EACpB;IAAAC,gBAAgB;EAAA;EAEhBR,SAAS,CAAC;IACR,IAAIQ,QAAQ,EAAE;MACZ;;IAGF,IAAMC,KAAK,GAAGC,MAAM,CAACC,qBAAqB,CAAC;MACzC,IAAMC,QAAQ,GAAGV,WAAW,CAACE,aAAa,CAAC;MAC3C,IAAI,CAACQ,QAAQ,EAAE;QACb;;MAGFA,QAAQ,CAACC,KAAK,CAAC;QAAEP,aAAa;MAAA,CAAE,CAAC;MACjCL,kBAAkB,CAACW,QAAQ,EAAEP,YAAY,EAAEE,YAAY,EAAED,aAAa,CAAC;IACzE,CAAC,CAAC;IAEF,OAAO;MACLI,MAAM,CAACI,oBAAoB,CAACL,KAAK,CAAC;IACpC,CAAC;EACH,CAAC,EAAE,CAACJ,YAAY,EAAEG,QAAQ,EAAEJ,aAAa,EAAEG,YAAY,EAAED,aAAa,CAAC,CAAC;AAC1E","names":["useEffect","focusElementWithin","getInstance","useFocusOnMount","refOrInstance","defaultFocus","preventScroll","programmatic","disabled","frame","window","requestAnimationFrame","instance","focus","cancelAnimationFrame"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/wia-aria/useFocusOnMount.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport type { Focus } from \"./focusElementWithin\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport type { RefOrInstance } from \"./getInstance\";\nimport { getInstance } from \"./getInstance\";\n\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programmatic - Boolean if programmatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\nexport function useFocusOnMount(\n  refOrInstance: RefOrInstance,\n  defaultFocus: Focus,\n  preventScroll = false,\n  programmatic = false,\n  disabled = false\n): void {\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    const frame = window.requestAnimationFrame(() => {\n      const instance = getInstance(refOrInstance);\n      if (!instance) {\n        return;\n      }\n\n      instance.focus({ preventScroll });\n      focusElementWithin(instance, defaultFocus, programmatic, preventScroll);\n    });\n\n    return () => {\n      window.cancelAnimationFrame(frame);\n    };\n  }, [defaultFocus, disabled, refOrInstance, programmatic, preventScroll]);\n}\n"]},"metadata":{},"sourceType":"module"}