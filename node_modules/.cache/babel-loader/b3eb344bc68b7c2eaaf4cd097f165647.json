{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCSSTransition } from \"./useCSSTransition\";\n/**\n * The default cross fade transition classes to use.\n *\n * @remarks \\@since 2.0.0\n */\nexport var CROSS_FADE_CLASSNAMES = {\n  appear: \"rmd-cross-fade\",\n  appearActive: \"rmd-cross-fade--active\",\n  enter: \"rmd-cross-fade\",\n  enterActive: \"rmd-cross-fade--active\"\n};\n/**\n * The default cross fade transition timeout.\n *\n * @remarks \\@since 2.0.0\n */\nexport var CROSS_FADE_TIMEOUT = {\n  appear: 300,\n  enter: 300,\n  exit: 0\n};\n/**\n * This hook is used to create a \"cross fade\" transition -- a transition that\n * gradually increases the opacity and transforms the element vertically a short\n * distance. This is generally used for full page transitions when a route\n * changes.\n *\n * @example\n * New Page Transition with `@react-md/layout`\n * ```tsx\n * import { ReactElement, ReactNode, useLayoutEffect } from \"react\";\n * import { useLocation } from \"react-router-dom\":\n * import { Layout, useLayoutNavigation } from \"@react-md/layout\";\n * import { useCrossFadeTransition } from \"@react-md/transition\";\n *\n * import { navItems } from \"./navItems\";\n *\n * interface ExampleProps {\n *   children: ReactNode;\n * }\n *\n * function Example({ children }: ExampleProps): ReactElement {\n *   const { pathname } = useLocation();\n *   const { elementProps, transitionTo } = useCrossFadeTransition();\n *\n *   const prevPathname = useRef(pathname);\n *   useLayoutEffect(() => {\n *     if (prevPathname.current === pathname) {\n *       return\n *     }\n *\n *     prevPathname.current = pathname;\n *     transitionTo('enter');\n *   }, [pathname, transitionTo])\n *\n *   return (\n *     <Layout\n *       {...useLayoutNavigation(navItems, pathname)}\n *       appBarTitle=\"My App\"\n *       mainProps={elementProps}\n *     >\n *       {children}\n *     </Layout>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCrossFadeTransition(_a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n  var _b = _a.transitionIn,\n    transitionIn = _b === void 0 ? true : _b,\n    _c = _a.timeout,\n    timeout = _c === void 0 ? CROSS_FADE_TIMEOUT : _c,\n    _d = _a.classNames,\n    classNames = _d === void 0 ? CROSS_FADE_CLASSNAMES : _d,\n    options = __rest(_a, [\"transitionIn\", \"timeout\", \"classNames\"]);\n  return useCSSTransition(__assign(__assign({}, options), {\n    timeout: timeout,\n    classNames: classNames,\n    transitionIn: transitionIn\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAQA,SAASA,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;AAKA,OAAO,IAAMC,qBAAqB,GAA4C;EAC5EC,MAAM,EAAE,gBAAgB;EACxBC,YAAY,EAAE,wBAAwB;EACtCC,KAAK,EAAE,gBAAgB;EACvBC,WAAW,EAAE;CACd;AAED;;;;;AAKA,OAAO,IAAMC,kBAAkB,GAAsC;EACnEJ,MAAM,EAAE,GAAG;EACXE,KAAK,EAAE,GAAG;EACVG,IAAI,EAAE;CACP;AA8BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,OAAM,SAAUC,sBAAsB,CAAwBC,EAKrB;EALqB;IAAAA,OAKrB;EAAA;EAJvC,wBAAmB;IAAnBC,YAAY,mBAAG,IAAI;IACnBC,eAA4B;IAA5BC,OAAO,mBAAGN,kBAAkB;IAC5BO,kBAAkC;IAAlCC,UAAU,mBAAGb,qBAAqB;IAC/Bc,OAAO,cAJkD,yCAK7D,CADW;EAEV,OAAOf,gBAAgB,uBAClBe,OAAO;IACVH,OAAO;IACPE,UAAU;IACVJ,YAAY;EAAA,GACZ;AACJ","names":["useCSSTransition","CROSS_FADE_CLASSNAMES","appear","appearActive","enter","enterActive","CROSS_FADE_TIMEOUT","exit","useCrossFadeTransition","_a","transitionIn","_c","timeout","_d","classNames","options"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/useCrossFadeTransition.ts"],"sourcesContent":["import type {\n  CSSTransitionClassNames,\n  CSSTransitionClassNamesObject,\n  CSSTransitionHookReturnValue,\n  PreconfiguredCSSTransitionInDefaultedOptions,\n  TransitionTimeout,\n  TransitionTimeoutObject,\n} from \"./types\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n\n/**\n * The default cross fade transition classes to use.\n *\n * @remarks \\@since 2.0.0\n */\nexport const CROSS_FADE_CLASSNAMES: Readonly<CSSTransitionClassNamesObject> = {\n  appear: \"rmd-cross-fade\",\n  appearActive: \"rmd-cross-fade--active\",\n  enter: \"rmd-cross-fade\",\n  enterActive: \"rmd-cross-fade--active\",\n};\n\n/**\n * The default cross fade transition timeout.\n *\n * @remarks \\@since 2.0.0\n */\nexport const CROSS_FADE_TIMEOUT: Readonly<TransitionTimeoutObject> = {\n  appear: 300,\n  enter: 300,\n  exit: 0,\n};\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CrossFadeTransitionHookOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionInDefaultedOptions<E> {\n  /**\n   * @see {@link TransitionTimeout}\n   * @see {@link CROSS_FADE_TIMEOUT}\n   * @defaultValue `CROSS_FADE_TIMEOUT`\n   */\n  timeout?: TransitionTimeout;\n\n  /**\n   * @see {@link CSSTransitionClassNames}\n   * @see {@link CROSS_FADE_CLASSNAMES}\n   * @defaultValue `CROSS_FADE_CLASSNAMES`\n   */\n  classNames?: CSSTransitionClassNames;\n\n  /**\n   * @see {@link PreconfiguredCSSTransitionInDefaultedOptions.transitionIn}\n   * @defaultValue `true`\n   */\n  transitionIn?: boolean;\n}\n\n/**\n * This hook is used to create a \"cross fade\" transition -- a transition that\n * gradually increases the opacity and transforms the element vertically a short\n * distance. This is generally used for full page transitions when a route\n * changes.\n *\n * @example\n * New Page Transition with `@react-md/layout`\n * ```tsx\n * import { ReactElement, ReactNode, useLayoutEffect } from \"react\";\n * import { useLocation } from \"react-router-dom\":\n * import { Layout, useLayoutNavigation } from \"@react-md/layout\";\n * import { useCrossFadeTransition } from \"@react-md/transition\";\n *\n * import { navItems } from \"./navItems\";\n *\n * interface ExampleProps {\n *   children: ReactNode;\n * }\n *\n * function Example({ children }: ExampleProps): ReactElement {\n *   const { pathname } = useLocation();\n *   const { elementProps, transitionTo } = useCrossFadeTransition();\n *\n *   const prevPathname = useRef(pathname);\n *   useLayoutEffect(() => {\n *     if (prevPathname.current === pathname) {\n *       return\n *     }\n *\n *     prevPathname.current = pathname;\n *     transitionTo('enter');\n *   }, [pathname, transitionTo])\n *\n *   return (\n *     <Layout\n *       {...useLayoutNavigation(navItems, pathname)}\n *       appBarTitle=\"My App\"\n *       mainProps={elementProps}\n *     >\n *       {children}\n *     </Layout>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCrossFadeTransition<E extends HTMLElement>({\n  transitionIn = true,\n  timeout = CROSS_FADE_TIMEOUT,\n  classNames = CROSS_FADE_CLASSNAMES,\n  ...options\n}: CrossFadeTransitionHookOptions<E> = {}): CSSTransitionHookReturnValue<E> {\n  return useCSSTransition({\n    ...options,\n    timeout,\n    classNames,\n    transitionIn,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}