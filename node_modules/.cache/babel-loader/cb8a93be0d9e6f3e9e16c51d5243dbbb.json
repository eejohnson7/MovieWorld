{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext } from \"react\";\nimport { useInteractionMode } from \"./useInteractionMode\";\n/**\n * @internal\n */\nvar modeContext = createContext(\"mouse\");\n/**\n * @internal\n */\nvar parentContext = createContext(false);\n/**\n * @internal\n */\nvar UserInteractionModeProvider = modeContext.Provider;\n/**\n * @internal\n */\nvar ParentProvider = parentContext.Provider;\n/**\n * Returns the current user interaction mode.\n *\n * @returns {@link UserInteractionMode}\n */\nexport function useUserInteractionMode() {\n  return useContext(modeContext);\n}\n/**\n * Example:\n *\n * ```ts\n * const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n * // do stuff if keyboard only\n * ```\n *\n * @param mode - The {@link UserInteractionMode} to check against.\n * @returns `true` if the current user interaction mode matches the provided\n * mode.\n */\nexport function useIsUserInteractionMode(mode) {\n  return useUserInteractionMode() === mode;\n}\n/**\n * This component is used to determine how the user is current interacting with\n * your app as well as modifying the `document.body`'s `className` with the\n * current mode. This is what allows the `rmd-utils-phone-only`,\n * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.\n *\n * @remarks \\@since 2.6.0 Renamed from `InteractionModeListener`\n * @throws When this component has been mounted multiple times in your app.\n */\nexport function UserInteractionModeListener(_a) {\n  var children = _a.children;\n  var mode = useInteractionMode();\n  if (useContext(parentContext)) {\n    throw new Error(\"Mounted multiple `UserInteractionModeListener` components.\");\n  }\n  return _jsx(UserInteractionModeProvider, __assign({\n    value: mode\n  }, {\n    children: _jsx(ParentProvider, __assign({\n      value: true\n    }, {\n      children: children\n    }))\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAGjD,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD;;;AAGA,IAAMC,WAAW,GAAGH,aAAa,CAAsB,OAAO,CAAC;AAE/D;;;AAGA,IAAMI,aAAa,GAAGJ,aAAa,CAAC,KAAK,CAAC;AAE1C;;;AAGQ,IAAUK,2BAA2B,GAAKF,WAAW,SAAhB;AAE7C;;;AAGQ,IAAUG,cAAc,GAAKF,aAAa,SAAlB;AAEhC;;;;;AAKA,OAAM,SAAUG,sBAAsB;EACpC,OAAON,UAAU,CAACE,WAAW,CAAC;AAChC;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUK,wBAAwB,CAACC,IAAyB;EAChE,OAAOF,sBAAsB,EAAE,KAAKE,IAAI;AAC1C;AAUA;;;;;;;;;AASA,OAAM,SAAUC,2BAA2B,CAACC,EAET;MADjCC,QAAQ;EAER,IAAMH,IAAI,GAAGP,kBAAkB,EAAE;EACjC,IAAID,UAAU,CAACG,aAAa,CAAC,EAAE;IAC7B,MAAM,IAAIS,KAAK,CACb,4DAA4D,CAC7D;;EAGH,OACEC,KAACT,2BAA2B;IAACU,KAAK,EAAEN;EAAI;IAAAG,UACtCE,KAACR,cAAc;MAACS,KAAK;IAAA;MAAAH,UAAEA;IAAQ;EAAkB,GACrB;AAElC","names":["createContext","useContext","useInteractionMode","modeContext","parentContext","UserInteractionModeProvider","ParentProvider","useUserInteractionMode","useIsUserInteractionMode","mode","UserInteractionModeListener","_a","children","Error","_jsx","value"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/mode/UserInteractionModeListener.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { createContext, useContext } from \"react\";\n\nimport type { UserInteractionMode } from \"./types\";\nimport { useInteractionMode } from \"./useInteractionMode\";\n\n/**\n * @internal\n */\nconst modeContext = createContext<UserInteractionMode>(\"mouse\");\n\n/**\n * @internal\n */\nconst parentContext = createContext(false);\n\n/**\n * @internal\n */\nconst { Provider: UserInteractionModeProvider } = modeContext;\n\n/**\n * @internal\n */\nconst { Provider: ParentProvider } = parentContext;\n\n/**\n * Returns the current user interaction mode.\n *\n * @returns {@link UserInteractionMode}\n */\nexport function useUserInteractionMode(): UserInteractionMode {\n  return useContext(modeContext);\n}\n\n/**\n * Example:\n *\n * ```ts\n * const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n * // do stuff if keyboard only\n * ```\n *\n * @param mode - The {@link UserInteractionMode} to check against.\n * @returns `true` if the current user interaction mode matches the provided\n * mode.\n */\nexport function useIsUserInteractionMode(mode: UserInteractionMode): boolean {\n  return useUserInteractionMode() === mode;\n}\n\nexport interface UserInteractionModeListenerProps {\n  /**\n   * The `children` are required since this component basically does nothing\n   * other than providing a `className` to the `document.body` otherwise.\n   */\n  children: ReactNode;\n}\n\n/**\n * This component is used to determine how the user is current interacting with\n * your app as well as modifying the `document.body`'s `className` with the\n * current mode. This is what allows the `rmd-utils-phone-only`,\n * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.\n *\n * @remarks \\@since 2.6.0 Renamed from `InteractionModeListener`\n * @throws When this component has been mounted multiple times in your app.\n */\nexport function UserInteractionModeListener({\n  children,\n}: UserInteractionModeListenerProps): ReactElement {\n  const mode = useInteractionMode();\n  if (useContext(parentContext)) {\n    throw new Error(\n      \"Mounted multiple `UserInteractionModeListener` components.\"\n    );\n  }\n\n  return (\n    <UserInteractionModeProvider value={mode}>\n      <ParentProvider value>{children}</ParentProvider>\n    </UserInteractionModeProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}