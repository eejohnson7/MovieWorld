{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\n/**\n * The `HighlightedResult` component can be used to bold specific letters\n * within the `children` if the `children` is a string.\n */\nexport function HighlightedResult(_a) {\n  var propId = _a.id,\n    style = _a.style,\n    className = _a.className,\n    _b = _a.enabled,\n    enabled = _b === void 0 ? true : _b,\n    value = _a.value,\n    children = _a.children,\n    _c = _a.repeatable,\n    repeatable = _c === void 0 ? false : _c,\n    _d = _a.index,\n    index = _d === void 0 ? 0 : _d;\n  if (!enabled || !value || typeof children !== \"string\") {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n  var i = children.toLowerCase().indexOf(value.toLowerCase());\n  if (i === -1) {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n  var end = i + value.length;\n  var id = propId;\n  if (id && index > 0) {\n    id = \"\".concat(id, \"-\").concat(index);\n  }\n  return _jsxs(_Fragment, {\n    children: [i > 0 && children.substring(0, i), _jsx(\"span\", __assign({\n      id: id,\n      style: style,\n      className: cn(\"rmd-typography--bold\", className)\n    }, {\n      children: children.substring(i, end)\n    })), end < children.length && _jsx(HighlightedResult, __assign({\n      style: style,\n      className: className,\n      value: value,\n      enabled: enabled && repeatable,\n      repeatable: repeatable,\n      index: index + 1\n    }, {\n      children: children.substring(end)\n    }))]\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;AACA,OAAOA,EAAE,MAAM,YAAY;AAiD3B;;;;AAIA,OAAM,SAAUC,iBAAiB,CAACC,EAST;MARnBC,MAAM;IACVC,KAAK;IACLC,SAAS;IACTC,eAAc;IAAdC,OAAO,mBAAG,IAAI;IACdC,KAAK;IACLC,QAAQ;IACRC,kBAAkB;IAAlBC,UAAU,mBAAG,KAAK;IAClBC,aAAS;IAATC,KAAK,mBAAG,CAAC;EAET,IAAI,CAACN,OAAO,IAAI,CAACC,KAAK,IAAI,OAAOC,QAAQ,KAAK,QAAQ,EAAE;IACtD,OAAOK;MAAAL,UAAGA;IAAQ,EAAI;;EAGxB,IAAMM,CAAC,GAAGN,QAAQ,CAACO,WAAW,EAAE,CAACC,OAAO,CAACT,KAAK,CAACQ,WAAW,EAAE,CAAC;EAC7D,IAAID,CAAC,KAAK,CAAC,CAAC,EAAE;IACZ,OAAOD;MAAAL,UAAGA;IAAQ,EAAI;;EAGxB,IAAMS,GAAG,GAAGH,CAAC,GAAGP,KAAK,CAACW,MAAM;EAC5B,IAAIC,EAAE,GAAGjB,MAAM;EACf,IAAIiB,EAAE,IAAIP,KAAK,GAAG,CAAC,EAAE;IACnBO,EAAE,GAAG,UAAGA,EAAE,cAAIP,KAAK,CAAE;;EAGvB,OACEQ;IAAAZ,WACGM,CAAC,GAAG,CAAC,IAAIN,QAAQ,CAACa,SAAS,CAAC,CAAC,EAAEP,CAAC,CAAC,EAClCD;MACEM,EAAE,EAAEA,EAAE;MACNhB,KAAK,EAAEA,KAAK;MACZC,SAAS,EAAEL,EAAE,CAAC,sBAAsB,EAAEK,SAAS;IAAC;MAAAI,UAE/CA,QAAQ,CAACa,SAAS,CAACP,CAAC,EAAEG,GAAG;IAAC,GACtB,EACNA,GAAG,GAAGT,QAAQ,CAACU,MAAM,IACpBL,KAACb,iBAAiB;MAChBG,KAAK,EAAEA,KAAK;MACZC,SAAS,EAAEA,SAAS;MACpBG,KAAK,EAAEA,KAAK;MACZD,OAAO,EAAEA,OAAO,IAAII,UAAU;MAC9BA,UAAU,EAAEA,UAAU;MACtBE,KAAK,EAAEA,KAAK,GAAG;IAAC;MAAAJ,UAEfA,QAAQ,CAACa,SAAS,CAACJ,GAAG;IAAC,GAE3B;EAAA,EACA;AAEP","names":["cn","HighlightedResult","_a","propId","style","className","_b","enabled","value","children","_c","repeatable","_d","index","_jsx","i","toLowerCase","indexOf","end","length","id","_jsxs","substring"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/autocomplete/src/HighlightedResult.tsx"],"sourcesContent":["import type { CSSProperties, ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\n\nexport interface HighlightedResultProps {\n  /**\n   * An optional id to use for the `<span>`. This will be suffixed by the\n   * current `index` if it was provided\n   */\n  id?: string;\n\n  /**\n   * An optional style to provide to the `<span>`.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className to provide to the `<span>`.\n   */\n  className?: string;\n\n  /**\n   * The match index which is automatically added when the `repeatable` prop is\n   * used for nested matches.\n   */\n  index?: number;\n\n  /**\n   * The current value to match against.\n   */\n  value: string;\n\n  /**\n   * Boolean if the highlighting functionality should be enabled. Setting this\n   * to false will just return the `children` instead.\n   */\n  enabled?: boolean;\n\n  /**\n   * Boolean if the highlighting can be repeated multiple times within the\n   * children string.\n   */\n  repeatable?: boolean;\n\n  /**\n   * The children to highlight. If this is not a string, the highlight will not\n   * work.\n   */\n  children: ReactNode;\n}\n\n/**\n * The `HighlightedResult` component can be used to bold specific letters\n * within the `children` if the `children` is a string.\n */\nexport function HighlightedResult({\n  id: propId,\n  style,\n  className,\n  enabled = true,\n  value,\n  children,\n  repeatable = false,\n  index = 0,\n}: HighlightedResultProps): ReactElement {\n  if (!enabled || !value || typeof children !== \"string\") {\n    return <>{children}</>;\n  }\n\n  const i = children.toLowerCase().indexOf(value.toLowerCase());\n  if (i === -1) {\n    return <>{children}</>;\n  }\n\n  const end = i + value.length;\n  let id = propId;\n  if (id && index > 0) {\n    id = `${id}-${index}`;\n  }\n\n  return (\n    <>\n      {i > 0 && children.substring(0, i)}\n      <span\n        id={id}\n        style={style}\n        className={cn(\"rmd-typography--bold\", className)}\n      >\n        {children.substring(i, end)}\n      </span>\n      {end < children.length && (\n        <HighlightedResult\n          style={style}\n          className={className}\n          value={value}\n          enabled={enabled && repeatable}\n          repeatable={repeatable}\n          index={index + 1}\n        >\n          {children.substring(end)}\n        </HighlightedResult>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}