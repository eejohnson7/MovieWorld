{"ast":null,"code":"function applyCoords(coord) {\n  return typeof coord === \"number\" ? \"\".concat(coord, \"px\") : \"\";\n}\n/**\n * This util is used to get the \"true\" `element.getBoundingClientRect()` that\n * ensures that transitions using transforms don't mess up the sizing so that\n * position calculations are easier to do.\n *\n * @param element - The element to get a rect for.\n * @param coords - An optional object of coordinates to apply to the positioning\n * styles. This should be used when the coords might resize the element since it\n * needs to try to fit within the viewport.\n * @returns either a DOMRect for the element\n * @internal\n */\nexport function getElementRect(element, coords) {\n  if (coords === void 0) {\n    coords = {};\n  }\n  var cloned = element.cloneNode(true);\n  // remove the id so there won't be two elements with the same id on the page\n  cloned.removeAttribute(\"id\");\n  // remove the role just in case the role would alert screen readers once added\n  // to the dom\n  cloned.removeAttribute(\"role\");\n  // ensure the cloned node won't shift the page or be visible\n  cloned.style.position = \"fixed\";\n  cloned.style.visibility = \"hidden\";\n  // reset positioning to get a \"pure\" calculation. otherwise this will mess up\n  // the height and width if the element is able to line wrap.\n  cloned.style.left = applyCoords(coords.left);\n  cloned.style.top = applyCoords(coords.top);\n  cloned.style.right = applyCoords(coords.right);\n  cloned.style.bottom = applyCoords(coords.bottom);\n  // reset transforms so that custom animations don't mess with the sizing\n  cloned.style.webkitTransform = \"none\";\n  cloned.style.transform = \"none\";\n  var parent = element.parentElement || document.body;\n  parent.appendChild(cloned);\n  var rect = cloned.getBoundingClientRect();\n  parent.removeChild(cloned);\n  return rect;\n}","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,CAACC,KAAyB;EAC5C,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAAG,UAAGA,KAAK,OAAI,GAAG,EAAE;AACtD;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUC,cAAc,CAC5BC,OAAoB,EACpBC,MAAmB;EAAnB;IAAAA,WAAmB;EAAA;EAEnB,IAAMC,MAAM,GAAGF,OAAO,CAACG,SAAS,CAAC,IAAI,CAAgB;EACrD;EACAD,MAAM,CAACE,eAAe,CAAC,IAAI,CAAC;EAE5B;EACA;EACAF,MAAM,CAACE,eAAe,CAAC,MAAM,CAAC;EAE9B;EACAF,MAAM,CAACG,KAAK,CAACC,QAAQ,GAAG,OAAO;EAC/BJ,MAAM,CAACG,KAAK,CAACE,UAAU,GAAG,QAAQ;EAElC;EACA;EACAL,MAAM,CAACG,KAAK,CAACG,IAAI,GAAGX,WAAW,CAACI,MAAM,CAACO,IAAI,CAAC;EAC5CN,MAAM,CAACG,KAAK,CAACI,GAAG,GAAGZ,WAAW,CAACI,MAAM,CAACQ,GAAG,CAAC;EAC1CP,MAAM,CAACG,KAAK,CAACK,KAAK,GAAGb,WAAW,CAACI,MAAM,CAACS,KAAK,CAAC;EAC9CR,MAAM,CAACG,KAAK,CAACM,MAAM,GAAGd,WAAW,CAACI,MAAM,CAACU,MAAM,CAAC;EAEhD;EACAT,MAAM,CAACG,KAAK,CAACO,eAAe,GAAG,MAAM;EACrCV,MAAM,CAACG,KAAK,CAACQ,SAAS,GAAG,MAAM;EAE/B,IAAMC,MAAM,GAAGd,OAAO,CAACe,aAAa,IAAIC,QAAQ,CAACC,IAAI;EACrDH,MAAM,CAACI,WAAW,CAAChB,MAAM,CAAC;EAE1B,IAAMiB,IAAI,GAAGjB,MAAM,CAACkB,qBAAqB,EAAE;EAC3CN,MAAM,CAACO,WAAW,CAACnB,MAAM,CAAC;EAE1B,OAAOiB,IAAI;AACb","names":["applyCoords","coord","getElementRect","element","coords","cloned","cloneNode","removeAttribute","style","position","visibility","left","top","right","bottom","webkitTransform","transform","parent","parentElement","document","body","appendChild","rect","getBoundingClientRect","removeChild"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/positioning/getElementRect.ts"],"sourcesContent":["import type { Coords } from \"./types\";\n\nfunction applyCoords(coord: number | undefined): string {\n  return typeof coord === \"number\" ? `${coord}px` : \"\";\n}\n\n/**\n * This util is used to get the \"true\" `element.getBoundingClientRect()` that\n * ensures that transitions using transforms don't mess up the sizing so that\n * position calculations are easier to do.\n *\n * @param element - The element to get a rect for.\n * @param coords - An optional object of coordinates to apply to the positioning\n * styles. This should be used when the coords might resize the element since it\n * needs to try to fit within the viewport.\n * @returns either a DOMRect for the element\n * @internal\n */\nexport function getElementRect(\n  element: HTMLElement,\n  coords: Coords = {}\n): DOMRect {\n  const cloned = element.cloneNode(true) as HTMLElement;\n  // remove the id so there won't be two elements with the same id on the page\n  cloned.removeAttribute(\"id\");\n\n  // remove the role just in case the role would alert screen readers once added\n  // to the dom\n  cloned.removeAttribute(\"role\");\n\n  // ensure the cloned node won't shift the page or be visible\n  cloned.style.position = \"fixed\";\n  cloned.style.visibility = \"hidden\";\n\n  // reset positioning to get a \"pure\" calculation. otherwise this will mess up\n  // the height and width if the element is able to line wrap.\n  cloned.style.left = applyCoords(coords.left);\n  cloned.style.top = applyCoords(coords.top);\n  cloned.style.right = applyCoords(coords.right);\n  cloned.style.bottom = applyCoords(coords.bottom);\n\n  // reset transforms so that custom animations don't mess with the sizing\n  cloned.style.webkitTransform = \"none\";\n  cloned.style.transform = \"none\";\n\n  const parent = element.parentElement || document.body;\n  parent.appendChild(cloned);\n\n  const rect = cloned.getBoundingClientRect();\n  parent.removeChild(cloned);\n\n  return rect;\n}\n"]},"metadata":{},"sourceType":"module"}