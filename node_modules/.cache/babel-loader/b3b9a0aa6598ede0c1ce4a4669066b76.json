{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar styles = bem(\"rmd-label\");\n/**\n * A simple util that can generate all the \"valid\" styles for a label. This\n * shouldn't really be used, but it's useful if you want the label styles\n * without rendering a `<label>` element.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\nexport var labelStyles = function (_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.error,\n    error = _c === void 0 ? false : _c,\n    _d = _b.active,\n    active = _d === void 0 ? false : _d,\n    _e = _b.disabled,\n    disabled = _e === void 0 ? false : _e;\n  return styles({\n    error: error,\n    active: active,\n    disabled: disabled\n  });\n};\n/**\n * The `Label` component should be used alongside any form elements but is\n * already built in to the majority of the `react-md` components by default.\n */\nexport var Label = forwardRef(function Label(_a, ref) {\n  var htmlFor = _a.htmlFor,\n    className = _a.className,\n    _b = _a.error,\n    error = _b === void 0 ? false : _b,\n    _c = _a.active,\n    active = _c === void 0 ? false : _c,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    _e = _a.component,\n    Component = _e === void 0 ? \"label\" : _e,\n    children = _a.children,\n    props = __rest(_a, [\"htmlFor\", \"className\", \"error\", \"active\", \"disabled\", \"component\", \"children\"]);\n  if (!children) {\n    return null;\n  }\n  return _jsx(Component, __assign({}, props, {\n    ref: ref,\n    className: cn(labelStyles({\n      error: error,\n      active: active,\n      disabled: disabled\n    }), className),\n    htmlFor: Component === \"label\" ? htmlFor : undefined\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AA2CrC,IAAMC,MAAM,GAAGD,GAAG,CAAC,WAAW,CAAC;AAE/B;;;;;;;;AAQA,OAAO,IAAME,WAAW,GAAG,UAACC,EAIT;MAJSC,qBAIX,EAAE;IAHjBC,aAAa;IAAbC,KAAK,mBAAG,KAAK;IACbC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACdC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;EACc,aAAM,CAAC;IAAEJ,KAAK;IAAEE,MAAM;IAAEE,QAAQ;EAAA,CAAE,CAAC;AAAnC,CAAmC;AAEnE;;;;AAIA,OAAO,IAAMC,KAAK,GAAGb,UAAU,CAA+B,SAASa,KAAK,CAC1ER,EASC,EACDS,GAAG;EATD,WAAO;IACPC,SAAS;IACTT,aAAa;IAAbE,KAAK,mBAAG,KAAK;IACbD,cAAc;IAAdG,MAAM,mBAAG,KAAK;IACdD,gBAAgB;IAAhBG,QAAQ,mBAAG,KAAK;IAChBD,iBAA8B;IAAnBK,SAAS,mBAAG,OAAO;IAC9BC,QAAQ;IACLC,KAAK,cARV,gFASC,CADS;EAIV,IAAI,CAACD,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb,OACEE,KAACH,SAAS,eACJE,KAAK;IACTJ,GAAG,EAAEA,GAAG;IACRC,SAAS,EAAEd,EAAE,CAACG,WAAW,CAAC;MAAEI,KAAK;MAAEE,MAAM;MAAEE,QAAQ;IAAA,CAAE,CAAC,EAAEG,SAAS,CAAC;IAClEK,OAAO,EAAEJ,SAAS,KAAK,OAAO,GAAGI,OAAO,GAAGC;EAAS;IAAAJ,UAEnDA;EAAQ,GACC;AAEhB,CAAC,CAAC","names":["forwardRef","cn","bem","styles","labelStyles","_a","_b","_c","error","_d","active","_e","disabled","Label","ref","className","Component","children","props","_jsx","htmlFor","undefined"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/label/Label.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface LabelStates {\n  /**\n   * Boolean if the label should gain the error state.\n   */\n  error?: boolean;\n\n  /**\n   * Boolean if the label should gain the disabled state.\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the label should gain the active state. This should normally be\n   * enabled whenever the `<input>`/`<textarea>` gain focus. This is really more\n   * for text input than anything else, and probably shouldn't be used for\n   * checkbox, radio or switch components.\n   */\n  active?: boolean;\n}\n\nexport interface LabelProps\n  extends HTMLAttributes<HTMLLabelElement>,\n    LabelStates {\n  /**\n   * An id for the `<input>` or `<textarea>` that this label is for. This is\n   * required since all label's **should** point to a valid\n   * `<input>`/`<textarea>`.\n   */\n  htmlFor: string;\n\n  /**\n   * The component to render the label as. This should be the default value of\n   * `\"label\"` 99% of the time, but can also be rendered as a `\"span\"` for the\n   * `Select` implementation where it needs to be rendered in a button.\n   */\n  component?: \"label\" | \"span\";\n}\n\nconst styles = bem(\"rmd-label\");\n\n/**\n * A simple util that can generate all the \"valid\" styles for a label. This\n * shouldn't really be used, but it's useful if you want the label styles\n * without rendering a `<label>` element.\n *\n * @remarks \\@since 2.5.0\n * @internal\n */\nexport const labelStyles = ({\n  error = false,\n  active = false,\n  disabled = false,\n}: LabelStates = {}): string => styles({ error, active, disabled });\n\n/**\n * The `Label` component should be used alongside any form elements but is\n * already built in to the majority of the `react-md` components by default.\n */\nexport const Label = forwardRef<HTMLLabelElement, LabelProps>(function Label(\n  {\n    htmlFor,\n    className,\n    error = false,\n    active = false,\n    disabled = false,\n    component: Component = \"label\",\n    children,\n    ...props\n  },\n  ref\n) {\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <Component\n      {...props}\n      ref={ref}\n      className={cn(labelStyles({ error, active, disabled }), className)}\n      htmlFor={Component === \"label\" ? htmlFor : undefined}\n    >\n      {children}\n    </Component>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}