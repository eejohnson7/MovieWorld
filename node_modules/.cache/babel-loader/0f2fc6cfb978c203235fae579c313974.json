{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { List } from \"@react-md/list\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { useScaleTransition } from \"@react-md/transition\";\nimport { bem, DEFAULT_GET_ITEM_VALUE, MovementPresets, omit, scrollIntoView, useActiveDescendantMovement } from \"@react-md/utils\";\nimport { Option } from \"./Option\";\nimport { defaultIsOptionDisabled, getOptionId as DEFAULT_GET_OPTION_ID, getOptionLabel as DEFAULT_GET_OPTION_LABEL, isListboxOptionProps } from \"./utils\";\nvar block = bem(\"rmd-listbox\");\nvar warned;\n/**\n * This component is used to render the list part of a `<select>` element with\n * built-in accessibility and the ability to add custom styles. This should\n * probably not be used much outside of `react-md` itself and the `Select`\n * component, but I'm planning on adding support for an inline listbox at some\n * point.\n */\nexport var Listbox = forwardRef(function Listbox(_a, nodeRef) {\n  var propClassName = _a.className,\n    _b = _a.visible,\n    visible = _b === void 0 ? true : _b,\n    _c = _a.temporary,\n    temporary = _c === void 0 ? false : _c,\n    _d = _a.labelKey,\n    labelKey = _d === void 0 ? \"label\" : _d,\n    _e = _a.valueKey,\n    valueKey = _e === void 0 ? \"value\" : _e,\n    _f = _a.getOptionId,\n    getOptionId = _f === void 0 ? DEFAULT_GET_OPTION_ID : _f,\n    _g = _a.getOptionLabel,\n    getOptionLabel = _g === void 0 ? DEFAULT_GET_OPTION_LABEL : _g,\n    _h = _a.getOptionValue,\n    getOptionValue = _h === void 0 ? DEFAULT_GET_ITEM_VALUE : _h,\n    _j = _a.isOptionDisabled,\n    isOptionDisabled = _j === void 0 ? defaultIsOptionDisabled : _j,\n    _k = _a.disableMovementChange,\n    disableMovementChange = _k === void 0 ? false : _k,\n    onFocus = _a.onFocus,\n    propOnKeyDown = _a.onKeyDown,\n    name = _a.name,\n    options = _a.options,\n    value = _a.value,\n    onChange = _a.onChange,\n    propTabIndex = _a.tabIndex,\n    portal = _a.portal,\n    portalInto = _a.portalInto,\n    portalIntoId = _a.portalIntoId,\n    onRequestClose = _a.onRequestClose,\n    timeout = _a.timeout,\n    readOnly = _a.readOnly,\n    classNames = _a.classNames,\n    onEnter = _a.onEnter,\n    onEntering = _a.onEntering,\n    onEntered = _a.onEntered,\n    onExit = _a.onExit,\n    onExiting = _a.onExiting,\n    onExited = _a.onExited,\n    props = __rest(_a, [\"className\", \"visible\", \"temporary\", \"labelKey\", \"valueKey\", \"getOptionId\", \"getOptionLabel\", \"getOptionValue\", \"isOptionDisabled\", \"disableMovementChange\", \"onFocus\", \"onKeyDown\", \"name\", \"options\", \"value\", \"onChange\", \"tabIndex\", \"portal\", \"portalInto\", \"portalIntoId\", \"onRequestClose\", \"timeout\", \"readOnly\", \"classNames\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\"]);\n  var id = props.id;\n  var tabIndex = propTabIndex;\n  if (temporary) {\n    tabIndex = -1;\n  } else if (typeof propTabIndex === \"undefined\") {\n    tabIndex = 0;\n  }\n  /**\n   * Gets the current index of the option that has the same value as the\n   * provided prop value.\n   */\n  var getIndex = useCallback(function () {\n    return options.findIndex(function (option) {\n      return value === getOptionValue(option, valueKey);\n    });\n  }, [getOptionValue, options, value, valueKey]);\n  /**\n   * Conditionally calls the onChange callback with the new value and option if\n   * the value has changed. This will be called when:\n   * - the user presses the enter or space key while \"focusing\" an option\n   * - the user keyboard navigates to a new option while the\n   *   `disableMovementChange` prop is `false`\n   * - the user clicks the option with a mouse or touch\n   */\n  var handleChange = useCallback(function (index) {\n    if (readOnly) {\n      return;\n    }\n    var option = options[index];\n    if (!option || isOptionDisabled(option)) {\n      return;\n    }\n    var optionValue = getOptionValue(option, valueKey);\n    if (value !== optionValue) {\n      onChange(optionValue, options[index], {\n        id: id,\n        name: name,\n        value: value,\n        valueKey: valueKey,\n        options: options\n      });\n    }\n  }, [getOptionValue, id, isOptionDisabled, name, onChange, options, readOnly, value, valueKey]);\n  var handleKeyboardClick = useCallback(function (focusedIndex) {\n    handleChange(focusedIndex);\n    if (temporary && onRequestClose) {\n      onRequestClose();\n    }\n  }, [handleChange, onRequestClose, temporary]);\n  var _l = useActiveDescendantMovement(__assign(__assign({}, MovementPresets.VERTICAL_LISTBOX), {\n      defaultFocusedIndex: getIndex,\n      items: options,\n      baseId: id,\n      valueKey: labelKey,\n      getId: getOptionId,\n      getItemValue: function (option, key) {\n        if (!isListboxOptionProps(option)) {\n          return \"\".concat(option);\n        }\n        var search = option[key];\n        if (typeof search === \"number\" || typeof search === \"string\") {\n          return \"\".concat(search);\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n          if (!warned) {\n            warned = new Set();\n          }\n          if (!warned.has(id)) {\n            /* eslint-disable no-console */\n            console.warn(\"A listbox with an id of \\\"\".concat(id, \"\\\" has an option that does not have a searchable label string. \") + \"Users will be unable to use the typeahead feature in the Listbox component until this is fixed. \" + \"To fix this warning, you can use the `labelKey` prop on the `Listbox`/`Select` component to point \" + \"to a string on the following option:\", option);\n            warned.add(id);\n          }\n        }\n        return \"\";\n      },\n      onChange: function (data) {\n        if (disableMovementChange) {\n          return;\n        }\n        handleChange(data.index);\n      },\n      onEnter: handleKeyboardClick,\n      onSpace: handleKeyboardClick,\n      onKeyDown: function (event) {\n        if (propOnKeyDown) {\n          propOnKeyDown(event);\n        }\n        switch (event.key) {\n          case \"Tab\":\n          case \"Escape\":\n            if (event.key === \"Escape\") {\n              event.stopPropagation();\n            }\n            if (temporary && onRequestClose) {\n              onRequestClose();\n            }\n            break;\n          // no default\n        }\n      }\n    })),\n    activeId = _l.activeId,\n    itemRefs = _l.itemRefs,\n    onKeyDown = _l.onKeyDown,\n    focusedIndex = _l.focusedIndex,\n    setFocusedIndex = _l.setFocusedIndex;\n  var prevVisible = useRef(visible);\n  useEffect(function () {\n    if (prevVisible.current === visible) {\n      return;\n    }\n    prevVisible.current = visible;\n    // whenever it gains visibility, try to set the focused index to the\n    // current active value\n    if (visible) {\n      setFocusedIndex(getIndex());\n    }\n  }, [getIndex, setFocusedIndex, visible]);\n  var handleFocus = useCallback(function (event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n    var item = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    if (item) {\n      scrollIntoView(event.currentTarget, item);\n    }\n  }, [focusedIndex, itemRefs, onFocus]);\n  var _m = useScaleTransition({\n      nodeRef: nodeRef,\n      timeout: timeout,\n      className: cn(block({\n        temporary: temporary\n      }), propClassName),\n      classNames: classNames,\n      transitionIn: visible,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    }),\n    elementProps = _m.elementProps,\n    rendered = _m.rendered;\n  return _jsx(ConditionalPortal, __assign({\n    portal: portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: rendered && _jsx(List, __assign({}, props, elementProps, {\n      \"aria-activedescendant\": activeId,\n      role: \"listbox\",\n      tabIndex: tabIndex,\n      onFocus: handleFocus,\n      onKeyDown: onKeyDown\n    }, {\n      children: options.map(function (option, i) {\n        var optionId = getOptionId(id, i);\n        var optionValue = getOptionValue(option, valueKey);\n        var optionLabel = getOptionLabel(option, labelKey);\n        var optionProps;\n        if (isListboxOptionProps(option)) {\n          optionProps = omit(option, [labelKey, valueKey]);\n        }\n        var disabled = isOptionDisabled(option);\n        var onClick;\n        if (!readOnly && !disabled) {\n          onClick = function () {\n            handleChange(i);\n            setFocusedIndex(i);\n          };\n        }\n        return _jsx(Option, __assign({\n          id: optionId,\n          disabled: disabled\n        }, optionProps, {\n          ref: itemRefs[i],\n          focused: optionId === activeId,\n          selected: value === optionValue,\n          onClick: onClick\n        }, {\n          children: optionLabel\n        }), optionValue);\n      })\n    }))\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useCallback","useEffect","useRef","cn","List","ConditionalPortal","useScaleTransition","bem","DEFAULT_GET_ITEM_VALUE","MovementPresets","omit","scrollIntoView","useActiveDescendantMovement","Option","defaultIsOptionDisabled","getOptionId","DEFAULT_GET_OPTION_ID","getOptionLabel","DEFAULT_GET_OPTION_LABEL","isListboxOptionProps","block","warned","Listbox","_a","nodeRef","propClassName","_b","visible","_c","temporary","_d","labelKey","_e","valueKey","_f","_g","_h","getOptionValue","_j","isOptionDisabled","_k","disableMovementChange","onFocus","propOnKeyDown","name","options","value","onChange","propTabIndex","portal","portalInto","portalIntoId","onRequestClose","timeout","readOnly","classNames","onEnter","onEntering","onEntered","onExit","onExiting","onExited","props","tabIndex","getIndex","findIndex","option","handleChange","index","optionValue","id","handleKeyboardClick","focusedIndex","VERTICAL_LISTBOX","defaultFocusedIndex","items","baseId","getId","getItemValue","key","search","process","env","NODE_ENV","Set","has","console","warn","add","data","onSpace","onKeyDown","event","stopPropagation","activeId","itemRefs","setFocusedIndex","prevVisible","current","handleFocus","item","currentTarget","className","transitionIn","elementProps","rendered","_jsx","children","role","map","i","optionId","optionLabel","optionProps","disabled","onClick","ref","focused","selected"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/select/Listbox.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ListElement } from \"@react-md/list\";\nimport { List } from \"@react-md/list\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type { CSSTransitionComponentProps } from \"@react-md/transition\";\nimport { useScaleTransition } from \"@react-md/transition\";\nimport {\n  bem,\n  DEFAULT_GET_ITEM_VALUE,\n  MovementPresets,\n  omit,\n  scrollIntoView,\n  useActiveDescendantMovement,\n} from \"@react-md/utils\";\n\nimport { Option } from \"./Option\";\nimport type { ListboxOption, ListboxOptionProps } from \"./utils\";\nimport {\n  defaultIsOptionDisabled,\n  getOptionId as DEFAULT_GET_OPTION_ID,\n  getOptionLabel as DEFAULT_GET_OPTION_LABEL,\n  isListboxOptionProps,\n} from \"./utils\";\n\nexport type ListboxChangeEventData = Pick<\n  Required<ListboxProps>,\n  \"id\" | \"valueKey\" | \"value\" | \"options\"\n> &\n  Pick<ListboxProps, \"name\">;\n\n/**\n * A function to call when the value of the listbox changes. This will be called\n * whenever the user clicks a new option within the select field with either the\n * mouse, touch, or the enter/space key.\n *\n * Note: This will be called **each time the user keyboard selects** a new\n * option by either typing to find a match, using the home/end keys, or using\n * the arrow keys. If this is undesired behavior, enable the\n * `disableMovementChange` prop so that it'll only be called on \"click\" events.\n *\n * @param nextValue - The next value that should be set for the listbox.\n * @param option - The option that was selected.\n * @param listbox - Part of the listbox props to help identify which listbox has\n * been changed if reusing an event handler for multiple form parts.\n */\nexport type ListboxChangeEventHandler = (\n  nextValue: string,\n  option: ListboxOption,\n  listbox: ListboxChangeEventData\n) => void;\n\nexport interface ListboxOptions extends RenderConditionalPortalProps {\n  /**\n   * An optional name to provide for the listbox that will be provided with the\n   * `onChange` callback.\n   */\n  name?: string;\n\n  /**\n   * The list of options to display within the listbox.\n   */\n  options: readonly ListboxOption[];\n\n  /**\n   * A key to use that extracts the display label for an option from the options\n   * list. This will only be used if the option is an object and is passed to\n   * the `getOptionLabel` prop.\n   */\n  labelKey?: string;\n\n  /**\n   * A key to use that extracts the value for the option from the options list.\n   * This will only be used if the option is an object and will be passed to the\n   * `getOptionValue` prop.\n   */\n  valueKey?: string;\n\n  /**\n   * A function to call for each option that should return a unique id for the\n   * specific option in the list. These ids are required for handling\n   * `aria-activedescendant` movement within the listbox.\n   */\n  getOptionId?: typeof DEFAULT_GET_OPTION_ID;\n\n  /**\n   * A function that will get a display label for an option. The default\n   * behavior is to render any number or string options as the label, otherwise\n   * attempt to do `option[labelKey] || option.children`.\n   */\n  getOptionLabel?: typeof DEFAULT_GET_OPTION_LABEL;\n\n  /**\n   * A function that will get the value for an option. The default behavior is\n   * to render any number or string options as the value, otherwise attempt to\n   * do `option[valueKey]`.\n   */\n  getOptionValue?: typeof DEFAULT_GET_ITEM_VALUE;\n\n  /**\n   * A function to call for each option to check if it is currently disabled.\n   * This is really just a convenience prop so that you don't need to modify the\n   * `options` yourself.\n   */\n  isOptionDisabled?: (option: ListboxOption) => boolean;\n\n  /**\n   * The listbox is a controlled component, so you will need to provide the\n   * current value and an `onChange` handler. The `value` must be a string and\n   * _should_ be one of the option's values when something has been selected. If\n   * you want to have an \"empty\" select box to require the user to manually\n   * select something to be considered valid, you can set this to the empty\n   * string and it'll be considered \"unvalued\".\n   */\n  value: string;\n\n  /**\n    @see ListboxChangeEventHandler\n   */\n  onChange: ListboxChangeEventHandler;\n\n  /**\n   * Boolean if using the keyboard should not immediately trigger the `onChange`\n   * callback. When this is enabled, the `onChange` callback will only be called\n   * if the user clicks an item or presses the enter or space key.\n   */\n  disableMovementChange?: boolean;\n}\n\nexport interface ListboxProps\n  extends Omit<\n      HTMLAttributes<ListElement>,\n      \"value\" | \"defaultValue\" | \"onChange\"\n    >,\n    ListboxOptions,\n    CSSTransitionComponentProps {\n  /**\n   * The id for the listbox. This is required for a11y and is used to generate\n   * unique ids for each option within the listbox for `aria-activedescendant`\n   * movement.\n   */\n  id: string;\n\n  /**\n   * Boolean if the listbox is in a temporary element (like a dropdown). This\n   * will update the behavior so that the default `tabIndex` is `-1` instead of\n   * `0` since it shouldn't be tab focusable within a dropdown.\n   */\n  temporary?: boolean;\n\n  /**\n   * Boolean if the listbox is visible. This should stay defaulted as `true`\n   * when the `temporary` prop is set to `false`.\n   */\n  visible?: boolean;\n\n  /**\n   * A function to call that should set the visible prop to `false`. This\n   * **must** be provided when the `temporary` prop is enabled.\n   */\n  onRequestClose?: () => void;\n\n  /**\n   * Boolean if all the options should just be read only and prevent the\n   * `onChange` handler to be called when an option is keyboard focused or\n   * clicked.\n   */\n  readOnly?: boolean;\n}\n\nconst block = bem(\"rmd-listbox\");\n\nlet warned: Set<string> | undefined;\n\n/**\n * This component is used to render the list part of a `<select>` element with\n * built-in accessibility and the ability to add custom styles. This should\n * probably not be used much outside of `react-md` itself and the `Select`\n * component, but I'm planning on adding support for an inline listbox at some\n * point.\n */\nexport const Listbox = forwardRef<ListElement, ListboxProps>(function Listbox(\n  {\n    className: propClassName,\n    visible = true,\n    temporary = false,\n    labelKey = \"label\",\n    valueKey = \"value\",\n    getOptionId = DEFAULT_GET_OPTION_ID,\n    getOptionLabel = DEFAULT_GET_OPTION_LABEL,\n    getOptionValue = DEFAULT_GET_ITEM_VALUE,\n    isOptionDisabled = defaultIsOptionDisabled,\n    disableMovementChange = false,\n    onFocus,\n    onKeyDown: propOnKeyDown,\n    name,\n    options,\n    value,\n    onChange,\n    tabIndex: propTabIndex,\n    portal,\n    portalInto,\n    portalIntoId,\n    onRequestClose,\n    timeout,\n    readOnly,\n    classNames,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    ...props\n  },\n  nodeRef\n) {\n  const { id } = props;\n  let tabIndex = propTabIndex;\n  if (temporary) {\n    tabIndex = -1;\n  } else if (typeof propTabIndex === \"undefined\") {\n    tabIndex = 0;\n  }\n\n  /**\n   * Gets the current index of the option that has the same value as the\n   * provided prop value.\n   */\n  const getIndex = useCallback(\n    () =>\n      options.findIndex((option) => value === getOptionValue(option, valueKey)),\n    [getOptionValue, options, value, valueKey]\n  );\n\n  /**\n   * Conditionally calls the onChange callback with the new value and option if\n   * the value has changed. This will be called when:\n   * - the user presses the enter or space key while \"focusing\" an option\n   * - the user keyboard navigates to a new option while the\n   *   `disableMovementChange` prop is `false`\n   * - the user clicks the option with a mouse or touch\n   */\n  const handleChange = useCallback(\n    (index: number) => {\n      if (readOnly) {\n        return;\n      }\n\n      const option = options[index];\n      if (!option || isOptionDisabled(option)) {\n        return;\n      }\n\n      const optionValue = getOptionValue(option, valueKey);\n      if (value !== optionValue) {\n        onChange(optionValue, options[index], {\n          id,\n          name,\n          value,\n          valueKey,\n          options,\n        });\n      }\n    },\n    [\n      getOptionValue,\n      id,\n      isOptionDisabled,\n      name,\n      onChange,\n      options,\n      readOnly,\n      value,\n      valueKey,\n    ]\n  );\n\n  const handleKeyboardClick = useCallback(\n    (focusedIndex: number) => {\n      handleChange(focusedIndex);\n      if (temporary && onRequestClose) {\n        onRequestClose();\n      }\n    },\n    [handleChange, onRequestClose, temporary]\n  );\n\n  const { activeId, itemRefs, onKeyDown, focusedIndex, setFocusedIndex } =\n    useActiveDescendantMovement<ListboxOption, ListElement, HTMLLIElement>({\n      ...MovementPresets.VERTICAL_LISTBOX,\n      defaultFocusedIndex: getIndex,\n      items: options,\n      baseId: id,\n      valueKey: labelKey,\n      getId: getOptionId,\n      getItemValue(option, key) {\n        if (!isListboxOptionProps(option)) {\n          return `${option}`;\n        }\n\n        const search = option[key];\n        if (typeof search === \"number\" || typeof search === \"string\") {\n          return `${search}`;\n        }\n\n        if (process.env.NODE_ENV !== \"production\") {\n          if (!warned) {\n            warned = new Set();\n          }\n\n          if (!warned.has(id)) {\n            /* eslint-disable no-console */\n            console.warn(\n              `A listbox with an id of \"${id}\" has an option that does not have a searchable label string. ` +\n                \"Users will be unable to use the typeahead feature in the Listbox component until this is fixed. \" +\n                \"To fix this warning, you can use the `labelKey` prop on the `Listbox`/`Select` component to point \" +\n                \"to a string on the following option:\",\n              option\n            );\n\n            warned.add(id);\n          }\n        }\n        return \"\";\n      },\n      onChange(data) {\n        if (disableMovementChange) {\n          return;\n        }\n\n        handleChange(data.index);\n      },\n      onEnter: handleKeyboardClick,\n      onSpace: handleKeyboardClick,\n      onKeyDown(event) {\n        if (propOnKeyDown) {\n          propOnKeyDown(event);\n        }\n\n        switch (event.key) {\n          case \"Tab\":\n          case \"Escape\":\n            if (event.key === \"Escape\") {\n              event.stopPropagation();\n            }\n\n            if (temporary && onRequestClose) {\n              onRequestClose();\n            }\n            break;\n          // no default\n        }\n      },\n    });\n\n  const prevVisible = useRef(visible);\n  useEffect(() => {\n    if (prevVisible.current === visible) {\n      return;\n    }\n\n    prevVisible.current = visible;\n    // whenever it gains visibility, try to set the focused index to the\n    // current active value\n    if (visible) {\n      setFocusedIndex(getIndex());\n    }\n  }, [getIndex, setFocusedIndex, visible]);\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<ListElement>) => {\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      const item = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n      if (item) {\n        scrollIntoView(event.currentTarget, item);\n      }\n    },\n    [focusedIndex, itemRefs, onFocus]\n  );\n\n  const { elementProps, rendered } = useScaleTransition({\n    nodeRef,\n    timeout,\n    className: cn(block({ temporary }), propClassName),\n    classNames,\n    transitionIn: visible,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n  });\n\n  return (\n    <ConditionalPortal\n      portal={portal}\n      portalInto={portalInto}\n      portalIntoId={portalIntoId}\n    >\n      {rendered && (\n        <List\n          {...props}\n          {...elementProps}\n          aria-activedescendant={activeId}\n          role=\"listbox\"\n          tabIndex={tabIndex}\n          onFocus={handleFocus}\n          onKeyDown={onKeyDown}\n        >\n          {options.map((option, i) => {\n            const optionId = getOptionId(id, i);\n            const optionValue = getOptionValue(option, valueKey);\n            const optionLabel = getOptionLabel(option, labelKey);\n            let optionProps: ListboxOptionProps | undefined;\n            if (isListboxOptionProps(option)) {\n              optionProps = omit(option, [labelKey, valueKey]);\n            }\n\n            const disabled = isOptionDisabled(option);\n\n            let onClick;\n            if (!readOnly && !disabled) {\n              onClick = () => {\n                handleChange(i);\n                setFocusedIndex(i);\n              };\n            }\n\n            return (\n              <Option\n                key={optionValue}\n                id={optionId}\n                disabled={disabled}\n                {...optionProps}\n                ref={itemRefs[i]}\n                focused={optionId === activeId}\n                selected={value === optionValue}\n                onClick={onClick}\n              >\n                {optionLabel}\n              </Option>\n            );\n          })}\n        </List>\n      )}\n    </ConditionalPortal>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}