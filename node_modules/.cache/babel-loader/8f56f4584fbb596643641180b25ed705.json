{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-form-message\");\n/**\n * This component can be used to create a \"counter\" within the\n * {@link FormMessage} component.\n *\n * Note: This is really only useful when using the {@link FormMessage} component\n * without a {@link TextField}.\n *\n * @example\n * Example Usage\n * ```ts\n * interface ExampleProps {\n *   min: number;\n *   max: number;\n * }\n *\n * function Example({ min, max }: ExampleProps) {\n *   return (\n *     <FormMessage disableWrap>\n *       <FormMessageCounter>\n *         {`${min} / ${max}`}\n *       </FormMessageCounter>\n *     </FormMessage>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.9.0\n */\nexport function FormMessageCounter(_a) {\n  var children = _a.children,\n    className = _a.className,\n    props = __rest(_a, [\"children\", \"className\"]);\n  return _jsx(\"span\", __assign({}, props, {\n    className: cn(block(\"counter\"), className)\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,OAAOA,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAErC,IAAMC,KAAK,GAAGD,GAAG,CAAC,kBAAkB,CAAC;AAiBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,SAAUE,kBAAkB,CAACC,EAIT;EAHxB,YAAQ;IACRC,SAAS;IACNC,KAAK,cAHyB,yBAIlC,CADS;EAER,OACEC,0BAAUD,KAAK;IAAED,SAAS,EAAEL,EAAE,CAACE,KAAK,CAAC,SAAS,CAAC,EAAEG,SAAS;EAAC;IAAAG,UACxDA;EAAQ,GACJ;AAEX","names":["cn","bem","block","FormMessageCounter","_a","className","props","_jsx","children"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/FormMessageCounter.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nconst block = bem(\"rmd-form-message\");\n\n/** @remarks \\@since 2.9.0 */\nexport interface FormMessageCounterProps\n  extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * The children to display in the counter. This is normally a string like:\n   *\n   * @example\n   * String Example\n   * ```ts\n   * `${min} / ${max}`\n   * ```\n   */\n  children: ReactNode;\n}\n\n/**\n * This component can be used to create a \"counter\" within the\n * {@link FormMessage} component.\n *\n * Note: This is really only useful when using the {@link FormMessage} component\n * without a {@link TextField}.\n *\n * @example\n * Example Usage\n * ```ts\n * interface ExampleProps {\n *   min: number;\n *   max: number;\n * }\n *\n * function Example({ min, max }: ExampleProps) {\n *   return (\n *     <FormMessage disableWrap>\n *       <FormMessageCounter>\n *         {`${min} / ${max}`}\n *       </FormMessageCounter>\n *     </FormMessage>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.9.0\n */\nexport function FormMessageCounter({\n  children,\n  className,\n  ...props\n}: FormMessageCounterProps): ReactElement {\n  return (\n    <span {...props} className={cn(block(\"counter\"), className)}>\n      {children}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}