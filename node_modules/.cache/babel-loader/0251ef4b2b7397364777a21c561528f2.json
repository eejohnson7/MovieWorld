{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { Link } from \"./Link\";\nvar block = bem(\"rmd-link-skip\");\n/**\n * This component allows you to create a screen-reader only/keyboard focusable\n * only link that allows a user to skip to the main content of the page. This is\n * extremely useful when you have a lot of navigation items that must be tabbed\n * through before the main content can be focused and this component should\n * normally be the first focusable element on your page.\n */\nexport var SkipToMainContent = forwardRef(function SkipToMainContent(_a, ref) {\n  var _b = _a.id,\n    id = _b === void 0 ? \"skip-to-main-content\" : _b,\n    _c = _a.children,\n    children = _c === void 0 ? \"Skip to main content\" : _c,\n    _d = _a.unstyled,\n    unstyled = _d === void 0 ? false : _d,\n    mainId = _a.mainId,\n    className = _a.className,\n    onClick = _a.onClick,\n    props = __rest(_a, [\"id\", \"children\", \"unstyled\", \"mainId\", \"className\", \"onClick\"]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      onClick(event);\n    }\n    event.preventDefault();\n    var main = document.getElementById(mainId);\n    if (!main) {\n      if (process.env.NODE_ENV !== \"production\") {\n        /* eslint-disable no-console */\n        var foundMain = document.querySelector(\"main\");\n        var foundMainId = foundMain && foundMain.id;\n        console.error(\"Unable to find a main element to focus with an id of: \\\"\".concat(mainId, \"\\\".\"));\n        if (foundMainId) {\n          console.error(\"However, a \\\"<main>\\\" element was found with an id: \\\"\".concat(foundMainId, \"\\\". Should this be the \\\"mainId\\\" prop for the \\\"SkipToMainContent\\\" component?\"));\n        }\n      }\n      return;\n    }\n    main.focus();\n  }, [mainId, onClick]);\n  return _jsx(Link, __assign({}, props, {\n    id: id,\n    ref: ref,\n    href: \"#\".concat(mainId),\n    onClick: handleClick,\n    className: cn(block({\n      styled: !unstyled\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/C,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,GAAG,QAAQ,iBAAiB;AAErC,SAASC,IAAI,QAAQ,QAAQ;AAiC7B,IAAMC,KAAK,GAAGF,GAAG,CAAC,eAAe,CAAC;AAElC;;;;;;;AAOA,OAAO,IAAMG,iBAAiB,GAAGN,UAAU,CAGzC,SAASM,iBAAiB,CAC1BC,EAQC,EACDC,GAAG;EARD,cAA2B;IAA3BC,EAAE,mBAAG,sBAAsB;IAC3BC,gBAAiC;IAAjCC,QAAQ,mBAAG,sBAAsB;IACjCC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,MAAM;IACNC,SAAS;IACTC,OAAO;IACJC,KAAK,cAPV,gEAQC,CADS;EAIV,IAAMC,WAAW,GAAGjB,WAAW,CAC7B,UAACkB,KAA0C;IACzC,IAAIH,OAAO,EAAE;MACXA,OAAO,CAACG,KAAK,CAAC;;IAGhBA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAACT,MAAM,CAAC;IAC5C,IAAI,CAACO,IAAI,EAAE;MACT,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACzC;QACA,IAAMC,SAAS,GAAGL,QAAQ,CAACM,aAAa,CAAC,MAAM,CAAC;QAChD,IAAMC,WAAW,GAAGF,SAAS,IAAIA,SAAS,CAAClB,EAAE;QAC7CqB,OAAO,CAACC,KAAK,CACX,kEAA0DjB,MAAM,QAAI,CACrE;QACD,IAAIe,WAAW,EAAE;UACfC,OAAO,CAACC,KAAK,CACX,gEAAsDF,WAAW,oFAA4E,CAC9I;;;MAIL;;IAGFR,IAAI,CAACW,KAAK,EAAE;EACd,CAAC,EACD,CAAClB,MAAM,EAAEE,OAAO,CAAC,CAClB;EAED,OACEiB,KAAC7B,IAAI,eACCa,KAAK;IACTR,EAAE,EAAEA,EAAE;IACND,GAAG,EAAEA,GAAG;IACR0B,IAAI,EAAE,WAAIpB,MAAM,CAAE;IAClBE,OAAO,EAAEE,WAAW;IACpBH,SAAS,EAAEb,EAAE,CAACG,KAAK,CAAC;MAAE8B,MAAM,EAAE,CAACtB;IAAQ,CAAE,CAAC,EAAEE,SAAS;EAAC;IAAAJ,UAErDA;EAAQ,GACJ;AAEX,CAAC,CAAC","names":["forwardRef","useCallback","cn","bem","Link","block","SkipToMainContent","_a","ref","id","_c","children","_d","unstyled","mainId","className","onClick","props","handleClick","event","preventDefault","main","document","getElementById","process","env","NODE_ENV","foundMain","querySelector","foundMainId","console","error","focus","_jsx","href","styled"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/link/src/SkipToMainContent.tsx"],"sourcesContent":["import type { AnchorHTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport { Link } from \"./Link\";\n\nexport interface SkipToMainContentProps\n  extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  /**\n   * An id to use for the link.\n   */\n  id?: string;\n\n  /**\n   * The id to use for the `<main>` content that should be focused once this\n   * link is clicked.\n   */\n  mainId: string;\n\n  /**\n   * The children to display once the link has been keyboard focused.\n   */\n  children?: ReactNode;\n\n  /**\n   * Boolean if the skip to main content link should be unstyled so that you can\n   * provide your own styles. This is just helpful if you are using this\n   * component in a multiple places and don't want to keep overriding the\n   * default styles each time.\n   *\n   * Note: there will still be the \"base\" link styles, font size, and z-index.\n   * The `$rmd-link-skip-styles` and `$rmd-link-skip-active-styles` will not be\n   * applied.\n   */\n  unstyled?: boolean;\n}\n\nconst block = bem(\"rmd-link-skip\");\n\n/**\n * This component allows you to create a screen-reader only/keyboard focusable\n * only link that allows a user to skip to the main content of the page. This is\n * extremely useful when you have a lot of navigation items that must be tabbed\n * through before the main content can be focused and this component should\n * normally be the first focusable element on your page.\n */\nexport const SkipToMainContent = forwardRef<\n  HTMLAnchorElement,\n  SkipToMainContentProps\n>(function SkipToMainContent(\n  {\n    id = \"skip-to-main-content\",\n    children = \"Skip to main content\",\n    unstyled = false,\n    mainId,\n    className,\n    onClick,\n    ...props\n  },\n  ref\n) {\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      event.preventDefault();\n      const main = document.getElementById(mainId);\n      if (!main) {\n        if (process.env.NODE_ENV !== \"production\") {\n          /* eslint-disable no-console */\n          const foundMain = document.querySelector(\"main\");\n          const foundMainId = foundMain && foundMain.id;\n          console.error(\n            `Unable to find a main element to focus with an id of: \"${mainId}\".`\n          );\n          if (foundMainId) {\n            console.error(\n              `However, a \"<main>\" element was found with an id: \"${foundMainId}\". Should this be the \"mainId\" prop for the \"SkipToMainContent\" component?`\n            );\n          }\n        }\n\n        return;\n      }\n\n      main.focus();\n    },\n    [mainId, onClick]\n  );\n\n  return (\n    <Link\n      {...props}\n      id={id}\n      ref={ref}\n      href={`#${mainId}`}\n      onClick={handleClick}\n      className={cn(block({ styled: !unstyled }), className)}\n    >\n      {children}\n    </Link>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}