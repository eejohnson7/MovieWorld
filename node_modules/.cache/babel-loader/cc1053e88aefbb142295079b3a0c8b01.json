{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { bem, useIsUserInteractionMode, useKeyboardFocus } from \"@react-md/utils\";\nimport cn from \"classnames\";\nimport { useTabIndicatorStyles } from \"./useTabIndicatorStyles\";\nvar styles = bem(\"rmd-tabs\");\n/**\n * The `TabsList` component is the container for all the individual `Tab`s that\n * should be rendered. This handles adding an active indicator underneath the\n * active tab and animating it to the new location when a new tab becomes\n * active. It also handles the ability update which tab is selected when it has\n * been clicked or updated with keyboard movement.\n *\n * This should probably not be used outside of this package unless a custom\n * implementation is desired.\n */\nexport var TabsList = forwardRef(function TabsList(_a, ref) {\n  var _b;\n  var style = _a.style,\n    className = _a.className,\n    onFocus = _a.onFocus,\n    onKeyDown = _a.onKeyDown,\n    children = _a.children,\n    activeIndex = _a.activeIndex,\n    _c = _a.align,\n    align = _c === void 0 ? \"left\" : _c,\n    _d = _a.automatic,\n    automatic = _d === void 0 ? false : _d,\n    _e = _a.padded,\n    padded = _e === void 0 ? false : _e,\n    _f = _a.orientation,\n    orientation = _f === void 0 ? \"horizontal\" : _f,\n    onActiveIndexChange = _a.onActiveIndexChange,\n    _g = _a.disableTransition,\n    disableTransition = _g === void 0 ? false : _g,\n    props = __rest(_a, [\"style\", \"className\", \"onFocus\", \"onKeyDown\", \"children\", \"activeIndex\", \"align\", \"automatic\", \"padded\", \"orientation\", \"onActiveIndexChange\", \"disableTransition\"]);\n  var horizontal = orientation === \"horizontal\";\n  var isKeyboard = useIsUserInteractionMode(\"keyboard\");\n  var _h = useKeyboardFocus({\n      onFocus: onFocus,\n      onKeyDown: onKeyDown,\n      onFocusChange: function (element, focusIndex) {\n        element.focus();\n        if (automatic) {\n          onActiveIndexChange(focusIndex);\n        }\n      }\n    }),\n    _focusIndex = _h.focusIndex,\n    eventHandlers = __rest(_h, [\"focusIndex\"]);\n  var _j = useTabIndicatorStyles({\n      ref: ref,\n      activeIndex: activeIndex\n    }),\n    refCallback = _j.refCallback,\n    indicatorStyles = _j.indicatorStyles;\n  return _jsx(\"div\", __assign({}, props, {\n    \"aria-orientation\": orientation,\n    style: __assign(__assign({}, style), indicatorStyles),\n    role: \"tablist\",\n    ref: refCallback,\n    className: cn(styles((_b = {}, _b[align] = true, _b.padded = padded, _b.vertical = !horizontal, _b.animate = !disableTransition && (!automatic || !isKeyboard), _b)), className)\n  }, eventHandlers, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,SACEC,GAAG,EACHC,wBAAwB,EACxBC,gBAAgB,QACX,iBAAiB;AACxB,OAAOC,EAAE,MAAM,YAAY;AAG3B,SAASC,qBAAqB,QAAQ,yBAAyB;AA0B/D,IAAMC,MAAM,GAAGL,GAAG,CAAC,UAAU,CAAC;AAE9B;;;;;;;;;;AAUA,OAAO,IAAMM,QAAQ,GAAGP,UAAU,CAChC,SAASO,QAAQ,CACfC,EAcC,EACDC,GAAG;;EAdD,SAAK;IACLC,SAAS;IACTC,OAAO;IACPC,SAAS;IACTC,QAAQ;IACRC,WAAW;IACXC,aAAc;IAAdC,KAAK,mBAAG,MAAM;IACdC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACjBC,cAAc;IAAdC,MAAM,mBAAG,KAAK;IACdC,mBAA0B;IAA1BC,WAAW,mBAAG,YAAY;IAC1BC,mBAAmB;IACnBC,yBAAyB;IAAzBC,iBAAiB,mBAAG,KAAK;IACtBC,KAAK,cAbV,oKAcC,CADS;EAIV,IAAMC,UAAU,GAAGL,WAAW,KAAK,YAAY;EAC/C,IAAMM,UAAU,GAAG1B,wBAAwB,CAAC,UAAU,CAAC;EACvD,IAAM2B,KAAgD1B,gBAAgB,CAAC;MACrEQ,OAAO;MACPC,SAAS;MACTkB,aAAa,YAACC,OAAO,EAAEC,UAAU;QAC/BD,OAAO,CAACE,KAAK,EAAE;QACf,IAAIf,SAAS,EAAE;UACbK,mBAAmB,CAACS,UAAU,CAAC;;MAEnC;KACD,CAAC;IATkBE,WAAW;IAAKC,aAAa,cAA3C,cAA6C,CASjD;EAEI,SAAmC9B,qBAAqB,CAAC;MAC7DI,GAAG;MACHK,WAAW;KACZ,CAAC;IAHMsB,WAAW;IAAEC,eAAe,qBAGlC;EAEF,OACEC,yBACMZ,KAAK;IAAA,oBACSJ,WAAW;IAC7BiB,KAAK,wBAAOA,KAAK,GAAKF,eAAe;IACrCG,IAAI,EAAC,SAAS;IACd/B,GAAG,EAAE2B,WAAW;IAChB1B,SAAS,EAAEN,EAAE,CACXE,MAAM,WACJmC,GAACzB,KAAK,IAAG,IAAI,EACbyB,SAAM,WACNA,WAAQ,GAAE,CAACd,UAAU,EACrBc,UAAO,GAAE,CAAChB,iBAAiB,KAAK,CAACP,SAAS,IAAI,CAACU,UAAU,CAAC,MAC1D,EACFlB,SAAS;EACV,GACGyB,aAAa;IAAAtB,UAEhBA;EAAQ,GACL;AAEV,CAAC,CACF","names":["forwardRef","bem","useIsUserInteractionMode","useKeyboardFocus","cn","useTabIndicatorStyles","styles","TabsList","_a","ref","className","onFocus","onKeyDown","children","activeIndex","_c","align","_d","automatic","_e","padded","_f","orientation","onActiveIndexChange","_g","disableTransition","props","horizontal","isKeyboard","_h","onFocusChange","element","focusIndex","focus","_focusIndex","eventHandlers","refCallback","indicatorStyles","_jsx","style","role","_b"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tabs/src/TabsList.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport {\n  bem,\n  useIsUserInteractionMode,\n  useKeyboardFocus,\n} from \"@react-md/utils\";\nimport cn from \"classnames\";\n\nimport type { TabsConfig } from \"./types\";\nimport { useTabIndicatorStyles } from \"./useTabIndicatorStyles\";\n\nexport interface TabsListProps\n  extends HTMLAttributes<HTMLDivElement>,\n    TabsConfig {\n  /**\n   * The current active tab index to determine which tabs to animate in and out\n   * of view.\n   */\n  activeIndex: number;\n\n  /**\n   * A function to call when the `activeIndex` should change due to keyboard\n   * movement or clicking on a tab.\n   */\n  onActiveIndexChange(activeIndex: number): void;\n\n  /**\n   * Boolean if the indicator transition should be disabled while the active tab\n   * index changes.\n   *\n   * @defaultValue `false`\n   */\n  disableTransition?: boolean;\n}\n\nconst styles = bem(\"rmd-tabs\");\n\n/**\n * The `TabsList` component is the container for all the individual `Tab`s that\n * should be rendered. This handles adding an active indicator underneath the\n * active tab and animating it to the new location when a new tab becomes\n * active. It also handles the ability update which tab is selected when it has\n * been clicked or updated with keyboard movement.\n *\n * This should probably not be used outside of this package unless a custom\n * implementation is desired.\n */\nexport const TabsList = forwardRef<HTMLDivElement, TabsListProps>(\n  function TabsList(\n    {\n      style,\n      className,\n      onFocus,\n      onKeyDown,\n      children,\n      activeIndex,\n      align = \"left\",\n      automatic = false,\n      padded = false,\n      orientation = \"horizontal\",\n      onActiveIndexChange,\n      disableTransition = false,\n      ...props\n    },\n    ref\n  ) {\n    const horizontal = orientation === \"horizontal\";\n    const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n    const { focusIndex: _focusIndex, ...eventHandlers } = useKeyboardFocus({\n      onFocus,\n      onKeyDown,\n      onFocusChange(element, focusIndex) {\n        element.focus();\n        if (automatic) {\n          onActiveIndexChange(focusIndex);\n        }\n      },\n    });\n\n    const { refCallback, indicatorStyles } = useTabIndicatorStyles({\n      ref,\n      activeIndex,\n    });\n\n    return (\n      <div\n        {...props}\n        aria-orientation={orientation}\n        style={{ ...style, ...indicatorStyles }}\n        role=\"tablist\"\n        ref={refCallback}\n        className={cn(\n          styles({\n            [align]: true,\n            padded,\n            vertical: !horizontal,\n            animate: !disableTransition && (!automatic || !isKeyboard),\n          }),\n          className\n        )}\n        {...eventHandlers}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}