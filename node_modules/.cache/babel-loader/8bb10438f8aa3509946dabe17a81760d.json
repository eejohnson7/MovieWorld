{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { FormMessageContainer } from \"../FormMessageContainer\";\nimport { Password } from \"./Password\";\n/**\n * This component is a simple wrapper for the `Password` and `FormMessage`\n * components that should be used along with the `useTextField` hook to\n * conditionally show help and error messages with a `Password`.\n *\n * Simple example:\n *\n * ```ts\n * const [value, fieldProps] = useTextField({\n *   id: \"field-id\",\n *   required: true,\n *   minLength: 10,\n * });\n *\n * return (\n *   <PasswordWithMessage\n *     label=\"Label\"\n *     placeholder=\"Placeholder\"\n *     {...fieldProps}\n *   />\n * );\n * ```\n *\n * Note: Unlike the `TextFieldWithMessage` and `TextAreaWithMessage`, the error\n * icon will do nothing for this component unless the `disableVisibility` prop\n * is enabled.\n *\n * @remarks \\@since 2.5.0\n */\nexport var PasswordWithMessage = forwardRef(function PasswordWithMessage(_a, ref) {\n  var messageProps = _a.messageProps,\n    messageContainerProps = _a.messageContainerProps,\n    props = __rest(_a, [\"messageProps\", \"messageContainerProps\"]);\n  return _jsx(FormMessageContainer, __assign({}, messageContainerProps, {\n    messageProps: messageProps\n  }, {\n    children: _jsx(Password, __assign({}, props, {\n      ref: ref\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAGlC,SAASC,oBAAoB,QAAQ,yBAAyB;AAE9D,SAASC,QAAQ,QAAQ,YAAY;AAQrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,IAAMC,mBAAmB,GAAGH,UAAU,CAG3C,SAASG,mBAAmB,CAC5BC,EAAiD,EACjDC,GAAG;EADD,gBAAY;IAAEC,qBAAqB;IAAKC,KAAK,cAA/C,yCAAiD,CAAF;EAG/C,OACEC,KAACP,oBAAoB,eACfK,qBAAqB;IACzBG,YAAY,EAAEA;EAAY;IAAAC,UAE1BF,KAACN,QAAQ,eAAKK,KAAK;MAAEF,GAAG,EAAEA;IAAG;EAAI,GACZ;AAE3B,CAAC,CAAC","names":["forwardRef","FormMessageContainer","Password","PasswordWithMessage","_a","ref","messageContainerProps","props","_jsx","messageProps","children"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/text-field/PasswordWithMessage.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport { forwardRef } from \"react\";\n\nimport type { FieldMessageContainerExtension } from \"../FormMessageContainer\";\nimport { FormMessageContainer } from \"../FormMessageContainer\";\nimport type { PasswordProps } from \"./Password\";\nimport { Password } from \"./Password\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type PasswordWithMessageProps =\n  FieldMessageContainerExtension<PasswordProps>;\n\n/**\n * This component is a simple wrapper for the `Password` and `FormMessage`\n * components that should be used along with the `useTextField` hook to\n * conditionally show help and error messages with a `Password`.\n *\n * Simple example:\n *\n * ```ts\n * const [value, fieldProps] = useTextField({\n *   id: \"field-id\",\n *   required: true,\n *   minLength: 10,\n * });\n *\n * return (\n *   <PasswordWithMessage\n *     label=\"Label\"\n *     placeholder=\"Placeholder\"\n *     {...fieldProps}\n *   />\n * );\n * ```\n *\n * Note: Unlike the `TextFieldWithMessage` and `TextAreaWithMessage`, the error\n * icon will do nothing for this component unless the `disableVisibility` prop\n * is enabled.\n *\n * @remarks \\@since 2.5.0\n */\nexport const PasswordWithMessage = forwardRef<\n  HTMLInputElement,\n  PasswordWithMessageProps\n>(function PasswordWithMessage(\n  { messageProps, messageContainerProps, ...props },\n  ref\n): ReactElement {\n  return (\n    <FormMessageContainer\n      {...messageContainerProps}\n      messageProps={messageProps}\n    >\n      <Password {...props} ref={ref} />\n    </FormMessageContainer>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}