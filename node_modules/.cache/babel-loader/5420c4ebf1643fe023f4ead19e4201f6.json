{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { buttonThemeClassNames } from \"./buttonThemeClassNames\";\nimport { FAB } from \"./FAB\";\n/**\n * The `Button` component is a simple wrapper for the `<button>` element that\n * defaults the `type` attribute to `\"button\"` so that it does not automatically\n * submit forms by default. It also supports multiple themes, rendering as an\n * icon button, or even as a floating action button.\n *\n * The default theme will be a clear text button unless the `floating` prop has\n * been provided where it will render as an icon button by default instead.\n */\nexport var Button = forwardRef(function Button(_a, ref) {\n  var _b = _a.type,\n    type = _b === void 0 ? \"button\" : _b,\n    _c = _a.disabled,\n    disabled = _c === void 0 ? false : _c,\n    _d = _a.floating,\n    floating = _d === void 0 ? null : _d,\n    floatingProps = _a.floatingProps,\n    _e = _a.theme,\n    theme = _e === void 0 ? floating ? \"secondary\" : \"clear\" : _e,\n    _f = _a.themeType,\n    themeType = _f === void 0 ? floating ? \"contained\" : \"flat\" : _f,\n    _g = _a.buttonType,\n    buttonType = _g === void 0 ? floating ? \"icon\" : \"text\" : _g,\n    propClassName = _a.className,\n    children = _a.children,\n    disableRipple = _a.disableRipple,\n    disableProgrammaticRipple = _a.disableProgrammaticRipple,\n    rippleTimeout = _a.rippleTimeout,\n    rippleClassNames = _a.rippleClassNames,\n    rippleClassName = _a.rippleClassName,\n    rippleContainerClassName = _a.rippleContainerClassName,\n    propEnablePressedAndRipple = _a.enablePressedAndRipple,\n    disablePressedFallback = _a.disablePressedFallback,\n    onClick = _a.onClick,\n    onKeyUp = _a.onKeyUp,\n    onKeyDown = _a.onKeyDown,\n    onMouseUp = _a.onMouseUp,\n    onMouseDown = _a.onMouseDown,\n    onMouseLeave = _a.onMouseLeave,\n    onTouchStart = _a.onTouchStart,\n    onTouchMove = _a.onTouchMove,\n    onTouchEnd = _a.onTouchEnd,\n    props = __rest(_a, [\"type\", \"disabled\", \"floating\", \"floatingProps\", \"theme\", \"themeType\", \"buttonType\", \"className\", \"children\", \"disableRipple\", \"disableProgrammaticRipple\", \"rippleTimeout\", \"rippleClassNames\", \"rippleClassName\", \"rippleContainerClassName\", \"enablePressedAndRipple\", \"disablePressedFallback\", \"onClick\", \"onKeyUp\", \"onKeyDown\", \"onMouseUp\", \"onMouseDown\", \"onMouseLeave\", \"onTouchStart\", \"onTouchMove\", \"onTouchEnd\"]);\n  var enablePressedAndRipple = typeof propEnablePressedAndRipple === \"boolean\" ? propEnablePressedAndRipple : themeType === \"contained\";\n  var propHandlers = {\n    onClick: onClick,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onMouseUp: onMouseUp,\n    onMouseDown: onMouseDown,\n    onMouseLeave: onMouseLeave,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n  var isDisabledTheme = theme === \"disabled\";\n  var _h = useInteractionStates({\n      handlers: propHandlers,\n      className: buttonThemeClassNames({\n        theme: theme,\n        themeType: themeType,\n        buttonType: buttonType,\n        disabled: disabled,\n        className: propClassName\n      }),\n      disabled: disabled || isDisabledTheme,\n      disableRipple: disableRipple,\n      disableProgrammaticRipple: disableProgrammaticRipple,\n      disablePressedFallback: disablePressedFallback,\n      rippleTimeout: rippleTimeout,\n      rippleClassNames: rippleClassNames,\n      rippleClassName: rippleClassName,\n      rippleContainerClassName: rippleContainerClassName,\n      enablePressedAndRipple: enablePressedAndRipple\n    }),\n    ripples = _h.ripples,\n    className = _h.className,\n    handlers = _h.handlers;\n  return _jsx(FAB, __assign({\n    position: floating\n  }, floatingProps, {\n    children: _jsxs(\"button\", __assign({\n      \"aria-disabled\": isDisabledTheme || undefined\n    }, props, isDisabledTheme ? undefined : handlers, {\n      ref: ref,\n      type: type,\n      className: className,\n      disabled: disabled\n    }, {\n      children: [children, ripples]\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAEA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,oBAAoB,QAAQ,kBAAkB;AAIvD,SAASC,qBAAqB,QAAQ,yBAAyB;AAE/D,SAASC,GAAG,QAAQ,OAAO;AAwC3B;;;;;;;;;AASA,OAAO,IAAMC,MAAM,GAAGJ,UAAU,CAC9B,SAASI,MAAM,CACbC,EA4BC,EACDC,GAAG;EA5BD,gBAAe;IAAfC,IAAI,mBAAG,QAAQ;IACfC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,gBAAe;IAAfC,QAAQ,mBAAG,IAAI;IACfC,aAAa;IACbC,aAAwC;IAAxCC,KAAK,mBAAGH,QAAQ,GAAG,WAAW,GAAG,OAAO;IACxCI,iBAA2C;IAA3CC,SAAS,mBAAGL,QAAQ,GAAG,WAAW,GAAG,MAAM;IAC3CM,kBAAuC;IAAvCC,UAAU,mBAAGP,QAAQ,GAAG,MAAM,GAAG,MAAM;IAC5BQ,aAAa;IACxBC,QAAQ;IACRC,aAAa;IACbC,yBAAyB;IACzBC,aAAa;IACbC,gBAAgB;IAChBC,eAAe;IACfC,wBAAwB;IACAC,0BAA0B;IAClDC,sBAAsB;IACtBC,OAAO;IACPC,OAAO;IACPC,SAAS;IACTC,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,WAAW;IACXC,UAAU;IACPC,KAAK,cA3BV,gaA4BC,CADS;EAIV,IAAMC,sBAAsB,GAC1B,OAAOZ,0BAA0B,KAAK,SAAS,GAC3CA,0BAA0B,GAC1BX,SAAS,KAAK,WAAW;EAC/B,IAAMwB,YAAY,GAAG;IACnBX,OAAO;IACPC,OAAO;IACPC,SAAS;IACTC,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,WAAW;IACXC,UAAU;GACX;EAED,IAAMI,eAAe,GAAG3B,KAAK,KAAK,UAAU;EACtC,SAAmCb,oBAAoB,CAAC;MAC5DyC,QAAQ,EAAEF,YAAY;MACtBG,SAAS,EAAEzC,qBAAqB,CAAC;QAC/BY,KAAK;QACLE,SAAS;QACTE,UAAU;QACVT,QAAQ;QACRkC,SAAS,EAAExB;OACZ,CAAC;MACFV,QAAQ,EAAEA,QAAQ,IAAIgC,eAAe;MACrCpB,aAAa;MACbC,yBAAyB;MACzBM,sBAAsB;MACtBL,aAAa;MACbC,gBAAgB;MAChBC,eAAe;MACfC,wBAAwB;MACxBa,sBAAsB;KACvB,CAAC;IAlBMK,OAAO;IAAED,SAAS;IAAED,QAAQ,cAkBlC;EAEF,OACEG,KAAC1C,GAAG;IAAC2C,QAAQ,EAAEnC;EAAQ,GAAMC,aAAa;IAAAQ,UACxC2B;MAAA,iBACiBN,eAAe,IAAIO;IAAS,GACvCV,KAAK,EACJG,eAAe,GAAGO,SAAS,GAAGN,QAAQ,EAAC;MAC5CpC,GAAG,EAAEA,GAAG;MACRC,IAAI,EAAEA,IAAI;MACVoC,SAAS,EAAEA,SAAS;MACpBlC,QAAQ,EAAEA;IAAQ;MAAAW,WAEjBA,QAAQ,EACRwB,OAAO;IAAA;EACD,GACL;AAEV,CAAC,CACF","names":["forwardRef","useInteractionStates","buttonThemeClassNames","FAB","Button","_a","ref","type","_c","disabled","_d","floating","floatingProps","_e","theme","_f","themeType","_g","buttonType","propClassName","children","disableRipple","disableProgrammaticRipple","rippleTimeout","rippleClassNames","rippleClassName","rippleContainerClassName","propEnablePressedAndRipple","disablePressedFallback","onClick","onKeyUp","onKeyDown","onMouseUp","onMouseDown","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","props","enablePressedAndRipple","propHandlers","isDisabledTheme","handlers","className","ripples","_jsx","position","_jsxs","undefined"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/button/src/Button.tsx"],"sourcesContent":["/* eslint-disable react/button-has-type */\nimport type { ButtonHTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { InteractionStatesOptions } from \"@react-md/states\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport type { ButtonThemeProps } from \"./buttonThemeClassNames\";\nimport { buttonThemeClassNames } from \"./buttonThemeClassNames\";\nimport type { FABPosition, FABProps } from \"./FAB\";\nimport { FAB } from \"./FAB\";\n\n/**\n * This interface includes all the props that the `Button` component accepts so\n * the main use case might be creating a functionality wrapper for the `Button`\n * component, but passes all props down as normal.\n */\nexport interface ButtonProps\n  extends ButtonThemeProps,\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    Omit<InteractionStatesOptions<HTMLButtonElement>, \"disableSpacebarClick\"> {\n  /**\n   * The button's type attribute. This is set to \"button\" by default so that\n   * forms are not accidentally submitted when this prop is omitted since\n   * buttons without a type attribute work as submit by default.\n   */\n  type?: \"button\" | \"reset\" | \"submit\";\n\n  /**\n   * Any children to render within the button. This will normally just be text\n   * or an icon.\n   *\n   * Please note that it is considered invalid html to have a `<div>` as a\n   * descendant of a `<button>`.\n   */\n  children?: ReactNode;\n\n  /**\n   * The position within the viewport to display the button as a floating action\n   * button.\n   */\n  floating?: FABPosition;\n\n  /**\n   * Any additional props to provide the to `FAB` container element when the\n   * `floating` prop is provided\n   */\n  floatingProps?: PropsWithRef<FABProps, HTMLSpanElement>;\n}\n\n/**\n * The `Button` component is a simple wrapper for the `<button>` element that\n * defaults the `type` attribute to `\"button\"` so that it does not automatically\n * submit forms by default. It also supports multiple themes, rendering as an\n * icon button, or even as a floating action button.\n *\n * The default theme will be a clear text button unless the `floating` prop has\n * been provided where it will render as an icon button by default instead.\n */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  function Button(\n    {\n      type = \"button\",\n      disabled = false,\n      floating = null,\n      floatingProps,\n      theme = floating ? \"secondary\" : \"clear\",\n      themeType = floating ? \"contained\" : \"flat\",\n      buttonType = floating ? \"icon\" : \"text\",\n      className: propClassName,\n      children,\n      disableRipple,\n      disableProgrammaticRipple,\n      rippleTimeout,\n      rippleClassNames,\n      rippleClassName,\n      rippleContainerClassName,\n      enablePressedAndRipple: propEnablePressedAndRipple,\n      disablePressedFallback,\n      onClick,\n      onKeyUp,\n      onKeyDown,\n      onMouseUp,\n      onMouseDown,\n      onMouseLeave,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n      ...props\n    },\n    ref\n  ) {\n    const enablePressedAndRipple =\n      typeof propEnablePressedAndRipple === \"boolean\"\n        ? propEnablePressedAndRipple\n        : themeType === \"contained\";\n    const propHandlers = {\n      onClick,\n      onKeyUp,\n      onKeyDown,\n      onMouseUp,\n      onMouseDown,\n      onMouseLeave,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n\n    const isDisabledTheme = theme === \"disabled\";\n    const { ripples, className, handlers } = useInteractionStates({\n      handlers: propHandlers,\n      className: buttonThemeClassNames({\n        theme,\n        themeType,\n        buttonType,\n        disabled,\n        className: propClassName,\n      }),\n      disabled: disabled || isDisabledTheme,\n      disableRipple,\n      disableProgrammaticRipple,\n      disablePressedFallback,\n      rippleTimeout,\n      rippleClassNames,\n      rippleClassName,\n      rippleContainerClassName,\n      enablePressedAndRipple,\n    });\n\n    return (\n      <FAB position={floating} {...floatingProps}>\n        <button\n          aria-disabled={isDisabledTheme || undefined}\n          {...props}\n          {...(isDisabledTheme ? undefined : handlers)}\n          ref={ref}\n          type={type}\n          className={className}\n          disabled={disabled}\n        >\n          {children}\n          {ripples}\n        </button>\n      </FAB>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}