{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect, useState } from \"react\";\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\nexport var getOrientationType = function () {\n  var _a;\n  var screenOrientation = (_a = window.screen.orientation) === null || _a === void 0 ? void 0 : _a.type;\n  if (typeof screenOrientation === \"string\") {\n    return screenOrientation;\n  }\n  var _b = window.screen,\n    availHeight = _b.availHeight,\n    availWidth = _b.availWidth;\n  return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\nexport function useOrientation(defaultValue) {\n  var _a = __read(useState(function () {\n      if (defaultValue) {\n        return defaultValue;\n      }\n      if (typeof window !== \"undefined\") {\n        return getOrientationType();\n      }\n      return \"landscape-primary\";\n    }), 2),\n    value = _a[0],\n    setValue = _a[1];\n  useEffect(function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    var handler = function () {\n      setValue(getOrientationType());\n    };\n    window.addEventListener(\"orientationchange\", handler);\n    return function () {\n      return window.removeEventListener(\"orientationchange\", handler);\n    };\n  }, []);\n  return value;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C;;;;AAIA,OAAO,IAAMC,kBAAkB,GAAG;;EAChC,IAAMC,iBAAiB,GAAG,YAAM,CAACC,MAAM,CAACC,WAAW,0CAAEC,IAAI;EACzD,IAAI,OAAOH,iBAAiB,KAAK,QAAQ,EAAE;IACzC,OAAOA,iBAAiB;;EAGpB,SAA8BI,MAAM,CAACH,MAAM;IAAzCI,WAAW;IAAEC,UAAU,gBAAkB;EAEjD,OAAOD,WAAW,GAAGC,UAAU,GAAG,kBAAkB,GAAG,mBAAmB;AAC5E,CAAC;AAED;;;;;;;;;;;AAWA,OAAM,SAAUC,cAAc,CAC5BC,YAA8B;EAExB,gBAAoBV,QAAQ,CAAkB;MAClD,IAAIU,YAAY,EAAE;QAChB,OAAOA,YAAY;;MAGrB,IAAI,OAAOJ,MAAM,KAAK,WAAW,EAAE;QACjC,OAAOL,kBAAkB,EAAE;;MAG7B,OAAO,mBAAmB;IAC5B,CAAC,CAAC;IAVKU,KAAK;IAAEC,QAAQ,QAUpB;EAEFb,SAAS,CAAC;IACR,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE;MACjC;;IAGF,IAAMO,OAAO,GAAG;MACdD,QAAQ,CAACX,kBAAkB,EAAE,CAAC;IAChC,CAAC;IACDK,MAAM,CAACQ,gBAAgB,CAAC,mBAAmB,EAAED,OAAO,CAAC;IAErD,OAAO;MAAM,aAAM,CAACE,mBAAmB,CAAC,mBAAmB,EAAEF,OAAO,CAAC;IAAxD,CAAwD;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,KAAK;AACd","names":["useEffect","useState","getOrientationType","screenOrientation","screen","orientation","type","window","availHeight","availWidth","useOrientation","defaultValue","value","setValue","handler","addEventListener","removeEventListener"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/sizing/useOrientation.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\nexport const getOrientationType = (): OrientationType => {\n  const screenOrientation = window.screen.orientation?.type;\n  if (typeof screenOrientation === \"string\") {\n    return screenOrientation;\n  }\n\n  const { availHeight, availWidth } = window.screen;\n\n  return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\nexport function useOrientation(\n  defaultValue?: OrientationType\n): OrientationType {\n  const [value, setValue] = useState<OrientationType>(() => {\n    if (defaultValue) {\n      return defaultValue;\n    }\n\n    if (typeof window !== \"undefined\") {\n      return getOrientationType();\n    }\n\n    return \"landscape-primary\";\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    const handler = (): void => {\n      setValue(getOrientationType());\n    };\n    window.addEventListener(\"orientationchange\", handler);\n\n    return () => window.removeEventListener(\"orientationchange\", handler);\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}