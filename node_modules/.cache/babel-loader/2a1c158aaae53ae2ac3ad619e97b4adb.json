{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCSSTransition } from \"./useCSSTransition\";\n/**\n * The default {@link CSSTransitionClassNames} for a horizontal scale\n * transition.\n *\n * @remarks \\@since 2.0.0\n */\nexport var SCALE_CLASSNAMES = {\n  appear: \"rmd-transition--scale-enter\",\n  appearActive: \"rmd-transition--scale-enter-active\",\n  enter: \"rmd-transition--scale-enter\",\n  enterActive: \"rmd-transition--scale-enter-active\",\n  enterDone: \"\",\n  exit: \"rmd-transition--scale-exit\",\n  exitActive: \"rmd-transition--scale-exit-active\"\n};\n/**\n * The default {@link CSSTransitionClassNames} for a vertical scale transition.\n *\n * @remarks \\@since 2.0.0\n */\nexport var SCALE_Y_CLASSNAMES = {\n  appear: \"rmd-transition--scale-y-enter\",\n  appearActive: \"rmd-transition--scale-y-enter-active\",\n  enter: \"rmd-transition--scale-y-enter\",\n  enterActive: \"rmd-transition--scale-y-enter-active\",\n  enterDone: \"\",\n  exit: \"rmd-transition--scale-y-exit\",\n  exitActive: \"rmd-transition--scale-y-exit-active\"\n};\n/**\n * The default {@link TransitionTimeout} to use for horizontal and vertical\n * scale transitions.\n *\n * @remarks \\@since 2.0.0\n */\nexport var SCALE_TIMEOUT = {\n  enter: 200,\n  exit: 150\n};\n/**\n * Implements a scale transition that should generally be used for temporary\n * elements that are positioned via `position: absolute` or `position: fixed`.\n *\n * @example\n * Dropdown Menu Example\n * ```tsx\n * import { ReactElement, useRef, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useFixedPositioning, useScaleTransition } from \"@react-md/transition\";\n *\n * function Example(): ReactElement {\n *   const buttonRef = useRef<HTMLButtonElement>(null);\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { style, transitionOptions } = useFixedPositioning({\n *     fixedTo: buttonRef,\n *   });\n *   const { elementProps, rendered } = useScaleTransition({\n *     ...transitionOptions,\n *     transitionIn,\n *     vertical: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button ref={buttonRef} onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps} style={style}>\n *           Some content within a menu\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useScaleTransition(_a) {\n  var _b = _a.timeout,\n    timeout = _b === void 0 ? SCALE_TIMEOUT : _b,\n    _c = _a.vertical,\n    vertical = _c === void 0 ? false : _c,\n    _d = _a.temporary,\n    temporary = _d === void 0 ? true : _d,\n    _e = _a.classNames,\n    classNames = _e === void 0 ? vertical ? SCALE_Y_CLASSNAMES : SCALE_CLASSNAMES : _e,\n    options = __rest(_a, [\"timeout\", \"vertical\", \"temporary\", \"classNames\"]);\n  return useCSSTransition(__assign(__assign({}, options), {\n    timeout: timeout,\n    temporary: temporary,\n    classNames: classNames\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAOA,SAASA,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;;AAMA,OAAO,IAAMC,gBAAgB,GAA4C;EACvEC,MAAM,EAAE,6BAA6B;EACrCC,YAAY,EAAE,oCAAoC;EAClDC,KAAK,EAAE,6BAA6B;EACpCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,EAAE;EACbC,IAAI,EAAE,4BAA4B;EAClCC,UAAU,EAAE;CACb;AAED;;;;;AAKA,OAAO,IAAMC,kBAAkB,GAA4C;EACzEP,MAAM,EAAE,+BAA+B;EACvCC,YAAY,EAAE,sCAAsC;EACpDC,KAAK,EAAE,+BAA+B;EACtCC,WAAW,EAAE,sCAAsC;EACnDC,SAAS,EAAE,EAAE;EACbC,IAAI,EAAE,8BAA8B;EACpCC,UAAU,EAAE;CACb;AAED;;;;;;AAMA,OAAO,IAAME,aAAa,GAAsC;EAC9DN,KAAK,EAAE,GAAG;EACVG,IAAI,EAAE;CACP;AAgCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,OAAM,SAAUI,kBAAkB,CAAwBC,EAM1B;EAL9B,mBAAuB;IAAvBC,OAAO,mBAAGH,aAAa;IACvBI,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,iBAAgB;IAAhBC,SAAS,mBAAG,IAAI;IAChBC,kBAA6D;IAA7DC,UAAU,mBAAGJ,QAAQ,GAAGN,kBAAkB,GAAGR,gBAAgB;IAC1DmB,OAAO,cAL8C,kDAMzD,CADW;EAEV,OAAOpB,gBAAgB,uBAClBoB,OAAO;IACVP,OAAO;IACPI,SAAS;IACTE,UAAU;EAAA,GACV;AACJ","names":["useCSSTransition","SCALE_CLASSNAMES","appear","appearActive","enter","enterActive","enterDone","exit","exitActive","SCALE_Y_CLASSNAMES","SCALE_TIMEOUT","useScaleTransition","_a","timeout","_c","vertical","_d","temporary","_e","classNames","options"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/transition/src/useScaleTransition.ts"],"sourcesContent":["import type {\n  CSSTransitionClassNames,\n  CSSTransitionClassNamesObject,\n  CSSTransitionHookReturnValue,\n  PreconfiguredCSSTransitionOptions,\n  TransitionTimeoutObject,\n} from \"./types\";\nimport { useCSSTransition } from \"./useCSSTransition\";\n\n/**\n * The default {@link CSSTransitionClassNames} for a horizontal scale\n * transition.\n *\n * @remarks \\@since 2.0.0\n */\nexport const SCALE_CLASSNAMES: Readonly<CSSTransitionClassNamesObject> = {\n  appear: \"rmd-transition--scale-enter\",\n  appearActive: \"rmd-transition--scale-enter-active\",\n  enter: \"rmd-transition--scale-enter\",\n  enterActive: \"rmd-transition--scale-enter-active\",\n  enterDone: \"\",\n  exit: \"rmd-transition--scale-exit\",\n  exitActive: \"rmd-transition--scale-exit-active\",\n};\n\n/**\n * The default {@link CSSTransitionClassNames} for a vertical scale transition.\n *\n * @remarks \\@since 2.0.0\n */\nexport const SCALE_Y_CLASSNAMES: Readonly<CSSTransitionClassNamesObject> = {\n  appear: \"rmd-transition--scale-y-enter\",\n  appearActive: \"rmd-transition--scale-y-enter-active\",\n  enter: \"rmd-transition--scale-y-enter\",\n  enterActive: \"rmd-transition--scale-y-enter-active\",\n  enterDone: \"\",\n  exit: \"rmd-transition--scale-y-exit\",\n  exitActive: \"rmd-transition--scale-y-exit-active\",\n};\n\n/**\n * The default {@link TransitionTimeout} to use for horizontal and vertical\n * scale transitions.\n *\n * @remarks \\@since 2.0.0\n */\nexport const SCALE_TIMEOUT: Readonly<TransitionTimeoutObject> = {\n  enter: 200,\n  exit: 150,\n};\n\n/**\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface ScaleTransitionHookOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionOptions<E> {\n  /**\n   * Boolean if the scale transition should be vertical instead of horizontal.\n   * This really only changes the default value for the {@link classNames}.\n   *\n   * @defaultValue `false`\n   */\n  vertical?: boolean;\n\n  /**\n   * @see {@link PreconfiguredCSSTransitionOptions.temporary}\n   * @defaultValue `true`\n   */\n  temporary?: boolean;\n\n  /**\n   * @see {@link vertical}\n   * @see {@link SCALE_CLASSNAMES}\n   * @see {@link SCALE_Y_CLASSNAMES}\n   * @defaultValue `vertical ? SCALE_Y_CLASSNAMES : SCALE_CLASSNAMES`\n   */\n  classNames?: CSSTransitionClassNames;\n}\n\n/**\n * Implements a scale transition that should generally be used for temporary\n * elements that are positioned via `position: absolute` or `position: fixed`.\n *\n * @example\n * Dropdown Menu Example\n * ```tsx\n * import { ReactElement, useRef, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useFixedPositioning, useScaleTransition } from \"@react-md/transition\";\n *\n * function Example(): ReactElement {\n *   const buttonRef = useRef<HTMLButtonElement>(null);\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { style, transitionOptions } = useFixedPositioning({\n *     fixedTo: buttonRef,\n *   });\n *   const { elementProps, rendered } = useScaleTransition({\n *     ...transitionOptions,\n *     transitionIn,\n *     vertical: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button ref={buttonRef} onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps} style={style}>\n *           Some content within a menu\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - The HTMLElement type used or the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useScaleTransition<E extends HTMLElement>({\n  timeout = SCALE_TIMEOUT,\n  vertical = false,\n  temporary = true,\n  classNames = vertical ? SCALE_Y_CLASSNAMES : SCALE_CLASSNAMES,\n  ...options\n}: ScaleTransitionHookOptions<E>): CSSTransitionHookReturnValue<E> {\n  return useCSSTransition({\n    ...options,\n    timeout,\n    temporary,\n    classNames,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}