{"ast":null,"code":"/**\n * The default implementation for checking if a `TextField` or `TextArea` is\n * errored by returning `true` if the `errorMessage` string is truthy or the\n * value is not within the `minLength` and `maxLength` constraints when they\n * exist.\n *\n * @remarks \\@since 2.5.0\n */\nexport var defaultIsErrored = function (_a) {\n  var value = _a.value,\n    errorMessage = _a.errorMessage,\n    minLength = _a.minLength,\n    maxLength = _a.maxLength,\n    isBlurEvent = _a.isBlurEvent;\n  return !!errorMessage || typeof maxLength === \"number\" && value.length > maxLength || isBlurEvent && typeof minLength === \"number\" && value.length < minLength;\n};","map":{"version":3,"mappings":"AAuBA;;;;;;;;AAQA,OAAO,IAAMA,gBAAgB,GAAc,UAACC,EAM3C;MALCC,KAAK;IACLC,YAAY;IACZC,SAAS;IACTC,SAAS;IACTC,WAAW;EAEX,QAAC,CAACH,YAAY,IACb,OAAOE,SAAS,KAAK,QAAQ,IAAIH,KAAK,CAACK,MAAM,GAAGF,SAAU,IAC1DC,WAAW,IAAI,OAAOF,SAAS,KAAK,QAAQ,IAAIF,KAAK,CAACK,MAAM,GAAGH,SAAU;AAF1E,CAE0E","names":["defaultIsErrored","_a","value","errorMessage","minLength","maxLength","isBlurEvent","length"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/text-field/isErrored.ts"],"sourcesContent":["import type { ErrorMessageOptions } from \"./getErrorMessage\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface IsErroredOptions extends ErrorMessageOptions {\n  /**\n   * The current error message or an empty string.\n   */\n  errorMessage: string;\n}\n\n/**\n * A function that is used to determine if a `TextField` or `TextArea` is in an\n * errored state.\n *\n * @param options - All the current options that can be used to determine the\n * error state.\n * @returns True if the component is considered to be in an errored state.\n * @remarks \\@since 2.5.0\n */\nexport type IsErrored = (options: IsErroredOptions) => boolean;\n\n/**\n * The default implementation for checking if a `TextField` or `TextArea` is\n * errored by returning `true` if the `errorMessage` string is truthy or the\n * value is not within the `minLength` and `maxLength` constraints when they\n * exist.\n *\n * @remarks \\@since 2.5.0\n */\nexport const defaultIsErrored: IsErrored = ({\n  value,\n  errorMessage,\n  minLength,\n  maxLength,\n  isBlurEvent,\n}) =>\n  !!errorMessage ||\n  (typeof maxLength === \"number\" && value.length > maxLength) ||\n  (isBlurEvent && typeof minLength === \"number\" && value.length < minLength);\n"]},"metadata":{},"sourceType":"module"}