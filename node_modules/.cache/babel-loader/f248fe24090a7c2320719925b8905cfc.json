{"ast":null,"code":"import { caseInsensitiveFilter, fuzzyFilter } from \"@react-md/utils\";\n/**\n * Generates an id for each result in the autocomplete's listbox.\n *\n * @param id - The listbox's id\n * @param index - The index of the result in the list\n * @returns an id string\n */\nexport function getResultId(id, index) {\n  return \"\".concat(id, \"-result-\").concat(index + 1);\n}\n/**\n * Gets a renderable label for each result in the autocomplete's listbox. This\n * will be applied as the `children` for the `Option` element.\n *\n * @param datum - The current result datum to get a label for\n * @param labelKey - The key to extract a label from if the datum is an object\n * @param _query - The current search query. This is useful if you want to\n * implement text \"highlighting\" (bold) of all the letters that match in the\n * item.\n * @returns a renderable node to display\n */\nexport function getResultLabel(datum, labelKey, _query) {\n  if (typeof datum === \"string\") {\n    return datum;\n  }\n  var label = datum[labelKey];\n  return datum.children || (typeof label === \"undefined\" ? null : label);\n}\n/**\n * Gets a value string from each result that can be searched.\n *\n * @param datum - The current result datum that should have a string extracted\n * @param valueKey - The key to use to extract a string value from if the datum\n * is an object\n * @returns a searchable string.\n */\nexport function getResultValue(datum, valueKey) {\n  if (typeof datum === \"string\") {\n    return datum;\n  }\n  var value = datum[valueKey];\n  if (process.env.NODE_ENV !== \"production\" && typeof value !== \"string\" && typeof value !== \"number\") {\n    throw new Error(\"Unable to extract a result value string\");\n  }\n  return \"\".concat(value);\n}\n/**\n * This is used to disable filtering and just return the data list immediately.\n * Useful when the filtering is done somewhere else like a server/API\n * @internal\n */\nexport var noFilter = function (_, data) {\n  return data;\n};\n/**\n * Gets the filter function to use within the Autocomplete based on the provided\n * filter prop\n *\n * @internal\n */\nexport function getFilterFunction(filter) {\n  if (typeof filter === \"function\") {\n    return filter;\n  }\n  switch (filter) {\n    case \"fuzzy\":\n      return fuzzyFilter;\n    case \"case-insensitive\":\n      return caseInsensitiveFilter;\n    case \"none\":\n      return noFilter;\n    default:\n      if (process.env.NODE_ENV !== \"production\") {\n        throw new Error(\"Invalid filter function: \\\"\".concat(filter, \"\\\". Supported values are: \\\"fuzzy\\\", \\\"case-insensitive\\\", \\\"none\\\", or a custom function.\"));\n      }\n      return noFilter;\n  }\n}\n/**\n * This is an extremely simple type guard that is useful when using the\n * `onAutoComplete` handler since I'm terrible at typescript types. This will\n * ensure that if the result is an object, it will match the provided data type\n * of your data list.\n *\n * Example:\n *\n * ```ts\n * interface Example {\n *   name: string;\n *   value: string;\n * }\n *\n *\n * const [example, setExample] = useState<Example | null>(null);\n * const onAutoComplete = useCallback<AuoCompleteHandler>((_name, example) => {\n *   if (isResultOf<Example>(example)) {\n *     setExample(example);\n *   }\n * }, [])\n * ```\n *\n * @param datum - The result data to type guard against.\n */\nexport function isResultOf(datum) {\n  return !!datum && typeof datum === \"object\";\n}","map":{"version":3,"mappings":"AACA,SAASA,qBAAqB,EAAEC,WAAW,QAAQ,iBAAiB;AAQpE;;;;;;;AAOA,OAAM,SAAUC,WAAW,CAACC,EAAU,EAAEC,KAAa;EACnD,OAAO,UAAGD,EAAE,qBAAWC,KAAK,GAAG,CAAC,CAAE;AACpC;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUC,cAAc,CAC5BC,KAAiC,EACjCC,QAAgB,EAChBC,MAAc;EAEd,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;;EAGd,IAAMG,KAAK,GAAGH,KAAK,CAACC,QAAQ,CAAC;EAC7B,OAAOD,KAAK,CAACI,QAAQ,KAAK,OAAOD,KAAK,KAAK,WAAW,GAAG,IAAI,GAAGA,KAAK,CAAC;AACxE;AAEA;;;;;;;;AAQA,OAAM,SAAUE,cAAc,CAC5BL,KAAiC,EACjCM,QAAgB;EAEhB,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;;EAGd,IAAMO,KAAK,GAAGP,KAAK,CAACM,QAAQ,CAAC;EAC7B,IACEE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IACrC,OAAOH,KAAK,KAAK,QAAQ,IACzB,OAAOA,KAAK,KAAK,QAAQ,EACzB;IACA,MAAM,IAAII,KAAK,CAAC,yCAAyC,CAAC;;EAG5D,OAAO,UAAGJ,KAAK,CAAE;AACnB;AAEA;;;;;AAKA,OAAO,IAAMK,QAAQ,GAAmB,UAACC,CAAC,EAAEC,IAAI;EAAK,WAAI;AAAJ,CAAI;AAEzD;;;;;;AAMA,OAAM,SAAUC,iBAAiB,CAC/BC,MAAqC;EAErC,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;IAChC,OAAOA,MAAM;;EAGf,QAAQA,MAAM;IACZ,KAAK,OAAO;MACV,OAAOrB,WAAW;IACpB,KAAK,kBAAkB;MACrB,OAAOD,qBAAqB;IAC9B,KAAK,MAAM;MACT,OAAOkB,QAAQ;IACjB;MACE,IAAIJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACzC,MAAM,IAAIC,KAAK,CACb,qCAA6BK,MAAM,+FAAqF,CACzH;;MAGH,OAAOJ,QAAQ;EAAC;AAEtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUK,UAAU,CACxBjB,KAAiC;EAEjC,OAAO,CAAC,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;AAC7C","names":["caseInsensitiveFilter","fuzzyFilter","getResultId","id","index","getResultLabel","datum","labelKey","_query","label","children","getResultValue","valueKey","value","process","env","NODE_ENV","Error","noFilter","_","data","getFilterFunction","filter","isResultOf"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/autocomplete/src/utils.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { caseInsensitiveFilter, fuzzyFilter } from \"@react-md/utils\";\n\nimport type {\n  AutoCompleteData,\n  AutoCompleteFilterFunction,\n  FilterFunction,\n} from \"./types\";\n\n/**\n * Generates an id for each result in the autocomplete's listbox.\n *\n * @param id - The listbox's id\n * @param index - The index of the result in the list\n * @returns an id string\n */\nexport function getResultId(id: string, index: number): string {\n  return `${id}-result-${index + 1}`;\n}\n\n/**\n * Gets a renderable label for each result in the autocomplete's listbox. This\n * will be applied as the `children` for the `Option` element.\n *\n * @param datum - The current result datum to get a label for\n * @param labelKey - The key to extract a label from if the datum is an object\n * @param _query - The current search query. This is useful if you want to\n * implement text \"highlighting\" (bold) of all the letters that match in the\n * item.\n * @returns a renderable node to display\n */\nexport function getResultLabel(\n  datum: Readonly<AutoCompleteData>,\n  labelKey: string,\n  _query: string\n): ReactNode {\n  if (typeof datum === \"string\") {\n    return datum;\n  }\n\n  const label = datum[labelKey];\n  return datum.children || (typeof label === \"undefined\" ? null : label);\n}\n\n/**\n * Gets a value string from each result that can be searched.\n *\n * @param datum - The current result datum that should have a string extracted\n * @param valueKey - The key to use to extract a string value from if the datum\n * is an object\n * @returns a searchable string.\n */\nexport function getResultValue(\n  datum: Readonly<AutoCompleteData>,\n  valueKey: string\n): string {\n  if (typeof datum === \"string\") {\n    return datum;\n  }\n\n  const value = datum[valueKey];\n  if (\n    process.env.NODE_ENV !== \"production\" &&\n    typeof value !== \"string\" &&\n    typeof value !== \"number\"\n  ) {\n    throw new Error(\"Unable to extract a result value string\");\n  }\n\n  return `${value}`;\n}\n\n/**\n * This is used to disable filtering and just return the data list immediately.\n * Useful when the filtering is done somewhere else like a server/API\n * @internal\n */\nexport const noFilter: FilterFunction = (_, data) => data;\n\n/**\n * Gets the filter function to use within the Autocomplete based on the provided\n * filter prop\n *\n * @internal\n */\nexport function getFilterFunction<O extends {} = {}>(\n  filter: AutoCompleteFilterFunction<O>\n): FilterFunction<O> {\n  if (typeof filter === \"function\") {\n    return filter;\n  }\n\n  switch (filter) {\n    case \"fuzzy\":\n      return fuzzyFilter;\n    case \"case-insensitive\":\n      return caseInsensitiveFilter;\n    case \"none\":\n      return noFilter;\n    default:\n      if (process.env.NODE_ENV !== \"production\") {\n        throw new Error(\n          `Invalid filter function: \"${filter}\". Supported values are: \"fuzzy\", \"case-insensitive\", \"none\", or a custom function.`\n        );\n      }\n\n      return noFilter;\n  }\n}\n\n/**\n * This is an extremely simple type guard that is useful when using the\n * `onAutoComplete` handler since I'm terrible at typescript types. This will\n * ensure that if the result is an object, it will match the provided data type\n * of your data list.\n *\n * Example:\n *\n * ```ts\n * interface Example {\n *   name: string;\n *   value: string;\n * }\n *\n *\n * const [example, setExample] = useState<Example | null>(null);\n * const onAutoComplete = useCallback<AuoCompleteHandler>((_name, example) => {\n *   if (isResultOf<Example>(example)) {\n *     setExample(example);\n *   }\n * }, [])\n * ```\n *\n * @param datum - The result data to type guard against.\n */\nexport function isResultOf<T extends {}>(\n  datum: Readonly<AutoCompleteData>\n): datum is T {\n  return !!datum && typeof datum === \"object\";\n}\n"]},"metadata":{},"sourceType":"module"}