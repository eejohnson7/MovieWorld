{"ast":null,"code":"import { useEffect, useMemo } from \"react\";\nimport { useNestedDialogContext } from \"./NestedDialogContext\";\n/**\n * This hook is used to fix the nested overlays and the escape keypress when\n * multiple dialogs are rendered at the same time on a page. All it really does\n * is keep a stack of the dialog ids that are current visible. If there is more\n * than 1 dialog visible and the dialog is not at the top of the stack, the\n * overlay and escape keypress will be disabled.\n *\n * NOTE: This will not work if you nest dialogs together and have them become\n * visible at the same time because the ids will get added from child to parent\n * instead of parent -&gt; child. This flow shouldn't really happen though so it\n * isn't planned on being fixed.\n */\nexport function useNestedDialogFixes(_a) {\n  var id = _a.id,\n    visible = _a.visible,\n    disabled = _a.disabled,\n    propDisableEscapeClose = _a.disableEscapeClose;\n  var _b = useNestedDialogContext(),\n    add = _b.add,\n    remove = _b.remove,\n    stack = _b.stack;\n  useEffect(function () {\n    if (disabled || !visible) {\n      return;\n    }\n    add(id);\n    return function () {\n      remove(id);\n    };\n  }, [visible, disabled, id, add, remove]);\n  return useMemo(function () {\n    var disableOverlay = false;\n    var disableEscapeClose = propDisableEscapeClose;\n    if (!disabled && visible && stack.length > 1) {\n      var lastIndex = stack.length - 1;\n      var i = stack.findIndex(function (dialogId) {\n        return id === dialogId;\n      });\n      disableOverlay = i < lastIndex;\n      if (!propDisableEscapeClose) {\n        disableEscapeClose = i < lastIndex;\n      }\n    }\n    return {\n      disableOverlay: disableOverlay,\n      disableEscapeClose: disableEscapeClose\n    };\n  }, [id, propDisableEscapeClose, disabled, visible, stack]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAE1C,SAASC,sBAAsB,QAAQ,uBAAuB;AAc9D;;;;;;;;;;;;AAYA,OAAM,SAAUC,oBAAoB,CAACC,EAK3B;MAJRC,EAAE;IACFC,OAAO;IACPC,QAAQ;IACYC,sBAAsB;EAEpC,SAAyBN,sBAAsB,EAAE;IAA/CO,GAAG;IAAEC,MAAM;IAAEC,KAAK,WAA6B;EACvDX,SAAS,CAAC;IACR,IAAIO,QAAQ,IAAI,CAACD,OAAO,EAAE;MACxB;;IAGFG,GAAG,CAACJ,EAAE,CAAC;IACP,OAAO;MACLK,MAAM,CAACL,EAAE,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,CAACC,OAAO,EAAEC,QAAQ,EAAEF,EAAE,EAAEI,GAAG,EAAEC,MAAM,CAAC,CAAC;EAExC,OAAOT,OAAO,CAAC;IACb,IAAIW,cAAc,GAAG,KAAK;IAC1B,IAAIC,kBAAkB,GAAGL,sBAAsB;IAC/C,IAAI,CAACD,QAAQ,IAAID,OAAO,IAAIK,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MAC5C,IAAMC,SAAS,GAAGJ,KAAK,CAACG,MAAM,GAAG,CAAC;MAClC,IAAME,CAAC,GAAGL,KAAK,CAACM,SAAS,CAAC,UAACC,QAAQ;QAAK,SAAE,KAAKA,QAAQ;MAAf,CAAe,CAAC;MACxDN,cAAc,GAAGI,CAAC,GAAGD,SAAS;MAC9B,IAAI,CAACP,sBAAsB,EAAE;QAC3BK,kBAAkB,GAAGG,CAAC,GAAGD,SAAS;;;IAItC,OAAO;MACLH,cAAc;MACdC,kBAAkB;KACnB;EACH,CAAC,EAAE,CAACR,EAAE,EAAEG,sBAAsB,EAAED,QAAQ,EAAED,OAAO,EAAEK,KAAK,CAAC,CAAC;AAC5D","names":["useEffect","useMemo","useNestedDialogContext","useNestedDialogFixes","_a","id","visible","disabled","propDisableEscapeClose","add","remove","stack","disableOverlay","disableEscapeClose","length","lastIndex","i","findIndex","dialogId"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/dialog/src/useNestedDialogFixes.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\n\nimport { useNestedDialogContext } from \"./NestedDialogContext\";\n\ninterface Options {\n  id: string;\n  visible: boolean;\n  disabled: boolean;\n  disableEscapeClose: boolean;\n}\n\ninterface ReturnValue {\n  disableOverlay: boolean;\n  disableEscapeClose: boolean;\n}\n\n/**\n * This hook is used to fix the nested overlays and the escape keypress when\n * multiple dialogs are rendered at the same time on a page. All it really does\n * is keep a stack of the dialog ids that are current visible. If there is more\n * than 1 dialog visible and the dialog is not at the top of the stack, the\n * overlay and escape keypress will be disabled.\n *\n * NOTE: This will not work if you nest dialogs together and have them become\n * visible at the same time because the ids will get added from child to parent\n * instead of parent -&gt; child. This flow shouldn't really happen though so it\n * isn't planned on being fixed.\n */\nexport function useNestedDialogFixes({\n  id,\n  visible,\n  disabled,\n  disableEscapeClose: propDisableEscapeClose,\n}: Options): ReturnValue {\n  const { add, remove, stack } = useNestedDialogContext();\n  useEffect(() => {\n    if (disabled || !visible) {\n      return;\n    }\n\n    add(id);\n    return () => {\n      remove(id);\n    };\n  }, [visible, disabled, id, add, remove]);\n\n  return useMemo(() => {\n    let disableOverlay = false;\n    let disableEscapeClose = propDisableEscapeClose;\n    if (!disabled && visible && stack.length > 1) {\n      const lastIndex = stack.length - 1;\n      const i = stack.findIndex((dialogId) => id === dialogId);\n      disableOverlay = i < lastIndex;\n      if (!propDisableEscapeClose) {\n        disableEscapeClose = i < lastIndex;\n      }\n    }\n\n    return {\n      disableOverlay,\n      disableEscapeClose,\n    };\n  }, [id, propDisableEscapeClose, disabled, visible, stack]);\n}\n"]},"metadata":{},"sourceType":"module"}