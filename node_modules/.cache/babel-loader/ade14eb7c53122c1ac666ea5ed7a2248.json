{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback } from \"react\";\nimport { DEFAULT_SLIDER_ANIMATION_TIME, DEFAULT_SLIDER_GET_VALUE_TEXT } from \"./constants\";\nimport { SliderContainer } from \"./SliderContainer\";\nimport { SliderThumb } from \"./SliderThumb\";\nimport { SliderTrack } from \"./SliderTrack\";\nimport { useSliderControls } from \"./useSliderControls\";\n/**\n * The `RangeSlider` component allows the user to select a min and max value from\n * a predefined range of numbers. The functionality for controlling the value of\n * this component is provided by the `useRangeSlider` hook.\n *\n * @remarks \\@since 2.5.0\n */\nexport var RangeSlider = forwardRef(function RangeSlider(_a, ref) {\n  var baseId = _a.baseId,\n    min = _a.min,\n    max = _a.max,\n    step = _a.step,\n    _b = _a.discrete,\n    discrete = _b === void 0 ? false : _b,\n    _c = _a.disabled,\n    disabled = _c === void 0 ? false : _c,\n    _d = _a.vertical,\n    vertical = _d === void 0 ? false : _d,\n    label = _a.label,\n    labelProps = _a.labelProps,\n    propTrackProps = _a.trackProps,\n    onBlur = _a.onBlur,\n    onMouseDown = _a.onMouseDown,\n    onTouchStart = _a.onTouchStart,\n    _e = _a.getValueText,\n    getValueText = _e === void 0 ? DEFAULT_SLIDER_GET_VALUE_TEXT : _e,\n    _f = _a.animationDuration,\n    animationDuration = _f === void 0 ? DEFAULT_SLIDER_ANIMATION_TIME : _f,\n    value = _a.value,\n    minimum = _a.minimum,\n    maximum = _a.maximum,\n    increment = _a.increment,\n    incrementJump = _a.incrementJump,\n    decrement = _a.decrement,\n    decrementJump = _a.decrementJump,\n    persist = _a.persist,\n    setValue = _a.setValue,\n    thumb1Props = _a.thumb1Props,\n    _g = _a.thumb1Label,\n    thumb1Label = _g === void 0 ? \"Min\" : _g,\n    thumb1LabelledBy = _a.thumb1LabelledBy,\n    thumb2Props = _a.thumb2Props,\n    _h = _a.thumb2Label,\n    thumb2Label = _h === void 0 ? \"Max\" : _h,\n    thumb2LabelledBy = _a.thumb2LabelledBy,\n    props = __rest(_a, [\"baseId\", \"min\", \"max\", \"step\", \"discrete\", \"disabled\", \"vertical\", \"label\", \"labelProps\", \"trackProps\", \"onBlur\", \"onMouseDown\", \"onTouchStart\", \"getValueText\", \"animationDuration\", \"value\", \"minimum\", \"maximum\", \"increment\", \"incrementJump\", \"decrement\", \"decrementJump\", \"persist\", \"setValue\", \"thumb1Props\", \"thumb1Label\", \"thumb1LabelledBy\", \"thumb2Props\", \"thumb2Label\", \"thumb2LabelledBy\"]);\n  var _j = useSliderControls({\n      ref: propTrackProps === null || propTrackProps === void 0 ? void 0 : propTrackProps.ref,\n      thumb1Ref: thumb1Props === null || thumb1Props === void 0 ? void 0 : thumb1Props.ref,\n      thumb2Ref: thumb2Props === null || thumb2Props === void 0 ? void 0 : thumb2Props.ref,\n      min: min,\n      max: max,\n      step: step,\n      value: value,\n      disabled: disabled,\n      vertical: vertical,\n      onBlur: onBlur,\n      onMouseDown: onMouseDown,\n      onTouchStart: onTouchStart,\n      animationDuration: animationDuration,\n      minimum: minimum,\n      maximum: maximum,\n      increment: increment,\n      incrementJump: incrementJump,\n      decrement: decrement,\n      decrementJump: decrementJump,\n      persist: persist,\n      setValue: setValue\n    }),\n    thumb1Ref = _j.thumb1Ref,\n    thumb1Value = _j.thumb1Value,\n    thumb2Ref = _j.thumb2Ref,\n    thumb2Value = _j.thumb2Value,\n    dragging = _j.dragging,\n    draggingIndex = _j.draggingIndex,\n    onKeyDown = _j.onKeyDown,\n    trackProps = __rest(_j, [\"thumb1Ref\", \"thumb1Value\", \"thumb2Ref\", \"thumb2Value\", \"dragging\", \"draggingIndex\", \"onKeyDown\"]);\n  var thumb1KeyDown = useCallback(function (event) {\n    if (thumb1Props === null || thumb1Props === void 0 ? void 0 : thumb1Props.onKeyDown) {\n      thumb1Props.onKeyDown(event);\n    }\n    onKeyDown(event);\n  }, [thumb1Props, onKeyDown]);\n  var thumb2KeyDown = useCallback(function (event) {\n    if (thumb2Props === null || thumb2Props === void 0 ? void 0 : thumb2Props.onKeyDown) {\n      thumb2Props.onKeyDown(event);\n    }\n    onKeyDown(event);\n  }, [thumb2Props, onKeyDown]);\n  var thumbProps = {\n    baseId: baseId,\n    min: min,\n    max: max,\n    discrete: discrete,\n    disabled: disabled,\n    vertical: vertical,\n    animate: !dragging,\n    animationDuration: animationDuration,\n    getValueText: getValueText\n  };\n  var labelId = \"\";\n  if (label) {\n    labelId = (labelProps === null || labelProps === void 0 ? void 0 : labelProps.id) || \"\".concat(baseId, \"-label\");\n  }\n  return _jsx(SliderContainer, __assign({}, props, {\n    ref: ref,\n    label: label,\n    labelId: labelId,\n    labelProps: labelProps,\n    disabled: disabled,\n    vertical: vertical\n  }, {\n    children: _jsxs(SliderTrack, __assign({\n      id: baseId\n    }, propTrackProps, trackProps, {\n      animate: !dragging,\n      disabled: disabled,\n      vertical: vertical\n    }, {\n      children: [_jsx(SliderThumb, __assign({\n        \"aria-label\": thumb1Label,\n        \"aria-labelledby\": thumb1LabelledBy\n      }, thumb1Props, thumbProps, {\n        ref: thumb1Ref,\n        value: thumb1Value,\n        index: 0,\n        active: draggingIndex === 0,\n        onKeyDown: thumb1KeyDown\n      })), _jsx(SliderThumb, __assign({\n        \"aria-label\": thumb2Label,\n        \"aria-labelledby\": thumb2LabelledBy\n      }, thumb2Props, thumbProps, {\n        ref: thumb2Ref,\n        value: thumb2Value,\n        index: 1,\n        active: draggingIndex === 1,\n        onKeyDown: thumb2KeyDown\n      }))]\n    }))\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useCallback","DEFAULT_SLIDER_ANIMATION_TIME","DEFAULT_SLIDER_GET_VALUE_TEXT","SliderContainer","SliderThumb","SliderTrack","useSliderControls","RangeSlider","_a","ref","min","max","step","_b","discrete","_c","disabled","_d","vertical","label","labelProps","propTrackProps","onBlur","onMouseDown","onTouchStart","_e","getValueText","_f","animationDuration","value","minimum","maximum","increment","incrementJump","decrement","decrementJump","persist","setValue","thumb1Props","_g","thumb1Label","thumb1LabelledBy","thumb2Props","_h","thumb2Label","thumb2LabelledBy","props","_j","thumb1Ref","thumb2Ref","thumb1Value","thumb2Value","dragging","draggingIndex","onKeyDown","trackProps","thumb1KeyDown","event","thumb2KeyDown","thumbProps","baseId","animate","labelId","id","_jsx","children","_jsxs","index","active"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/form/src/slider/RangeSlider.tsx"],"sourcesContent":["import type { HTMLAttributes, KeyboardEvent } from \"react\";\nimport { forwardRef, useCallback } from \"react\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_SLIDER_ANIMATION_TIME,\n  DEFAULT_SLIDER_GET_VALUE_TEXT,\n} from \"./constants\";\nimport { SliderContainer } from \"./SliderContainer\";\nimport { SliderThumb } from \"./SliderThumb\";\nimport { SliderTrack } from \"./SliderTrack\";\nimport type { BaseSliderProps } from \"./types\";\nimport type { RangeSliderRequiredProps } from \"./useRangeSlider\";\nimport { useSliderControls } from \"./useSliderControls\";\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface RangeSliderProps\n  extends RangeSliderRequiredProps,\n    BaseSliderProps {\n  /**\n   * Any additional props you'd like to pass to the track element as well as an\n   * optional `ref` if you need access to the track element for some reason.\n   */\n  trackProps?: PropsWithRef<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n  /**\n   * Any additional props you'd like to pass to the first thumb element as well\n   * as an optional `ref` if you need access to the track element for some\n   * reason.\n   */\n  thumb1Props?: PropsWithRef<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n  /**\n   * A convenience prop for adding an `aria-label` to the first thumb element. An\n   * accessible label **must** be provided by this prop, the `thumb1LabelledBy`\n   * prop, or adding an `aria-label`/`aria-labelledby` to the `thumb1Props` for\n   * a11y.\n   */\n  thumb1Label?: string;\n\n  /**\n   * A convenience prop for adding an `aria-labelledby` to the first thumb\n   * element. An accessible label **must** be provided by this prop, the\n   * `thumb1Label` prop, or adding an `aria-label`/`aria-labelledby` to the\n   * `thumb1Props` for a11y.\n   */\n  thumb1LabelledBy?: string;\n\n  /**\n   * Any additional props you'd like to pass to the second thumb element as well\n   * as an optional `ref` if you need access to the track element for some\n   * reason.\n   */\n  thumb2Props?: PropsWithRef<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n  /**\n   * A convenience prop for adding an `aria-label` to the second thumb element.\n   * An accessible label **must** be provided by this prop, the\n   * `thumb2LabelledBy` prop, or adding an `aria-label`/`aria-labelledby` to the\n   * `thumb2Props` for a11y.\n   */\n  thumb2Label?: string;\n\n  /**\n   * A convenience prop for adding an `aria-labelledby` to the second thumb\n   * element. An accessible label **must** be provided by this prop, the\n   * `thumb2Label` prop, or adding an `aria-label`/`aria-labelledby` to the\n   * `thumb2Props` for a11y.\n   */\n  thumb2LabelledBy?: string;\n}\n\n/**\n * The `RangeSlider` component allows the user to select a min and max value from\n * a predefined range of numbers. The functionality for controlling the value of\n * this component is provided by the `useRangeSlider` hook.\n *\n * @remarks \\@since 2.5.0\n */\nexport const RangeSlider = forwardRef<HTMLDivElement, RangeSliderProps>(\n  function RangeSlider(\n    {\n      baseId,\n      min,\n      max,\n      step,\n      discrete = false,\n      disabled = false,\n      vertical = false,\n      label,\n      labelProps,\n      trackProps: propTrackProps,\n      onBlur,\n      onMouseDown,\n      onTouchStart,\n      getValueText = DEFAULT_SLIDER_GET_VALUE_TEXT,\n      animationDuration = DEFAULT_SLIDER_ANIMATION_TIME,\n      value,\n      minimum,\n      maximum,\n      increment,\n      incrementJump,\n      decrement,\n      decrementJump,\n      persist,\n      setValue,\n      thumb1Props,\n      thumb1Label = \"Min\",\n      thumb1LabelledBy,\n      thumb2Props,\n      thumb2Label = \"Max\",\n      thumb2LabelledBy,\n      ...props\n    },\n    ref\n  ) {\n    const {\n      thumb1Ref,\n      thumb1Value,\n      thumb2Ref,\n      thumb2Value,\n      dragging,\n      draggingIndex,\n      onKeyDown,\n      ...trackProps\n    } = useSliderControls({\n      ref: propTrackProps?.ref,\n      thumb1Ref: thumb1Props?.ref,\n      thumb2Ref: thumb2Props?.ref,\n      min,\n      max,\n      step,\n      value,\n      disabled,\n      vertical,\n      onBlur,\n      onMouseDown,\n      onTouchStart,\n      animationDuration,\n      minimum,\n      maximum,\n      increment,\n      incrementJump,\n      decrement,\n      decrementJump,\n      persist,\n      setValue,\n    });\n\n    const thumb1KeyDown = useCallback(\n      (event: KeyboardEvent<HTMLSpanElement>) => {\n        if (thumb1Props?.onKeyDown) {\n          thumb1Props.onKeyDown(event);\n        }\n\n        onKeyDown(event);\n      },\n      [thumb1Props, onKeyDown]\n    );\n    const thumb2KeyDown = useCallback(\n      (event: KeyboardEvent<HTMLSpanElement>) => {\n        if (thumb2Props?.onKeyDown) {\n          thumb2Props.onKeyDown(event);\n        }\n\n        onKeyDown(event);\n      },\n      [thumb2Props, onKeyDown]\n    );\n\n    const thumbProps = {\n      baseId,\n      min,\n      max,\n      discrete,\n      disabled,\n      vertical,\n      animate: !dragging,\n      animationDuration,\n      getValueText,\n    };\n\n    let labelId = \"\";\n    if (label) {\n      labelId = labelProps?.id || `${baseId}-label`;\n    }\n\n    return (\n      <SliderContainer\n        {...props}\n        ref={ref}\n        label={label}\n        labelId={labelId}\n        labelProps={labelProps}\n        disabled={disabled}\n        vertical={vertical}\n      >\n        <SliderTrack\n          id={baseId}\n          {...propTrackProps}\n          {...trackProps}\n          animate={!dragging}\n          disabled={disabled}\n          vertical={vertical}\n        >\n          <SliderThumb\n            aria-label={thumb1Label}\n            aria-labelledby={thumb1LabelledBy}\n            {...thumb1Props}\n            {...thumbProps}\n            ref={thumb1Ref}\n            value={thumb1Value}\n            index={0}\n            active={draggingIndex === 0}\n            onKeyDown={thumb1KeyDown}\n          />\n          <SliderThumb\n            aria-label={thumb2Label}\n            aria-labelledby={thumb2LabelledBy}\n            {...thumb2Props}\n            {...thumbProps}\n            ref={thumb2Ref}\n            value={thumb2Value as number}\n            index={1}\n            active={draggingIndex === 1}\n            onKeyDown={thumb2KeyDown}\n          />\n        </SliderTrack>\n      </SliderContainer>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}