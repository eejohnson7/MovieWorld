{"ast":null,"code":"var SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n/**\n * Converts a hex string into an rgb value. This is useful for detecting color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\nexport function hexToRGB(hex) {\n  if (process.env.NODE_ENV !== \"production\" && !SHORTHAND_REGEX.test(hex) && !VERBOSE_REGEX.test(hex)) {\n    throw new TypeError(\"Invalid color string.\");\n  }\n  hex = hex.replace(SHORTHAND_REGEX, function (_m, r, g, b) {\n    return \"\".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b);\n  });\n  var result = hex.match(VERBOSE_REGEX) || [];\n  var r = parseInt(result[1] || \"\", 16) || 0;\n  var g = parseInt(result[2] || \"\", 16) || 0;\n  var b = parseInt(result[3] || \"\", 16) || 0;\n  return [r, g, b];\n}","map":{"version":3,"mappings":"AAKA,IAAMA,eAAe,GAAG,kCAAkC;AAC1D,IAAMC,aAAa,GAAG,2CAA2C;AAEjE;;;;;;;AAOA,OAAM,SAAUC,QAAQ,CAACC,GAAc;EACrC,IACEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IACrC,CAACN,eAAe,CAACO,IAAI,CAACJ,GAAG,CAAC,IAC1B,CAACF,aAAa,CAACM,IAAI,CAACJ,GAAG,CAAC,EACxB;IACA,MAAM,IAAIK,SAAS,CAAC,uBAAuB,CAAC;;EAG9CL,GAAG,GAAGA,GAAG,CAACM,OAAO,CACfT,eAAe,EACf,UAACU,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC;IAAK,iBAAGF,CAAC,SAAGA,CAAC,SAAGC,CAAC,SAAGA,CAAC,SAAGC,CAAC,SAAGA,CAAC,CAAE;EAA1B,CAA0B,CAC5C;EAED,IAAMC,MAAM,GAAGX,GAAG,CAACY,KAAK,CAACd,aAAa,CAAC,IAAI,EAAE;EAC7C,IAAMU,CAAC,GAAGK,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC;EAC5C,IAAMF,CAAC,GAAGI,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC;EAC5C,IAAMD,CAAC,GAAGG,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC;EAE5C,OAAO,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAClB","names":["SHORTHAND_REGEX","VERBOSE_REGEX","hexToRGB","hex","process","env","NODE_ENV","test","TypeError","replace","_m","r","g","b","result","match","parseInt"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/utils/src/colors/hexToRGB.ts"],"sourcesContent":["export type HexString = string;\nexport type RedBit = number;\nexport type GreenBit = number;\nexport type BlueBit = number;\n\nconst SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nconst VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n/**\n * Converts a hex string into an rgb value. This is useful for detecting color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\nexport function hexToRGB(hex: HexString): [RedBit, GreenBit, BlueBit] {\n  if (\n    process.env.NODE_ENV !== \"production\" &&\n    !SHORTHAND_REGEX.test(hex) &&\n    !VERBOSE_REGEX.test(hex)\n  ) {\n    throw new TypeError(\"Invalid color string.\");\n  }\n\n  hex = hex.replace(\n    SHORTHAND_REGEX,\n    (_m, r, g, b) => `${r}${r}${g}${g}${b}${b}`\n  );\n\n  const result = hex.match(VERBOSE_REGEX) || [];\n  const r = parseInt(result[1] || \"\", 16) || 0;\n  const g = parseInt(result[2] || \"\", 16) || 0;\n  const b = parseInt(result[3] || \"\", 16) || 0;\n\n  return [r, g, b];\n}\n"]},"metadata":{},"sourceType":"module"}