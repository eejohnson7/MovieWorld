{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\nvar block = bem(\"rmd-tab\");\n/**\n * The `Tab` is a low-level component that just renders an accessible tab widget\n * along with some general styles and an optional icon.\n */\nexport var Tab = forwardRef(function Tab(_a, ref) {\n  var propClassName = _a.className,\n    contentStyle = _a.contentStyle,\n    contentClassName = _a.contentClassName,\n    _b = _a.disabled,\n    disabled = _b === void 0 ? false : _b,\n    icon = _a.icon,\n    _c = _a.stacked,\n    stacked = _c === void 0 ? false : _c,\n    _d = _a.iconAfter,\n    iconAfter = _d === void 0 ? false : _d,\n    children = _a.children,\n    active = _a.active,\n    panelId = _a.panelId,\n    disableRipple = _a.disableRipple,\n    disableProgrammaticRipple = _a.disableProgrammaticRipple,\n    rippleTimeout = _a.rippleTimeout,\n    rippleClassNames = _a.rippleClassNames,\n    rippleClassName = _a.rippleClassName,\n    rippleContainerClassName = _a.rippleContainerClassName,\n    enablePressedAndRipple = _a.enablePressedAndRipple,\n    props = __rest(_a, [\"className\", \"contentStyle\", \"contentClassName\", \"disabled\", \"icon\", \"stacked\", \"iconAfter\", \"children\", \"active\", \"panelId\", \"disableRipple\", \"disableProgrammaticRipple\", \"rippleTimeout\", \"rippleClassNames\", \"rippleClassName\", \"rippleContainerClassName\", \"enablePressedAndRipple\"]);\n  var _e = useInteractionStates({\n      handlers: props,\n      className: propClassName,\n      disabled: disabled,\n      disableRipple: disableRipple,\n      disableProgrammaticRipple: disableProgrammaticRipple,\n      rippleTimeout: rippleTimeout,\n      rippleClassNames: rippleClassNames,\n      rippleClassName: rippleClassName,\n      rippleContainerClassName: rippleContainerClassName,\n      enablePressedAndRipple: enablePressedAndRipple\n    }),\n    ripples = _e.ripples,\n    className = _e.className,\n    handlers = _e.handlers;\n  var refCallback = useKeyboardFocusableElement(ref);\n  return _jsxs(\"button\", __assign({}, props, handlers, {\n    ref: refCallback,\n    \"aria-selected\": active,\n    \"aria-controls\": panelId,\n    type: \"button\",\n    role: \"tab\",\n    disabled: disabled,\n    className: cn(block({\n      active: active,\n      stacked: icon && stacked\n    }), className),\n    tabIndex: active ? undefined : -1\n  }, {\n    children: [_jsx(TextIconSpacing, __assign({\n      icon: icon,\n      stacked: stacked,\n      iconAfter: iconAfter\n    }, {\n      children: _jsx(\"span\", __assign({\n        style: contentStyle,\n        className: cn(block(\"content\"), contentClassName)\n      }, {\n        children: children\n      }))\n    })), ripples]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,eAAe,QAAQ,gBAAgB;AAEhD,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,GAAG,EAAEC,2BAA2B,QAAQ,iBAAiB;AAiClE,IAAMC,KAAK,GAAGF,GAAG,CAAC,SAAS,CAAC;AAE5B;;;;AAIA,OAAO,IAAMG,GAAG,GAAGP,UAAU,CAA8B,SAASO,GAAG,CACrEC,EAmBC,EACDC,GAAG;EAnBD,IAAWC,aAAa;IACxBC,YAAY;IACZC,gBAAgB;IAChBC,gBAAgB;IAAhBC,QAAQ,mBAAG,KAAK;IAChBC,IAAI;IACJC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,iBAAiB;IAAjBC,SAAS,mBAAG,KAAK;IACjBC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,aAAa;IACbC,yBAAyB;IACzBC,aAAa;IACbC,gBAAgB;IAChBC,eAAe;IACfC,wBAAwB;IACxBC,sBAAsB;IACnBC,KAAK,cAlBV,0RAmBC,CADS;EAIJ,SAAmC3B,oBAAoB,CAAC;MAC5D4B,QAAQ,EAAED,KAAK;MACfE,SAAS,EAAEtB,aAAa;MACxBI,QAAQ;MACRS,aAAa;MACbC,yBAAyB;MACzBC,aAAa;MACbC,gBAAgB;MAChBC,eAAe;MACfC,wBAAwB;MACxBC,sBAAsB;KACvB,CAAC;IAXMI,OAAO;IAAED,SAAS;IAAED,QAAQ,cAWlC;EACF,IAAMG,WAAW,GAAG7B,2BAA2B,CAACI,GAAG,CAAC;EAEpD,OACE0B,6BACML,KAAK,EACLC,QAAQ;IACZtB,GAAG,EAAEyB,WAAW;IAAA,iBACDb,MAAM;IAAA,iBACNC,OAAO;IACtBc,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC,KAAK;IACVvB,QAAQ,EAAEA,QAAQ;IAClBkB,SAAS,EAAE/B,EAAE,CAACK,KAAK,CAAC;MAAEe,MAAM;MAAEJ,OAAO,EAAEF,IAAI,IAAIE;IAAO,CAAE,CAAC,EAAEe,SAAS,CAAC;IACrEM,QAAQ,EAAEjB,MAAM,GAAGkB,SAAS,GAAG,CAAC;EAAC;IAAAnB,WAEjCoB,KAACtC,eAAe;MAACa,IAAI,EAAEA,IAAI;MAAEE,OAAO,EAAEA,OAAO;MAAEE,SAAS,EAAEA;IAAS;MAAAC,UACjEoB;QACEC,KAAK,EAAE9B,YAAY;QACnBqB,SAAS,EAAE/B,EAAE,CAACK,KAAK,CAAC,SAAS,CAAC,EAAEM,gBAAgB;MAAC;QAAAQ,UAEhDA;MAAQ;IACJ,GACS,EACjBa,OAAO;EAAA,GACD;AAEb,CAAC,CAAC","names":["forwardRef","cn","TextIconSpacing","useInteractionStates","bem","useKeyboardFocusableElement","block","Tab","_a","ref","propClassName","contentStyle","contentClassName","_b","disabled","icon","_c","stacked","_d","iconAfter","children","active","panelId","disableRipple","disableProgrammaticRipple","rippleTimeout","rippleClassNames","rippleClassName","rippleContainerClassName","enablePressedAndRipple","props","handlers","className","ripples","refCallback","_jsxs","type","role","tabIndex","undefined","_jsx","style"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/tabs/src/Tab.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport type { InteractionStatesOptions } from \"@react-md/states\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\n\nimport type { TabConfig } from \"./types\";\n\nexport interface TabProps\n  extends TabConfig,\n    HTMLAttributes<HTMLButtonElement>,\n    Omit<InteractionStatesOptions<HTMLButtonElement>, \"disableSpacebarClick\"> {\n  /**\n   * The id for the tab. This is required for a11y and linking the `TabPanel` to\n   * a specific tab.\n   */\n  id: string;\n\n  /**\n   * Boolean if the tab is currently active. Only one tab should be active at a\n   * time.\n   */\n  active: boolean;\n\n  /**\n   * The id for the `TabPanel` that the `Tab` controls. This is really just used\n   * to create an `aria-controls` attribute on the `Tab` itself, but Googling\n   * this results in some \"interesting\" results showing `aria-controls` doesn't\n   * really do much so this prop can be omitted.\n   *\n   * In addition, if you are using dynamically rendered tab panels, this value\n   * should only be provided when the tab becomes active as the `id` will not\n   * exist in the DOM until then and will be invalid.\n   */\n  panelId?: string;\n}\n\nconst block = bem(\"rmd-tab\");\n\n/**\n * The `Tab` is a low-level component that just renders an accessible tab widget\n * along with some general styles and an optional icon.\n */\nexport const Tab = forwardRef<HTMLButtonElement, TabProps>(function Tab(\n  {\n    className: propClassName,\n    contentStyle,\n    contentClassName,\n    disabled = false,\n    icon,\n    stacked = false,\n    iconAfter = false,\n    children,\n    active,\n    panelId,\n    disableRipple,\n    disableProgrammaticRipple,\n    rippleTimeout,\n    rippleClassNames,\n    rippleClassName,\n    rippleContainerClassName,\n    enablePressedAndRipple,\n    ...props\n  },\n  ref\n) {\n  const { ripples, className, handlers } = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled,\n    disableRipple,\n    disableProgrammaticRipple,\n    rippleTimeout,\n    rippleClassNames,\n    rippleClassName,\n    rippleContainerClassName,\n    enablePressedAndRipple,\n  });\n  const refCallback = useKeyboardFocusableElement(ref);\n\n  return (\n    <button\n      {...props}\n      {...handlers}\n      ref={refCallback}\n      aria-selected={active}\n      aria-controls={panelId}\n      type=\"button\"\n      role=\"tab\"\n      disabled={disabled}\n      className={cn(block({ active, stacked: icon && stacked }), className)}\n      tabIndex={active ? undefined : -1}\n    >\n      <TextIconSpacing icon={icon} stacked={stacked} iconAfter={iconAfter}>\n        <span\n          style={contentStyle}\n          className={cn(block(\"content\"), contentClassName)}\n        >\n          {children}\n        </span>\n      </TextIconSpacing>\n      {ripples}\n    </button>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}