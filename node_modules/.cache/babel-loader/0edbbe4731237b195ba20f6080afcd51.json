{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar base = bem(\"rmd-list-item\");\n/**\n * The `ListItemAddon` is used to create an addon to the left or right of the\n * text/children of a `ListItem`.\n */\nexport function ListItemAddon(_a) {\n  var _b;\n  var className = _a.className,\n    children = _a.children,\n    addon = _a.addon,\n    _c = _a.addonAfter,\n    addonAfter = _c === void 0 ? false : _c,\n    _d = _a.type,\n    type = _d === void 0 ? \"icon\" : _d,\n    _e = _a.position,\n    position = _e === void 0 ? \"middle\" : _e,\n    forceAddonWrap = _a.forceAddonWrap,\n    props = __rest(_a, [\"className\", \"children\", \"addon\", \"addonAfter\", \"type\", \"position\", \"forceAddonWrap\"]);\n  var isMedia = type === \"media\" || type === \"large-media\";\n  var isAvatar = type === \"avatar\";\n  return _jsx(TextIconSpacing, __assign({}, props, {\n    icon: addon,\n    forceIconWrap: forceAddonWrap !== null && forceAddonWrap !== void 0 ? forceAddonWrap : isMedia,\n    className: cn(base(\"addon\", (_b = {}, _b[position] = position !== \"middle\", _b.before = !addonAfter, _b[\"avatar-before\"] = !addonAfter && isAvatar, _b.media = isMedia, _b[\"media-large\"] = type === \"large-media\", _b)), className),\n    iconAfter: addonAfter\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AACA,OAAOA,EAAE,MAAM,YAAY;AAE3B,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,GAAG,QAAQ,iBAAiB;AAmCrC,IAAMC,IAAI,GAAGD,GAAG,CAAC,eAAe,CAAC;AAEjC;;;;AAIA,OAAM,SAAUE,aAAa,CAACC,EAST;;EARnB,aAAS;IACTC,QAAQ;IACRC,KAAK;IACLC,kBAAkB;IAAlBC,UAAU,mBAAG,KAAK;IAClBC,YAAa;IAAbC,IAAI,mBAAG,MAAM;IACbC,gBAAmB;IAAnBC,QAAQ,mBAAG,QAAQ;IACnBC,cAAc;IACXC,KAAK,cARoB,sFAS7B,CADS;EAER,IAAMC,OAAO,GAAGL,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,aAAa;EAC1D,IAAMM,QAAQ,GAAGN,IAAI,KAAK,QAAQ;EAElC,OACEO,KAACjB,eAAe,eACVc,KAAK;IACTI,IAAI,EAAEZ,KAAK;IACXa,aAAa,EAAEN,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAIE,OAAO;IACxCK,SAAS,EAAErB,EAAE,CACXG,IAAI,CAAC,OAAO,YACVmB,GAACT,QAAQ,IAAGA,QAAQ,KAAK,QAAQ,EACjCS,SAAM,GAAE,CAACb,UAAU,EACnBa,mBAAe,GAAE,CAACb,UAAU,IAAIQ,QAAQ,EACxCK,QAAK,GAAEN,OAAO,EACdM,iBAAa,GAAEX,IAAI,KAAK,aAAa,MACrC,EACFU,SAAS,CACV;IACDE,SAAS,EAAEd;EAAU;IAAAH,UAEpBA;EAAQ,GACO;AAEtB","names":["cn","TextIconSpacing","bem","base","ListItemAddon","_a","children","addon","_c","addonAfter","_d","type","_e","position","forceAddonWrap","props","isMedia","isAvatar","_jsx","icon","forceIconWrap","className","_b","iconAfter"],"sources":["/Users/erin/Desktop/finalProg/node_modules/@react-md/list/src/ListItemAddon.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport type { TextIconSpacingProps } from \"@react-md/icon\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nexport type ListItemAddonPosition = \"top\" | \"middle\" | \"bottom\";\nexport type ListItemAddonType = \"icon\" | \"avatar\" | \"media\" | \"large-media\";\n\nexport interface ListItemAddonProps\n  extends Omit<TextIconSpacingProps, \"icon\" | \"iconAfter\" | \"forceIconWrap\"> {\n  /**\n   * The addon that should be rendered.\n   */\n  addon: ReactNode | ReactElement;\n\n  /**\n   * Boolean if the addon should appear after the `children`.\n   */\n  addonAfter?: boolean;\n\n  /**\n   * The addon type that is used to adjust the spacing styles.\n   */\n  type?: ListItemAddonType;\n\n  /**\n   * Boolean if the addon should be forced into a `<span>` with the class names\n   * applied instead of attempting to clone into the provided icon. If the\n   * `type` is set to `\"media\"` or `\"large-media\"`, this will default to `true`.\n   */\n  forceAddonWrap?: boolean;\n\n  /**\n   * The vertical position to use for the addon.\n   */\n  position?: ListItemAddonPosition;\n}\n\nconst base = bem(\"rmd-list-item\");\n\n/**\n * The `ListItemAddon` is used to create an addon to the left or right of the\n * text/children of a `ListItem`.\n */\nexport function ListItemAddon({\n  className,\n  children,\n  addon,\n  addonAfter = false,\n  type = \"icon\",\n  position = \"middle\",\n  forceAddonWrap,\n  ...props\n}: ListItemAddonProps): ReactElement {\n  const isMedia = type === \"media\" || type === \"large-media\";\n  const isAvatar = type === \"avatar\";\n\n  return (\n    <TextIconSpacing\n      {...props}\n      icon={addon}\n      forceIconWrap={forceAddonWrap ?? isMedia}\n      className={cn(\n        base(\"addon\", {\n          [position]: position !== \"middle\",\n          before: !addonAfter,\n          \"avatar-before\": !addonAfter && isAvatar,\n          media: isMedia,\n          \"media-large\": type === \"large-media\",\n        }),\n        className\n      )}\n      iconAfter={addonAfter}\n    >\n      {children}\n    </TextIconSpacing>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}